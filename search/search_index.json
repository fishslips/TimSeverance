{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>index | </p>"},{"location":"#tim-severance","title":"Tim Severance","text":"<p>Welcome to my published Obsidian notes. I am a recent graduate and adjunct professor of the Computer Science department at Utah Valley University. I play music, develop video games, and love to spend my time learning. This site is currently under construction though, so mind your step.</p>"},{"location":"1.%20Positions/","title":"1. Positions","text":""},{"location":"1.%20Positions/#adjunct-faculty-instructor-of-record","title":"Adjunct Faculty (Instructor of Record)","text":""},{"location":"1.%20Positions/#2022-2024","title":"2022-2024","text":"<p>Utah Valley University | Orem, UT Computer Science Department</p>"},{"location":"1.%20Positions/#teaching-assistant","title":"Teaching Assistant","text":""},{"location":"1.%20Positions/#2020-2021","title":"2020-2021","text":"<p>Utah Valley University | Orem, UT Computer Science Department</p>"},{"location":"1.%20Positions/#research-associate","title":"Research Associate","text":""},{"location":"1.%20Positions/#2021","title":"2021","text":"<p>Ironwood Experts, LLC | Lehi, UT</p>"},{"location":"Academic/Sayings/","title":"Sayings","text":"<p>\"Why ponder?\" We have the collective knowledge of civilization at our fingertips.</p> <p>\"Everything has a cost.\" It's just a matter of where we push the cost to.</p> <p>\"Everything is an abstraction.\" But somewhere down the line, real work is performed.</p> <p>\"Nothing is real.\" Everything is an abstraction. The cloud isn't real, python isn't real, even bits aren't real, they're just chosen symbols to represent a perceived state of on and off, which is in itself an abstraction of the flow of electrons.</p> <p>\"RTFM\"</p>"},{"location":"Academic/Teaching/","title":"Teaching","text":""},{"location":"Academic/Teaching/#instructor-of-record","title":"Instructor of Record","text":"<ul> <li>CS 1410 - Object Oriented Programming -- Spring 2023</li> <li>CS 2300 - Discrete Mathematics 1 -- Fall 2023</li> <li>CS 2420 - Introduction to Algorithms and Data Structures -- Fall 2022, Spring 2023</li> <li>CS 2810 - Computer Organization and Architecture -- Fall 2023</li> <li>CS 3450 - Principles and Patterns of Software Design -- Spring 2023, Spring 2024</li> <li>CS 3370 - Advanced C++ -- Spring 2024</li> </ul>"},{"location":"Academic/Teaching/#teaching-assistant","title":"Teaching Assistant","text":"<ul> <li>CS 305G - Global Social and Ethical Issues in Computing -- Fall 2020 - Fall 2021</li> <li>CS 3260 - C# .Net Software Development -- Spring 2020</li> <li>CS 3450 - Principles and Patterns of Software Design -- Spring 2021</li> <li>CS 3310 - Analysis of Algorithms -- Spring 2020</li> </ul>"},{"location":"Academic/Teaching/#about-this-section","title":"About This Section","text":"<p>Using the navigation bar on the left, you can find class notes for a few of the classes that I've taught or am actively teaching. Additionally there are a few off-topic pages that are just links and things that I find interesting.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/","title":"Class Logistics","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#important-dates","title":"Important Dates","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#assignments","title":"Assignments","text":"Date Event August 27 Chapter 1 Problems September 3 Chapter 2 Problems September 10 Project 1 - Searching September 17 Chapter 3 Problems September 24 Project 2 - Sorting October 1 Chapter 4 Part 1 Problems October 8 Project 3 - Linked Structures October 12 Midterm October 12 Chapter 4 Part 2 Problems"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#registration-stuff","title":"Registration Stuff","text":"Date Event August 29 Waitlist and Open Registration Ends September 14 Last Day to Ddrop with 100% refund and not show on transcript September 16 Last Day to Add Classes (Late fee + Approval) October 31 Last day to Withdraw December 9 Classes End December 12 - 16 Finals December 22 Gradues due"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#holidays-and-breaks","title":"Holidays and Breaks","text":"Date Event September 5 Labor Day October 13 Fall Break Begins October 15 Fall Break Ends November 21 Thanksgiving Break Begins November 26 Thanksgiving Break Ends"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#notes","title":"Notes","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#082222","title":"08/22/22","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#zybook-instructions-for-access-through-canvas","title":"zyBook instructions for access through Canvas","text":"<ol> <li>Click any zyBooks assignment link in your learning management system (Do not go to the zyBooks website and create a new account)</li> <li>Subscribe</li> </ol> <p>Can be refunded</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#how-to-succeed-in-this-class","title":"How to succeed in this class","text":"<p>You've gotta get a C+ or higher to matriculate</p> <p>Midterm and Final is worth 30% - Between class and reading, you'll have everything you need to know.  - We'll do a review day before the tests.</p> <p>Programming Projects is 50% - Give yourself plenty of time and don't wait til the last minute - Ask the IA, ask me, ask your classmates.  </p> <p>zyBooks PA's is 20%  - These are basically free. Don't miss these points. They're literally so easy.</p> <p>Get lots of good sleep Take the fish and look at it Ask \"why\" a lot Ask others for help Come to class</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#contact-info","title":"Contact Info","text":"<p>Tim.Severance@uvu.edu Discord</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Class%20Logistics/#todo","title":"Todo","text":"<p>Discord server Fix zybooks Get memes going More about me stuff Hit pyhon confusions like \"self\" Why do we use binary? Show some compilery stuff? Big O </p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/","title":"Week 1","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#notes-for-module-1","title":"Notes for Module 1","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#intro-to-algorithms","title":"Intro to algorithms","text":"<p>Algorithms describe steps to solve some problem. Baking a cake, directions to CS401, or sorting lists can all use algorithms. Algorithms can be expressed in natural language, pseudocode, formal languages, whatever.</p> <p>Computational problems are problems that can be solved with computers given some input. We use algorithms to help solve these. Some algorithms are more efficient than others, as in they take less time or space to solve a problem, or they might be inefficient but easy to implement. There are lots of different ways to solve problems, some are better than others, but most of the time they have different pros and cons.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#np-complete-problem-nondeterministic-polynomial-time","title":"NP - Complete problem (Nondeterministic Polynomial time)","text":"<ol> <li>No efficient #algorithm has been found to solve it</li> <li>No one has proven that an efficient algorithm is impossible to find</li> <li>If it exists for one problem, then all NP-complete problems can be solved efficiently</li> </ol> <p>If it's NP-Complete, don't focus on the perfect solution, just a good inefficient one.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#how-data-structures-and-algorithms-relate-to-eachother","title":"How Data Structures and Algorithms relate to eachother","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#algorithms-for-data-structures","title":"Algorithms for data structures","text":"<p>Data structures are a way to organize, store, and perform operations on data.</p> <p>Data structures require specific operation to be performed on their data. This means that there are algorithms specific to different data structures. </p> <p>For example, inserting an item into a linked list for example requires a very different algorithm than inserting into an array.  </p> <p>Array insertion generally requires some variation of the following 1. Create new array[size + 1] 2. Copy items from old array to new array 3. Shift all items in the array forward from the position to be inserted 4. Insert item into now empty position</p> <p>Linked list insertion generally requires some variation of the following</p> <ol> <li>Nodes contain pointers to next node</li> <li>Create new object to be inserted</li> <li>Get \"next\" pointer of left node and assign to new object's \"next\" pointer</li> <li>Set next pointer of left node to new object to be inserted. </li> <li>Objects are now linked </li> </ol>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#data-structures-for-algorithms","title":"Data structures for algorithms","text":"<p>Book mentions an algorithm that determines top employees, might use an array to store employee data.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#abstract-data-types-adt","title":"Abstract Data Types (ADT)","text":"<p>ADTs focus more on the what rather than the how.</p> <p>Stacks, Heaps, Lists etc are examples of ADTs. When we talk about using a stack, an idea comes to mind of how data will be stored and handled without worrying about the concrete implementation. Stacks are FILO and so we understand that data coming in will be pushed to the bottom of a stack, and new data will pile on top of it. In order to reach information at the bottom, we have to remove stuff on top to get there.</p> <p>What we're not thinking about is the actual programmatic implementation of how a particular stack might work. A stack can be implemented with lots of different data types.</p> <p>https://cplusplus.com/reference/stack/stack/</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#efficiency","title":"Efficiency","text":"<p>Computational Complexity can consist of time T(N) and space S(N) complexity (how fast it goes, and how much space it takes up) where N is the input. </p> <p>Algorithms are typically measured by their best, average, and worst case scenarios. Best is minimum operations, worst is max.</p> <p>Space complexity include input data and additional memory allocation. Auxillary space complexity is just the additional memory allocation.</p> <p>N represents input k represents some constant number</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#topics-to-hit","title":"Topics to hit","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%201/#082422","title":"08/24/22","text":"<ol> <li>Memes / Pictures</li> <li>Make sure everyone has zybooks, discord, python + modules</li> <li>Questions</li> <li>Jupyter Notebooks</li> <li>Recursion / Compilation</li> <li>Fibonacci sequence</li> <li>BigOFib</li> <li>Space and Time Complexity</li> <li>Freestyle Coding (What did I mean by this? Getting better at coding? Coding on the fly? The dangers of not having a set plan? The benefits of flying freely and just experimenting?)</li> <li>Orders of Ignorance / Take this Fish</li> <li>Nothing is real. It's all made up. Nothing is sacred. We create structures to make sense of the world around us. Different paradigms make sense in different contexts. Don't lock yourself into one way of thinking.</li> <li>Recursion, Classes, dunder/magic methods</li> </ol>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/","title":"Week 10","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#trees","title":"Trees","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#102422","title":"10/24/22","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#topics-to-cover","title":"Topics To Cover","text":"<ul> <li>Keywords</li> <li>Wrap up iterator class / mention generators</li> <li>Traversal of a List</li> <li>Trees</li> <li>Traversal of a Tree</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#key-words","title":"Key Words","text":"<ul> <li>Leaf<ul> <li>A node with no children.</li> </ul> </li> <li>Internal node<ul> <li>A node with a least one child</li> </ul> </li> <li>Parent<ul> <li>A node with nodes </li> </ul> </li> <li>Root<ul> <li>Top node that has no parents. The start.</li> </ul> </li> <li>Level<ul> <li>Nodes with the same depth are on the same level</li> </ul> </li> <li>Depth<ul> <li>The number of edges from the root to a given node. Root has depth 0</li> </ul> </li> <li>Height<ul> <li>Overall depth of the tree</li> </ul> </li> <li>Full<ul> <li>If every node contains 0 or 2 children</li> </ul> </li> <li>Complete <ul> <li>If all levels contain all possible nodes and all nodes in the last level are as far left as possible</li> </ul> </li> <li>Perfect<ul> <li>If all internal nodes have 2 children and all leaves are at the same level</li> </ul> </li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#102622","title":"10/26/22","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#application-of-trees","title":"Application of Trees","text":"<ul> <li>File System</li> <li>BSPs for rendering</li> <li>Parsing, AST, Code Generation</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#binary-search-tree","title":"Binary Search Tree","text":"<p>Binary search trees can be poorly optimized and end up just looking like a linked list. If this is the case, then the benefits of being a binary search tree go out the window. Rather than being O(log(N)) it becomes O(N). In order to maintain optimal insertion, removal, and search times of O(log(N)), we have to balance our BST.</p> <ul> <li>Search<ol> <li>Check if NewNode.Value is LT or GTET CurrentNode.Value</li> <li>If CurrentNode.Left / Right is not Null -&gt; CurrentNode = CurrentNode.Left / Right</li> </ol> </li> <li>Insertion<ol> <li>NewNode &lt; CurrentNode and CurrentNode.Left is Null -&gt; CurrentNode.Left = NewNode</li> <li>NewNode &gt;= CurrentNode and CurrentNode.Right is Null -&gt;CurrentNode.Right = NewNode</li> </ol> </li> <li>Removal<ol> <li>Leaf -&gt;Current.Parent.{Left / Right} = Null</li> <li>Node with 1 Leaf -&gt; Current.Parent.{Left / Right} = Current.{Left / Right}</li> <li>Node with 2 -&gt; Find leftmost child of right subtree, copy successor to current node, recursively remove the successor</li> </ol> </li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#avl-tree","title":"AVL Tree","text":"<p>AVL stands for Adelson-Velsky and Landis who created it. First self balancing tree to be invented.</p> <p>These trees have a \"balance factor\" which is used to calculate whether or not the tree is properly balanced. A balance factor is calculated by determing the height of the subtrees of a given node and subtracting those heights. Imagine Node1 has two children. The factor for a subtree is the height (where the first child counts as height = 0). If a left or right subtree does not exist, its factor is -1. For example, if a root has a child with a grandchild, then the left subtree has a factor of 1, and subsequent descendents will increase that factor.</p> <p>AVL trees don't always have a perfectly minimal height, but their height is never worse than 1.5x the minimum height.</p> <ul> <li>Rotation<ul> <li>In order to actually make good use of insertion, we need to reorder the tree so that it's balanced. Rotation is a local rearrangement of a BST the keeps the proper order.     Left-Left (Left node to Left node) Factor (2, 1) -&gt; Solved with Right Rotation     Right-Right (Right node to Right node) Factor (-2,-1) -&gt; Solved with Left Rotation     Left-Right Factor(2,-1) (Left Node to Right Node) -&gt; Solved with Left Right Rotation     Right-Left Factor (-2, 1) (Right Node to Left Node) -&gt; Solved with Right Left Rotation</li> </ul> </li> <li>Insertion</li> <li>Removal</li> <li></li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#red-black-trees","title":"Red Black Trees","text":"<p>So named because of the ink the creators used when designating nodes</p> <ul> <li>Rules</li> <li>Rotation</li> <li>Insertion</li> <li>Removal</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#heap","title":"Heap","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#priority-queue","title":"Priority Queue","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2010/#treap","title":"Treap","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2011/","title":"Week 11","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2011/#trees-project","title":"Trees + Project","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2011/#103122-spooky","title":"10/31/22 (Spooky)","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2011/#topics-to-cover","title":"Topics to Cover","text":"<ul> <li>Whitespace + Punctuation</li> <li>Pair class</li> <li>Recursive / While traversal<ul> <li>Both need to move left or right</li> <li>We can use assignment with recursion to traverse and keep nodes the same and change the values we're looking for</li> <li>We can do recursion calls to move left or right and make changes once we've found the node</li> <li>We can while until a Null Node</li> </ul> </li> <li>What kind of tree to implement<ul> <li>Standard BST using notes from Chapter 6, and following the rebalance algorithm in the spec</li> <li>Possibly a heap implementation from Chapter 8 using lists and still using the rebalance algorithm in the spec</li> </ul> </li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/","title":"Week 12","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#hash-stuff","title":"Hash Stuff","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#keywords","title":"Keywords:","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#hash-table","title":"Hash Table","text":"<pre><code>- DS that stores unordered items into a location in an array\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#key","title":"Key","text":"<pre><code>- First item in key pair value, used to map to an index\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#bucket","title":"Bucket","text":"<pre><code>- Each element in the array is a bucket\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#collision","title":"Collision","text":"<pre><code>- Numbers can have same hash values, and end up being mapped to the same location. Can be resolved with chaining or open addressing\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#chaining","title":"Chaining","text":"<pre><code>- Items that map to the same bucket can be stored by using a structure in that bucket\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#open-addressing","title":"Open Addressing","text":"<pre><code>- Linear Probe \n- Quadratic Probe\n- Double Hash\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#resizing","title":"Resizing","text":"<pre><code>- Load Factor = items / buckets\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#clustering","title":"Clustering","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#hash-functions-computes-the-correct-location","title":"Hash Functions (computes the correct location)","text":"<pre><code>- Modulo Hash\n    - key % size_of_array\n- Mid-square hash\n- Mid-square with binary\n- Multiplicative string hash function\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#direct-hashing","title":"Direct Hashing","text":"<pre><code>- Always provides O(1) time complexity, but creates O(n+1) or O(n) space complexity because each key gets mapped to its direct index value. No collisions, but takes a TON of space\n</code></pre>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#applications","title":"Applications","text":"<p>Cryptography Data integrity (integrity can't be garanteed, but but corruption can be garanteed)</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#equality-hashability-identity","title":"Equality, Hashability, Identity","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#is-vs","title":"Is vs ==","text":"<p>is keyword checks if two variables point to the same object in memory \\=\\= operator checks for equality</p> <p>These two are not the same but in some instances give the same results. Literals like numbers and characters for instance are usually only allocated once in memory. Therefore, if we say 5 is 5, this is true because the pointer for 5 is at the same spot as the pointer for 5, because there is only one object for 5. When we say 5 == 5 this is true because the values are equal to eachother.</p> <p>By default, equality comparisons for objects refers to their identity which is a unique number (probably associated with memory idk). So that's why if we have two new objects even with the same attributes, they are not equal, because they are not the same object.</p> <p>However, by overriding the __eq__() dunder method, we can check for equality of members.</p> <p>Because is checks if pointers look at the same object in memory, then it should go without saying that if we do something like</p> <p>a = generic_object() b = generic_object() </p> <p>a is b yields false, and a == b yields false. Meanwhile</p> <p>a = generic_object() c = a</p> <p>when we use is and equality</p> <p>a is c a == c</p> <p>we'll get true either way, because the identifier will be the same, as well as the pointer, as well as the attributes because c and a are the same object. So it will always be equal.</p> <p>However, if we override eq for a class, to check for something like a name member, then equality comparisons might yield different results than is comparisons.</p> <p>for instance</p> <p>a = generic_object(\"1\") c = generic_object(\"1\")</p> <p>where \"1\" is stored to a member self.num and</p> <p>__eq__(self, other):     return self.num == other.num</p> <p>then</p> <p>a == c yields true while a is c yields false</p> <p>because a is c translates to </p> <p>id(a) == id(c) -&gt; False</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#hashability","title":"Hashability","text":"<p>Hashability and mutability are typically coupled together. The idea with hashability, is that we want an object to yield the same hash during the entirety of its lifetime. </p> <p>As you know, there are lots of ways to compute the hash for something. </p> <p>Integers are straight forward. If we want to store an int, we can something simple like int % table_size to get us an index in the array to put the value. This is straightforward, and there are several variants of this hash technique that can help with collision</p> <p>Strings can use a similar method to calculate a unique value from each character, and then get us the index</p> <p>Summing up all the ascii_values of a string like \"apple\" would give us a number like 97+112+112+108+101 which yields 530. We can then use 530 % table_size to find an index, and varaiations on this algorithm to reduce and handle collision</p> <p>However, python in particular uses identity to create a hash. Because of the fact that literals and immutable objects are typically only allocated once, doing something like</p> <p>a = \"apple\" b = \"apple\"</p> <p>is about the same as going</p> <p>a = \"apple\" b = a</p> <p>In both of these instances, a and b are both pointing to a string object that contains a string \"apple\" as well as a unique identifier and a position in memory. Python utilizes the identity of an object to figure out its hash. </p> <p>Here's an example of a problem though. Imagine we have a list called lyst</p> <p>lyst = ['h','e','y']</p> <p>now let's imagine that we use the python default of using the id to hash the key (idk let's imagine some bogus number like 1234)</p> <p>now let's say lyst = ['h','e','y','o']</p> <p>Well, the lyst object is the same still, so its id is the same, and so we run into a problem where hey and heyo are not the same, yet, by using this lyst, even though it's changed, it'll still access the same key. </p> <p>However, if we want to access by object not structure, lyst is the same object, but because the structure is changed, or mutated, now the object itself won't match any key in the dictionary.</p> <p>Now here's another problem</p> <p>lyst = ['h','e','y'] lyst2 = ['h','e','y']</p> <p>Even though they both have the same characters, the ids of these two objects are different, and so we'll end up having two different entries for a list that's structurally the same.</p> <p>In this insance, by using mutable objects, we run into the problem of not being able to rely on the object itself. So we have to rely on the structure of the list. </p> <p>The key takeaway here is that we have to be absoulely sure about what we're using for the key. If we want to access a dictionary based on a unique object that contains information, then that'll be different that wanting to access a dictionary based on the information that the object contains. </p> <p>Do we want to use the object itself as the key, or the information that the object contains? lyst1 vs \"hey\"</p> <p>Is != Equality</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#identity","title":"Identity","text":"<p>A is B is equivalent to id(A) == id(B)</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#takeaway","title":"Takeaway","text":"<p>Most ideas in programming are lies or guidelines to help people navigate the unknown. </p> <p>For instance, if we're driving on a windy cliffside, we all probably agree to NEVER drive off the side of the road. We even put guard rails up so that we can't do it. However, that's only true if your car doesn't have the ability to fly, which is usually the case.</p> <p>Likewise, people say to only use immutable objects for a dictionary key because it can't change, but saying that something CAN change does not mean it WILL change. At the end of the day, if you generate a key based on a value, and that value will never change, well then it's really no problem to use that mutable object as a key.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%2012/#dictionary-key-issues","title":"Dictionary Key Issues","text":"<p>We can use two main features of an object to determine the hash key</p> <p>An ID, or a Value.</p> <p>By default, some languages use the ID to determine the hash. Immutables like strings, numbers, and tuples have one object allocated every time that thing is referenced (there is only one instance of 5 or \"asdf\" at a time). </p> <p>Objects like lists will have a unique id every time we create a new one. So if we want to compare lists [1,2,3,4] and [1,2,3,4], it won't work because by default it checks ID. So we have to do a structural compare.</p> <p>If we're anticipating on using an object to access a list, and we're using structure instead of ID, you should not change its data, or else obviously it won't be able to be accessed.</p> <p>If you're using an ID instead of structure, you'll have to use the same list the entire time, but the problem with this is if we want to have different states for that list. Changing a list outside of a dictionary, will change the list in the dictionary.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%202/","title":"Week 2","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%202/#topics-to-hit","title":"Topics to hit","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%202/#082922","title":"08/29/22","text":"<ol> <li>Memes</li> <li>Questions</li> <li>Recursion     Three laws of Recursion<ol> <li>A recursive algorithm must have a base case. This is the way that we return without making another recursive call</li> <li>It has to change state and move toward the base case</li> <li>A recursive algorithm must call itself</li> </ol> </li> <li>Bounds, Complexity <ul> <li>Difference between Big O and Complexity</li> <li>Linear search</li> <li>Analyze time and space complexity</li> </ul> </li> <li>Show pytest / pylint</li> <li>Search functions for project 1</li> <li>Show compilation with compiler and VM?</li> </ol>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%202/#083122","title":"08/31/22","text":"<ol> <li>Memes</li> <li>Take this fish</li> <li>Binary Search vs Fibonacci Function</li> <li>Why tf is the time complexity of binary search logarithmic while fibonacci is exponential?</li> <li>This was a fish moment</li> <li>Logs and Exponents</li> <li>Jump Search</li> </ol>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/","title":"Week 3","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#sorting","title":"Sorting","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#selection-sort","title":"Selection Sort","text":"<p>Sorted and unsorted regions</p> <p>Looks for smallest element element in unsorted region</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#implementation","title":"Implementation","text":"<p>i is the current or first index in the unsorted region.  j is the selector index that searches for the smallest value in the unsorted region smallest_index marks which index contains the smallest value and is initialized with i. </p> <p>if element at j is less than the element at smallest_index, smallest index is then assigned to j</p> <p>We save the value at i to a variable called \"temporary\" insert the value at smallest_index into index i. We then save the value in the temporary variable to the smallest_index Thus doing a swap.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#analysis","title":"Analysis","text":"<p>Time Complexity: $(n-1) * \\frac{n}{2}$ and O(N<sup>2</sup>) (Always)</p> <p>Space Complexity: O(1)</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#insertion-sort","title":"Insertion Sort","text":"<p>Sorted and unsorted regions</p> <p>Moves to first element in unsorted region, and backtracks through each index swapping places until it's in the right spot.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#implementation_1","title":"Implementation","text":"<p>i marks the current index, which is the first element in the unsorted region. (starts at 1st not to be confused with 0th) j gets set to the current index so we can back track If the value at j-1 is greater than the value at j then - we save element at j to temp - Move element from j-1 to index j - Move value from temp to j-1 - Decrement j</p> <p>Repeat until j-1 is not less than element at j Continue outer loop</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#analysis_1","title":"Analysis","text":"<p>Time Complexity: $(n-1) * \\frac{n}{2}$ and O(N<sup>2</sup>)</p> <p>Space Complexity: O(1)</p> <p>Insertion sort has some benefits over selection sort. Insertion sort has a runtime of O(N) for sorted or nearly sorted inputs, as it will only have to do a comparison on each outer loop.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#topics-to-hit","title":"Topics to Hit","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%203/#090722","title":"09/07/22","text":"<ul> <li>Important Dates</li> <li>Memes</li> <li>Project 1 Q&amp;A / Review</li> <li>Sorting Algorithms<ul> <li>One Note Examples</li> <li>Youtube video</li> </ul> </li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%204/","title":"Week 4","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%204/#topics-to-hit","title":"Topics to hit","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%204/#091222","title":"09/12/22","text":"<p>pytest for loops difficulties with the project how can I help selection sort insertion sort</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%204/#091422","title":"09/14/22","text":"<p>Arrays are just dedicated start and end points in memory. So it doesn't matter necessarily matter if we virtually \"split\" the array, or \"split\" the array in memory, because at the end of the day, they're both just different levels of abstraction.</p> <p>Quick and Merge sorts both use a main function, with a helper function that does most of the heavy lifting.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%204/#quick-sort","title":"Quick Sort","text":"<p>A collection is sorted when all elements to the left of a selected item value is less than or equal to that item, and when all elements to the right are greater than or equal to that item.</p> <p>Splits the sort space with a pivot point and recursively sorts.  </p> <p>Pivot point can be any value in the list.</p> <p>Zybooks chooses the pivot to be the value at the midpoint of the array. Partions are left and right halves.</p> <p>We have to move all values smaller than the pivot point value into one partition, and all greater or equal values to the other partition.</p> <p>The trick is that the values in the low and high partition aren't sorted, it's just that they are less than or equal to or greater than or equal to the value that is selected as partition value</p> <p>Quicksort uses a helper function, called Partition. Partition gets all the elements less than the pivot point to the left, and all the elements greater than the pivot point on the right. This may include swapping the pivot value to some index other than middle, but that doesn't matter, because all that we care about is making sure values ltet are on the left, and values gtet are on the right.</p> <p>low and high, i and j move towards the middle swapping values if needed.</p> <p>Quicksort just calls Partition, where we move low values to the left partition, and high values to the right partition, and then recursively calls itself with low and high partitions until the partitions are only size 0 or 1.</p> <p>Time Complexity: $(n+1) * \\frac{n}{2}$ and O(N<sup>2</sup>)</p> <p>with N-1 levels for partitioning.</p> <p>Average case is O(N log N) (log base 2, but the base doesn't affect the behavior of the graph)</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%204/#merge-sort","title":"Merge Sort","text":"<p>Split down the middle recursively until you get lists of size 1</p> <p>Lists of size 1 are already sorted</p> <p>We use index i for low point of left side, j for high point of left side, j+1 for low point of right side, k for high point of right side</p> <p>We then compare least values from left and right lists, and add smallest value to new index in our master array. </p> <p>Time Complexity </p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%205/","title":"Week 5","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%205/#topics-to-hit","title":"Topics to hit","text":"<ul> <li>Review P2 instructions</li> <li>Algorithms are recipes<ul> <li>more than one way to do it</li> <li>experience will help you synthesize recipes on your own</li> </ul> </li> <li>John von Neumann created merge sort. Dude was a literal genius... mathemetician, physicist, engineer, computer scientist. Don't beat yourself up for not being able to perfectly come up with the idea on your own in your second year of CS</li> <li>Lots of implementations of sorts that all have pros and cons. There's rarely a \"best\" way to do anything</li> <li>Memory implementations</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%205/#how-to-hit-the-project","title":"How to hit the project","text":"<ul> <li>Set up all your defs first</li> <li>Get is_sorted written first</li> <li>knock out selection and insertion sort</li> <li>tackle quicksort and mergesort</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%205/#quicksort","title":"Quicksort","text":"<p>https://www.geeksforgeeks.org/quick-sort/</p> <p>all numbers less than or equal should be in left partition all numbers greater than or equal should be in right partition low index crawls towards end, high index crawls towards beginning as these indices moves, they will determine the ends and beginnings of the partitions which aren't always equal size left index will travel right until it hits a value that shouldn't be in the low partition, if the right index finds something that shouldn't be in the right\u00a0partition, they swap, otherwise, they meet in the middle which indicates that all the elements are in the correct partitions</p> <p>As we move elements into their correct partitions, eventually we get to a partition of size two. The elements will be swapped into low and high partitions, and split again. At this point, the partitions will be size 1 and we're done. However, at this point, because they were split into low and high, the elements are now properly in order. Recursively we move up towards the top where everything will end up sorted by nature of just moving partitions of size 2 into high and low. we're going until all partitions are size 1, so we just loop until that happens. right_partition_begin can also be called the low_index. It starts at the left and works its way to the right and eventually becomes the beginning of the right partition. The opposite happens for left_partition_end. It starts at the end, and works its way to the left and ultimately becomes the ending of the left partition.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%205/#mergesort","title":"Mergesort","text":"<p>https://www.geeksforgeeks.org/merge-sort/</p> <p>Creates a list and splits it in half. Both halves are both recursively split until we reach a list of size 1 or 0. We can handle this in a few ways, but zybooks does it where we keep track of which regions we're in, and reorder the regions so the order doesn't get messed up.</p> <p>Once the lists are ready to be merged, we walk one at a time in each list and insert the least item into the current index and then move forward.</p> <p>If we get to the end of a list, we just insert the rest of the elements from the remaining list into the temp.</p> <p>We then copy all of the items into the original in the region we're in.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%205/#092122","title":"09/21/22","text":"<p>Merge Sort and Quicksort work very similar</p> <p>Merge sort Recursively splits, and then sorts on the way back up</p> <p>Quicksort splits and partially sorts on the way down</p> <p>Both Algorithms essentially partition their lists</p> <p>Recursive quicksort can be faster than recursive mergesort with the use of tail recursion, which can allow the compiler to optimize and minimize stack depth.</p> <p>Iterative versions can be used for both</p> <p>Zybooks mergesort copies the list, and then inserts the sorted list into a region of the original list. We don't really care that it's overriding because as we recursively split, if we're keeping track of which zones we're splitting into with i,j,k, we'll never override information we need.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/","title":"Week 6","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#linked-list","title":"Linked List","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#092622","title":"09/26/22","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#classes","title":"Classes","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#magic-functions","title":"Magic Functions","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#singly-linked-list","title":"Singly Linked List","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#doubly-linked-list","title":"Doubly Linked List","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#traversal","title":"Traversal","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#searching","title":"Searching","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#sorting","title":"Sorting","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%206/#092822","title":"09/28/22","text":"<ul> <li>Magic Functions str, init, iter, next</li> <li>Append</li> <li>Remove</li> <li>Traversal (Iterative and Recursive)</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/","title":"Week 7","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#study-guide","title":"Study Guide","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#data-structures","title":"Data Structures","text":"<p>-What are ADTs and why do we use them? -Why do we care about abstraction</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#big-o","title":"Big O","text":"<p>11ish questions -best, average, worst case -constant time operations (one tricky question) -composite runtime + bigO</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#searches","title":"Searches","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#sorts","title":"Sorts","text":"<p>-Insertion Sort     swaps (how many, tricky question, how do we calculate the number of swaps -&gt; (n-1) * n/2 or the sum of all possible swaps for a given iteration)     outer loop (how many times)     runtime</p> <p>-Merge Sort     runtime</p> <p>-Quick Sort     runtime</p> <p>-Selection Sort     runtime     order</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#linked-list","title":"Linked List","text":"<p>-How to insert into a singly linked list -Reversal -What are nodes, and what do they do / contain -how to traverse</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#stacks","title":"Stacks","text":"<p>3 Questions on infix/postfix -Infix      Evaluation     Conversion to Postfix</p> <p>-Postfix     Evaluation     Conversion to Infix</p> <p>-Push     If you're adding to a stack, you're putting it on top</p> <p>-Pop     If you're taking something off the stack, you're taking it off the top</p> <p>-Peek     returns the top item without removing it</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#queues","title":"Queues","text":"<p>-Enqueue     If you're entering a queue, you're entering the back of the line</p> <p>-Dequeue     If you're leaving the queue, you're leaving from the front of the line</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#deques","title":"Deques","text":"<p>-A queue that can push and pop from both ends</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#dynamic-array","title":"Dynamic Array","text":"<p>-Allocation? -Append?</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%207/#sections-to-review","title":"Sections to review","text":"<p>1.4 ADT's 2.6 O Notation 2.7 Algorithm Analysis</p> <p>3.2, 3.4, 3.8, 3.10 Sorts</p> <p>3.14 Overview of fast sorting algorithms</p> <p>Chapter 4</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/","title":"Week 8","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#stacks","title":"Stacks","text":"<p>Everything is just a collection of numbers at the end of the day. It just depends on where it is, and the way we choose to evaluate it.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#ll-based-stack","title":"LL based stack","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#array-based-stack","title":"Array based stack","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#list-based-stack","title":"List based stack","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#shunting-yard","title":"Shunting Yard","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#inifix-to-postfix","title":"Inifix to Postfix","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420/Week%208/#postfix-to-infix","title":"Postfix to Infix","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/","title":"Mid Term Study Guide","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#data-structures","title":"Data Structures","text":"<p>-What are ADTs and why do we use them? -Why do we care about abstraction. What does it allow us to do?</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#big-o","title":"Big O","text":"<p>11ish questions -best, average, worst case -constant time operations (one tricky question) -composite runtime + bigO</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#searches","title":"Searches","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#sorts","title":"Sorts","text":"<p>-Insertion Sort     swaps (how many, tricky question, how do we calculate the number of swaps -&gt; (n-1) * n/2 or the sum of all possible swaps for a given iteration)     outer loop (how many times)     runtime</p> <p>-Merge Sort     runtime</p> <p>-Quick Sort     runtime</p> <p>-Selection Sort     runtime     order</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#linked-list","title":"Linked List","text":"<p>-How to insert into a singly linked list -Reversal -What are nodes, and what do they do / contain -how to traverse iteratively and recursively</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#stacks","title":"Stacks","text":"<p>3 Questions on infix/postfix -Infix      Evaluation     Conversion to Postfix</p> <p>-Postfix     Evaluation     Conversion to Infix</p> <p>-Push     If you're adding to a stack, you're putting it on top</p> <p>-Pop     If you're taking something off the stack, you're taking it off the top</p> <p>-Peek     returns the top item without removing it</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#queues","title":"Queues","text":"<p>-Enqueue     If you're entering a queue, you're entering the back of the line</p> <p>-Dequeue     If you're leaving the queue, you're leaving from the front of the line</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#deques","title":"Deques","text":"<p>-A queue that can push and pop from both ends</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#dynamic-array","title":"Dynamic Array","text":"<p>-Allocation? -Append?</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Mid%20Term%20Study%20Guide/#overall-sections-to-review","title":"Overall Sections to review","text":"<p>1.4 ADT's 2.6 O Notation 2.7 Algorithm Analysis</p> <p>3.2, 3.4, 3.8, 3.10 Sorts</p> <p>3.14 Overview of fast sorting algorithms</p> <p>Chapter 4</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Search%20Help/","title":"Search Help","text":"<p>Firstly, here's a geeksforgeeks article on the jump search</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Search%20Help/#jump-search","title":"Jump Search","text":"<p>Jump search works a lot like linear search. Where linear search walks through an array one item at a time, jump search walks through an array one block at a time. There are several ways you can handle back tracking, but here's the general approach to the jump search.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Search%20Help/#algorithm","title":"Algorithm","text":"<p><code>Set your jump size equal to some number, ideally int(sqrt(len(lyst)))</code> <code>Iterate through your list by intervals of jump size</code> <code>If the current index is equal to the target, return True or whatever</code> <code>If the current index is greater than your target, you'll need to backtrack</code></p> <p><code>To backtrack, set a start point equal to the index of your previous iteration, and an end point equal to the current index.</code> <code>Linear search from start point to end point</code></p> <p>Jump Size = int(sqrt(len(lyst))) = 3</p> <p>Target = 8</p> Index 0 1 2 3 4 5 6 7 8 9 Value 1 2 3 4 5 6 7 8 9 10 Jump 1st 2nd 3rd Target 4th Iteration prev current <p>If we use a for loop <code>for i in range (0, len(lyst), jump_size)</code></p> <p>We'll start at index 0, jump ahead to index 3, jump ahead to 6, and jump ahead to 9</p> <p>If our target is 8, by the time we're on our 4th jump, we can see that the value at our index is greater than our target i.e. (lyst[i] &gt; target)</p> <p>So, we know that we'll want to search between our previous jump index, and our current jump index. That's where we can linear search (or whatever search really)</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Search%20Help/#edge-cases","title":"Edge Cases","text":"<p>We have problems to look out for. Making sure we don't go out of bounds when jumping, and keeping track of the previous jump point.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Search%20Help/#out-of-bounds","title":"Out of Bounds","text":"<p>How we check OoB may vary if you're doing a while loop or for loop. To check for OoB with a for loop approach, the check should be done towards the end of the iteration after we've already decided that our current index value isn't greater than our target. </p> <p>If we know that the next jump will put us out of bounds, we know we're close to the end of the list. So, we can go ahead and linear search here. We'll likely need to do it this way since the step size is only evaluated once at the beginning of a for loop statement (we'll see why exactly when we implement our linked lists), so we can't change the step size of our for loop.</p> <p>If we do it with a while loop, we can go ahead and modify the step size to be equal to the remaining space, jump to the very last index of the array, and perform a check. Is our index value equal to the target? Is our index value greater than the target? etc.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Search%20Help/#previous-interval","title":"Previous Interval","text":"<p>In a for loop implementation, I simply keep track of the previous index by setting previous equal to the current index at the very end of the loop</p> <p>prev = 0</p> <p>for i in ...: - check stuff - do stuff - prev = i</p> <p>This way, in the second iteration, i = 3, prev = 0. </p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/","title":"Week 1   Intro and Searching","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#logistics","title":"Logistics","text":"<ul> <li>Having issues with zybooks. Don't worry, we'll still be able to function</li> <li>Get pytest installed, I think we're gonna do the pytest way.</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#project-1-overview","title":"Project 1 overview","text":"<p>Project 1 is just a simple introduction to implementing, testing, and submitting your projects. You'll do some way easy stuff, get some free points, and submit it. Seriously, it's 4 arithmetic functions and you get 100 points.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#project-2-overview","title":"Project 2 overview","text":"<p>Project 2 is the real start. We have 8 projects, but really it's 7. Every week, we'll start by going over the project requirements, loading up the idea in our minds, and then hitting the material with the project in mind.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#notes-for-module-1","title":"Notes for Module 1","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#intro-to-algorithms","title":"Intro to algorithms","text":"<p>Algorithms describe steps to solve some problem. Baking a cake, directions to CS401, or sorting lists can all use algorithms. Algorithms can be expressed in natural language, pseudocode, formal languages, whatever.</p> <p>Computational problems are problems that can be solved with computers given some input. We use algorithms to help solve these. Some algorithms are more efficient than others, as in they take less time or space to solve a problem, or they might be inefficient but easy to implement. There are lots of different ways to solve problems, some are better than others, but most of the time they have different pros and cons.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#np-complete-problem-nondeterministic-polynomial-time","title":"NP - Complete problem (Nondeterministic Polynomial time)","text":"<ol> <li>No efficient #algorithm has been found to solve it</li> <li>No one has proven that an efficient algorithm is impossible to find</li> <li>If it exists for one problem, then all NP-complete problems can be solved efficiently</li> </ol> <p>If it's NP-Complete, don't focus on the perfect solution, just a good inefficient one.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#how-data-structures-and-algorithms-relate-to-eachother","title":"How Data Structures and Algorithms relate to eachother","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#algorithms-for-data-structures","title":"Algorithms for data structures","text":"<p>Data structures are a way to organize, store, and perform operations on data.</p> <p>Data structures require specific operation to be performed on their data. This means that there are algorithms specific to different data structures. </p> <p>For example, inserting an item into a linked list for example requires a very different algorithm than inserting into an array.  </p> <p>Array insertion generally requires some variation of the following 1. Create new array[size + 1] 2. Copy items from old array to new array 3. Shift all items in the array forward from the position to be inserted 4. Insert item into now empty position</p> <p>Linked list insertion generally requires some variation of the following</p> <ol> <li>Nodes contain pointers to next node</li> <li>Create new object to be inserted</li> <li>Get \"next\" pointer of left node and assign to new object's \"next\" pointer</li> <li>Set next pointer of left node to new object to be inserted. </li> <li>Objects are now linked </li> </ol>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#data-structures-for-algorithms","title":"Data structures for algorithms","text":"<p>Book mentions an algorithm that determines top employees, might use an array to store employee data.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#abstract-data-types-adt","title":"Abstract Data Types (ADT)","text":"<p>Abstraction is a really common theme that you'll see throughout your courses. It's one of the main ways that we grapple with difficult concepts and engage with \"reality\" as humans. In the context of ADTs, I like to think of abstraction as the degree of scope or resolution that we view a certain problem with.</p> <p>ADTs focus more on the what rather than the how.</p> <p>Stacks, Heaps, Lists etc are examples of ADTs. When we talk about using a stack, an idea comes to mind of how data will be stored and handled without worrying about the concrete implementation. Stacks are FILO and so we understand that data coming in will be pushed to the bottom of a stack, and new data will pile on top of it. In order to reach information at the bottom, we have to remove stuff on top to get there.</p> <p>What we're not thinking about is the actual programmatic implementation of how a particular stack might work. A stack can be implemented with lots of different data types.</p> <p>https://cplusplus.com/reference/stack/stack/</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#efficiency","title":"Efficiency","text":"<p>Computational Complexity can consist of time T(N) and space S(N) complexity (how fast it goes, and how much space it takes up) where N is the input. </p> <p>Algorithms are typically measured by their best, average, and worst case scenarios. Best is minimum operations, worst is max.</p> <p>Space complexity include input data and additional memory allocation. Auxillary space complexity is just the additional memory allocation.</p> <p>N represents input k represents some constant number</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#about-me","title":"About me","text":"<ul> <li>I'm 30</li> <li>Background, WV, SP-BR, BYU-I, UVU, etc.</li> <li>I play guitar, enjoyer of death metal. Fallujah, rivers of nihil, ulcerate, aegaeon, cynic, death</li> <li>I love sushi, but really any dishes with rice I usually go crazy for</li> <li>Slight anime nerd. Eva, HxH, Trigun, .hack, Akira, Ghost in the Shell, CSM, JJK, etc</li> <li>R6 Siege, Elden Ring</li> <li>Reading, movies, hobby collection</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#class-structure","title":"Class Structure","text":"<ul> <li>Each week, on the first day, we'll go over the project spec together, and start to think about the problems we'll need to solve. We might look at the test cases, potential pain points, function names, etc.</li> <li>After reviewing the projects, we'll move on to the course material with the project details in mind. </li> <li>Each day, we'll have a 10-15 minute break in the middle to stretch our legs, get a drink, catch our breath.</li> <li>If we have enough time, we'll do an in-class activity going over classic data structure / algorithm interview questions</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#warnings","title":"Warnings","text":"<ul> <li>I do not make the coursework. I am an adjunct, not a mentor. Let me repeat that, I don't make the coursework, or any of the material. I'm here to deliver it to you, help you understand it, and guide you through the work. Someone had the audacity to complain about the fact that I didn't create my own material when I explained that day 1 a few semesters ago. I'm also not in control of zybooks. If there are issues, it's an administrative issue that comes from zybooks or the department. All I can do to fix things is send emails and hope people respond quickly. So let it be written, that I don't make the material.</li> <li>I can't be your debugger. I can offer support in the way of tips and tricks to have a better debugging experience. I can guide you in terms of understanding different algorithms, and data structures, and generally what to do. I can sympathize with you when you say that finding your bug took a long time. What I can't do is sit down with your code and step through it and identify what's wrong for you. </li> <li>Summer semester is FAST. I'm gonna try and ease the pain as much as I can. We might have to cram some things in here and there, but generally, I understand it's a lot to learn in a small amount of time. You all probably have other stuff going on too, so I get it. Let me know if you're struggling, and we can hash it out. </li> <li>If attendance gets too low, I will enforce an attendance policy. I hate basing grades off attendance, but the overall class experience diminishes greatly if people aren't coming to class. Class is better with you there. </li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%201%20-%20Intro%20and%20Searching/#success","title":"Success","text":"<ul> <li>Get your sleep. Seriously, this is probably the most important thing. Staying awake burning the midnight oil might feel like what you're supposed to do, and with how fast things go, you might have to stay up a bit. But seriously, get your 8 hours, make sure you're rested. Take mental breaks. Come back to it if it's not clicking. If it comes down to you not sleeping so that you can get your project in on time, let me know, get your rest, and I'll flex the date by a day.</li> <li>Read. The CS major is really a reading and writing major. Yes, we're hitting algorithms and data structures, and we're sometimes doing math adjacent things, but more than anything, what you're doing is communication.</li> <li>Get used to drawing/writing. Honestly, the easiest way to grasp material in this class is often to draw things out and walk through problem steps on paper, whiteboard, onenote, whatever.</li> <li>Group up. We don't tolerate plagiarism. But we do love it when students get together, explain topics to eachother, suggest strategies for approaching a problem, help eachother succeed, and make friends. </li> <li>Have fun. Realize that although this course will be fast, this is a real meat and potatoes course. This is one of the true CS classes that you'll take, with topics that'll be useful to you whether you're building a compiler, implementing a social media website, or making a video game. Look ahead to the future, and get pumped for the cool stuff you'll learn!</li> <li>Get ahead of the work. Don't lose the basically free points that come from the reading. Get those in on time. Even if you need to skim ahead, get your PA points. It's the freest way to get points, which will potentially give you more wiggle room on the exams and projects. They can be the deciding factor between matriculation or not.</li> <li>Engage during class-time. I know it's tough sometimes to speak up, and sometimes there might be someone who appears to know a lot, so you don't want to embarrass yourself. It's really fine though, we're all in different places, and chances are, a lot of other people are wondering the same thing you are, and big chances are, someone may not even realize they have a question (very dangerous). So pipe up, ask questions, and be engaged. We'll have a lot better of a time if everyone has fun and talks during class!</li> </ul>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/","title":"Week 2   Sorting","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#selection-sort","title":"Selection Sort","text":"<p>This is one of the \"easy\" ones. Selection sort works by having two trackers that walk through the array. The left side of the array is sorted, while the right is considered unsorted. The first tracker keeps track of the bounds of the sorted and unsorted space by pointing to the first item in unsorted space. The second tracker looks for the smallest item it can find in the unsorted region. Because the left side of the array is sorted, we know we're comparing the last item in the left/sorted side, against whatever smallest number the second tracker can find. As our second tracker encounters smaller numbers, it tags the smallest one by assigning it to a variable \"smallest.\"</p> <p>Once we find the smallest item in the right side, we simply swap its place with the first item in the unsorted space, and move our bounds forward. This is easily implemented with double loops with variables i and j for trackers.</p> <p>The intuition for this sort is the left side increments one at a time, while the right side is scanned multiple times. This will be juxtaposed with insertion sort.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#insertion-sort","title":"Insertion Sort","text":"<p>This one is also easy. Conceptually, it works similarly to selection sort. The left side is \"sorted,\" while the right side is not. However, the area that we repeatedly work on is different.</p> <p>With insertion sort, we once again have trackers, most easily implemented with i and j variables in a double loop scenario (never be afraid to use more robust naming conventions though). Unlike selection sort, we start our i and j at index 1 rather than zero, and automatically count the left side \"sorted.\" We're effectively partitioning the regions again, and obviously, an array with only one element is sorted in relation to itself. </p> <p>Where insertion differs from selection is that the tracker variable, j, doesn't walk through finding the smallest item, rather, it starts at the boundary, and walks through the sorted region trying to put the current number in the right spot.</p> <p>This is accomplished by checking the current item marked by j, and the item to its left at j-1, seeing if j is smaller, and if so, swapping the two items. J is then decremented, and the same check is performed again, gradually pushing the \"current\" item down the sorted region until it's in the right spot. Finally, once the item is in place (j is greater than or equal to the item to its left), we increment i, and reset j to be equal to i. </p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#comparisons","title":"Comparisons","text":"<p>These two sorts are fairly similar. Both of them have O(n<sup>2</sup>) time complexity. For selection and insertion sort, we have a time complexity T(n) = (n-1) * n/2. This gives us (n<sup>2</sup>-n)/2. Remember back to the section on O notation however. O notation just describes the overall time complexity, which roughly translates to pick the highest order term, as the largest term grows fastest and affects the shape of the graph the most. </p> <p>Now, here's where things get interesting. We talked about how generally in algorithmic analysis we want to analyze the worst case scenario. We want to see, given the worst set of conditions, how long will this thing take to complete. If both algorithms perform about the same, how do we choose one over the other? As the text mentions in 3.4, insertion sort has a runtime of O(n) for nearly sorted lists. This is where insertion sort might be a better option to implement over </p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#quick-sort","title":"Quick Sort","text":"<p>Quick Sort works by creating partitions and depositing smaller numbers to a left partition, and larger numbers to a right partition. After partitioning, the left and right partitions are then recursively quick sorted, which obviously involves partitioning and so on.</p> <p>I remember that this one is different from Merge sort in that Quick sort is Quick, or Eager, and can be said to sort on the way down the recursive tree. Merge sort sorts on the way back up.</p> <p>The pivot point that's selected doesn't have anything to do with the index, just the value at the index. We're using some value in the array to determine the numerical dividing point so numbers can be organized into the left and right partition. So the partition point can be any index really, we usually just select the middle for convenience.</p> <p>The example given in zybooks in 3.8 is an example of how to do quick sort in place. You can either swap the values in place (providing a low index and a high index and operating on the same list structure throughout), or you can create sublists, and then concatenate them on the way back up.</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#quick-sort-algorithm","title":"Quick Sort Algorithm","text":"<p>BaseCase: 0 or 1 items in partition Advance: Call Partition Algorithm to get partitions Recurse: Call Quicksort for Left partition, then call Quicksort for Right partition</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#partition-algorithm","title":"Partition Algorithm","text":"<p>Select a pivot point (pivot number).  Move lowindex and highindex toward eachother.  Check if the value pointed to by either is on the correct side.</p> <p>Complexity</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%202%20-%20Sorting/#links","title":"Links","text":"<p>15 Sorting Algorithms in 6 Minutes</p> <p>Bogosrt</p> <p>Timsort</p> <p>Powersort</p> <p>BigOCheatSheet</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%203%20-%20Linked%20Lists/","title":"Week 3   Linked Lists","text":""},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%203%20-%20Linked%20Lists/#objectives","title":"Objectives","text":"<p>Cover List ADT Iterator Pattern Magic Methods Class Organization Interfaces</p>"},{"location":"Academic/Algorithms%20and%20Data%20Structures/CS-2420%28Summer%29/Week%203%20-%20Linked%20Lists/#links","title":"Links","text":"<p>C++ Iterator</p> <p>C# Interfaces</p> <p>Iterator Pattern</p> <p>Visitor Pattern</p> <p>Null Objects</p>"},{"location":"Academic/C%2B%2B/Compiler%20Toolchain/","title":"Compiler Toolchain","text":""},{"location":"Academic/C%2B%2B/Compiler%20Toolchain/#windows","title":"Windows","text":"<p>This is less of a guide, and more of a collection of links for getting a toolchain set up for developing C++ projects on windows, without installing Visual Studio (not to be confused with VS Code)</p> <p>I run MSYS2 which provides a POSIX compliant Unix-like environment for developing C++ applications and much more on windows.</p>"},{"location":"Academic/C%2B%2B/Compiler%20Toolchain/#setting-up-msys2-in-the-terminal-application-on-windows","title":"Setting up MSYS2 in the Terminal application on Windows","text":"<p>https://www.msys2.org/docs/terminals/</p>"},{"location":"Academic/C%2B%2B/Compiler%20Toolchain/#setting-up-vs-code-for-c-with-msys2","title":"Setting up VS Code for C++ with MSYS2","text":"<p>https://code.visualstudio.com/docs/cpp/config-mingw</p>"},{"location":"Academic/C%2B%2B/Compiler%20Toolchain/#setting-up-bash-in-your-terminal-in-vs-code","title":"Setting up bash in your terminal in VS Code","text":"<p>General terminal profile setup: https://www.msys2.org/docs/ides-editors/</p> <p>Set up terminal profile in vscode: https://stackoverflow.com/questions/45836650/how-do-i-integrate-msys2-shell-into-visual-studio-code-on-window</p> <p>General Profile Configuration: https://code.visualstudio.com/docs/terminal/profiles</p> <p>Launchers (including vscode): https://www.msys2.org/wiki/Launchers/</p>"},{"location":"Academic/C%2B%2B/CS-2370/Exam%201%20Study%20Guide/","title":"Exam 1 Study Guide","text":"<p>Scientific Notation Range of decimal numbers and modulo operation Cin deliminates on what characters? How does cin work?</p> <p>A couple of questions about basic syntax like bools, conditionals, ints and overflow etc.</p> <p>One bullcrap question that didn't make a clear distinction. I changed it but I think it's important to note.</p> <p>A TRICKY switch statement question. What pieces do a switch statement need? \\ Ternary operators Short circuit evaluation</p> <p>Rational approaches to writing software</p> <p>A bunch of questions just evaluating what a loop will do, what cin will do, weird assignments for vectors and arrays.</p> <p>C strings. There's a question that's a trick question if you don't remember that strings technically end in a terminal character (doesn't show up on your screen, but it's there for the computer).</p> <p>Arrays are always passed by pointer</p> <p>Recursive functions. Think about where they \"pause\" and come back. Think about rules for recursion: Base case, advance, calls itself.</p> <p>Bit shifts and masks</p> <p>Keep an eye out for the static keyword on the last question</p>"},{"location":"Academic/C%2B%2B/CS-2370/Exam%202%20Study%20Guide/","title":"Exam 2 Study Guide","text":""},{"location":"Academic/C%2B%2B/CS-2370/Exam%202%20Study%20Guide/#high-level-topics","title":"High Level Topics","text":"<ul> <li>What is abstraction?</li> <li>Static data</li> <li>Array initialization</li> <li>Public vs Private</li> <li>Encapsulation</li> <li>Namespaces</li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Exam%202%20Study%20Guide/#classes","title":"Classes","text":"<ul> <li>Member access (for stack allocated and heap allocated objects)</li> <li>Inline functions</li> <li> <p>Constructors</p> <ul> <li>What do they return?</li> <li>What is their purpose?</li> <li>What kinds of constructors are there?</li> </ul> </li> <li> <p>List init syntax</p> </li> <li>Memberwise overloading vs global overloading. Know the difference in syntax, and purpose.</li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Exam%202%20Study%20Guide/#exceptions","title":"Exceptions","text":"<ul> <li>How do we use exceptions in our projects?</li> <li>What are the 3 main keywords of exception handling?</li> <li></li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Exam%202%20Study%20Guide/#streams","title":"Streams","text":"<ul> <li>How do they consume input?</li> <li>How does piping a stream to a variable work in mixed input scenarios (chars vs ints)</li> <li>What happens to whitespace?</li> <li>setfill()</li> <li>eof()</li> <li>String streams (they work the same way as standard io streams, they just work on strings rather than io)</li> <li>Passing arguments to an exectuable via cli. ./a.out param1 param2 etc</li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Exam%202%20Study%20Guide/#pointers","title":"Pointers","text":"<ul> <li>What is it?</li> <li>How do we create objects with pointers?</li> <li>How do we access data with pointers?</li> <li>How do we make assignments to pointers?</li> <li>Char pointers and int pointers can be used for arrays</li> <li>Pointer arithmetic</li> <li>How do we get the object pointed to by the pointer?</li> <li>delete vs delete[]</li> <li>How do we avoid memory leak?</li> <li>Copy constructors (Microsoft learn and cplusplus.com have good resources on this)</li> <li>Default constructors (what can't default constructors and destructors do?)</li> <li></li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/","title":"Final Exam Study Guide","text":""},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#general-behavior","title":"General Behavior","text":"<p>Switch Cases</p> <p>Integer Division</p> <p>Pass by value  Pass by reference  Pass by const reference</p> <p>What are arrays?  How are arrays treated when passed in functions</p> <p>Forward declaration</p> <p>Default parameters</p> <p>What are header guards for?</p> <p>We talked about stack frames (activation record). What goes in them, and what isn't in them?</p> <p>Initializer list syntax for constructors</p> <p>Exceptions and exception handling</p> <p>String formatting (setw and setfill)</p> <p>Inheritance. C++ has multiple inheritance.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#privacy","title":"Privacy","text":"<ul> <li> <p>Public: Anyone can access</p> </li> <li> <p>Private: Can only be accessed within the class itself</p> </li> <li> <p>Protected: Can be accessed by anyone that inherits from the class, but is private otherwise.</p> </li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#classes","title":"Classes","text":"<p>Polymorphism. The ability of an object to behave differently depending on its type. With inheritance and interfaces, an object can act differently. </p> <p>What is encapsulation? </p> <p>IS-A vs HAS-A. This refers to inheritance/type vs composition/data members. </p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#abstract-classes","title":"Abstract Classes","text":""},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#-virtual-keyword","title":"- virtual keyword","text":""},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#-override-keyword","title":"- override keyword","text":"<ul> <li> <p>pure virtual: virtual return_type identifier() = 0; //whatever class has a pure virt method will be a pure virt class and can't be instantiated</p> </li> <li> <p>if you have a pure virtual abstract base class, you've gotta use override to implement the abstract method in your concrete subclass.</p> </li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#uml","title":"UML","text":"<p>There are a few questions that use UML. Be familiar with the arrow types, and be familiar with the bold/italic/</p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#templates","title":"Templates","text":"<p>See cppreference on differences between instantiation between function template and class template.</p> <p>How does instantiation for templates work? </p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#iterators","title":"Iterators","text":"<p>Find() function. Know how it works.</p> <p>Relationship between iterators and pointers</p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#anonymouslambda-functions","title":"Anonymous/Lambda functions","text":"<p>Be familiar with the syntax</p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#predicate-functions","title":"Predicate functions","text":"<p>They're just boolean functions, and are usually passed directly to other functions as a parameter, like the find() functions</p>"},{"location":"Academic/C%2B%2B/CS-2370/Final%20Exam%20Study%20Guide/#data-structures","title":"Data structures","text":"<p>push_back() and pop_back() methods for vector. Be familiar with their return type, param type, and what they do.</p> <p>pair class and its methods</p> <p>map class (c++ dictionary) and its methods</p> <p>set class and its methods</p>"},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/","title":"Inheritance","text":"<p>Single Inheritance</p> <p>Multiple Inheritance</p> <p>Shadowing and Hiding</p>"},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/#overload-vs-override","title":"Overload vs Override","text":"<p>This is a tough one to remember for newer programmers because they sound so similar</p> <p>They both have to do with polymorphism, but the scope of their effects are different.</p> <p>Overriding has to do with when you have a baseclass/subclass scenario, and you want to use the same function in your subclass as your baseclass i.e. same return type, function name, and parameters. You have a function in your baseclass, and you want to override it, and use the function from your subclass instead. It looks like the exact same function, but they differ between the classes you're implementing.</p> <p>Overloading, has to do with functions that have the same function name, but different functionality within the same class, ie they have different parameters and return types, but the NAME of the function remains the same within the same class for all the functions, so you have a function that has an excessive amount of functions with the same name, ie, it's overloaded.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/#virtual-and-override","title":"Virtual and Override","text":"<p>We use the virtual keyword when we want runtime polymorphism of a function. In other words, the function to be called is determined during runtime, rather than compile time.</p> <p>Use override for clarity, but it's not explicitly required afaik.</p> <p>Virtual functions be made pure virtual by doing your declaration, and assigning it to 0; </p> Base Class virtual declaration ( = 0) Sub Class ... declaration override"},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/#abstract","title":"Abstract","text":"<p>C++ is weird, we don't have an abstract keyword. If a class has any pure virtual functions, it becomes an abstract class and can't be instantiated. (Relic of the past, more modern languages have better syntax around this).</p>"},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/#interfaces","title":"Interfaces","text":"<p>https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/interfaces</p> <p>https://en.cppreference.com/w/cpp/iterator/iterator</p> <p>https://wiki.python.org/moin/Iterator</p>"},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/#typing","title":"Typing","text":""},{"location":"Academic/C%2B%2B/CS-2370/Inheritance/#composition-over-inheritance-is-a-vs-has-a","title":"Composition over Inheritance (Is-a vs Has-a)","text":""},{"location":"Academic/C%2B%2B/CS-2370/Introduction/","title":"Introduction","text":""},{"location":"Academic/C%2B%2B/CS-2370/Introduction/#introduction-to-c-programming","title":"Introduction to C++ Programming","text":"<p>C++ is generally considered to be hard.</p> <p>Reasons why it's hard (it's not pointers) - C++ is hard because it has lots of semantics - C++ is hard because it often has complex compiler errors and linker errors - C++ is hard because it has fine-grain control and is very expressive - C++ is hard because it let's you do a lot, including blasting your own leg off (foot guns) - C++ is hard because it is designed to be backwards compatible. Many people teach C++ as C with new features. </p> <p>NOTE: Semantics are crucial, but often debated. When we use certain words, we assign certain meaning to those words, and people spend a lot of time debating on whether or not the exact words and what they mean are correct. Don't worry too much about getting lost in the weeds of semantics, just be willing to change and adapt your understanding to match better, more informed definitions.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Introduction/#about-me","title":"About me","text":"<ul> <li>I'm 30</li> <li>Background, WV, SP-BR, BYU-I, UVU, etc.</li> <li>I play guitar, enjoyer of death metal. Fallujah, rivers of nihil, ulcerate, aegaeon, cynic, death</li> <li>I love sushi, but really any dishes with rice I usually go crazy for</li> <li>Slight anime nerd. Eva, HxH, Trigun, .hack, Akira, Ghost in the Shell, CSM, JJK, etc</li> <li>R6 Siege, Elden Ring</li> <li>Reading, movies, hobby collection</li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Introduction/#class-structure","title":"Class Structure","text":"<ul> <li>We'll have a class-topics thread in discord. This is where you all will post questions that you have or material you especially want to talk about in class.</li> <li>I don't really go over slides. We'll talk about relevant class material, and any side topics that you all want covered. </li> <li>Since this course has biweekly modules, we'll generally talk about relevant material for the first week, and then cover projects and labs in the second week.</li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Introduction/#warnings","title":"Warnings","text":"<ul> <li>I do not make the coursework. I am an adjunct, not a mentor. Let me repeat that, I don't make the coursework, or any of the material. I'm here to deliver it to you, help you understand it, and guide you through the work. Someone had the audacity to complain about the fact that I didn't create my own material when I explained that day 1 a few semesters ago. I'm also not in control of zybooks. If there are issues, it's an administrative issue that comes from zybooks or the department. All I can do to fix things is send emails and hope people respond quickly. So let it be written, that I don't make the material.</li> <li>If attendance gets too low, I will enforce an attendance policy. I hate basing grades off attendance, but the overall class experience diminishes greatly if people aren't coming to class. Class is better with you there. </li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Introduction/#success","title":"Success","text":"<ul> <li>Get your sleep. Seriously, this is probably the most important thing. Staying awake burning the midnight oil might feel like what you're supposed to do, and with how fast things go, you might have to stay up a bit. But seriously, get your 8 hours, make sure you're rested. Take mental breaks. Come back to it if it's not clicking. If it comes down to you not sleeping so that you can get your project in on time, let me know, get your rest, and I'll flex the date by a day.</li> <li>Read. The CS major is really a reading and writing major. While we generally write lots of programs in this major, more than anything, what you're doing is communication. This means, read the documentation, ACTUALLY read your errors that you get in the terminal, etc.</li> <li>Get used to drawing/writing. Honestly, the easiest way to grasp material in this class is often to draw things out and walk through problem steps on paper, whiteboard, onenote, whatever.</li> <li>Group up. We don't tolerate plagiarism. But we do love it when students get together, explain topics to each other, suggest strategies for approaching a problem, help each other succeed, and make friends. </li> <li>Have fun. Realize that although this course will be challenging, this is a real meat and potatoes course. This is one of the true CS classes that you'll take, with topics that'll be useful to you whether you're building compilers, working with assemblers, or writing DSL's. Look ahead to the future, and get pumped for the cool stuff you'll learn!</li> <li>Get ahead of the work. Don't lose the basically free points that come from the reading. Get those in on time. Even if you need to skim ahead, get your PA points. It's the freest way to get points, which will potentially give you more wiggle room on the exams and projects. They can be the deciding factor between matriculation or not.</li> <li>Engage during class-time. I know it's tough sometimes to speak up, and sometimes there might be someone who appears to know a lot, so you don't want to embarrass yourself. It's really fine though, we're all in different places, and chances are, a lot of other people are wondering the same thing you are, and big chances are, someone may not even realize they have a question (very dangerous). So pipe up, ask questions, and be engaged. We'll have a lot better of a time if everyone has fun and talks during class!</li> </ul>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/","title":"Multithreading","text":""},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#links","title":"Links","text":"<p>https://cplusplus.com/reference/multithreading/</p> <p>https://www.geeksforgeeks.org/multithreading-in-cpp/</p>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#thread","title":"Thread","text":"<p>Threads are you start a process. This is the easiest part of multithreading. All you do is create a new thread from the \\&lt;thread&gt; library and you're set.</p> <pre><code>#include &lt;thread&gt;\n\n...\n\nsome_function(param1, param2, ...){...}\n\nstd::thread th1(some_function, param1, param2, ...)\n\nth1.join;\n</code></pre> <p>There's a common theme in c++ where if you start something, you need to end it. When we create a thread, we end it by calling join. Join sits somewhere toward the end of our code and kind of catches our thread and rejoins it to the main process. Think of threading as a branching of execution, and joining is pulling the thread back together.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#mutex","title":"Mutex","text":"<p>This is the important part. This is the resource that's actually responsible for managing a shared resource.</p> <p>Some resources, like IO are shared. What this means is the OS manages it, and anyone who wants to write (console, text file, whatever) needs to ask for permission. If IO is computer speech, then in computer land, we use a talking stick and can only speak when it's our turn. If we don't manage the talking stick (IO), then effectively, we have a bunch of people yanking on the stick, being rude, and next thing you know we have societal collapse on our hands.</p> <p>So a Mutex is a lockable object that basically wraps a section of code. It says, \"Hey, I am about to speak, this section is critical, do not interrupt me.\" It gets exclusive access to resources when locked. It's basically all the same talking stick rules, now being enforced with a body guard. Whoever holds the stick is protected, and anyone that tries to grab the stick will get punched in the face.</p> <p>Generally the mutex needs to be accessible globally or statically.</p> <pre><code>\n#include &lt;mutex&gt;\n\nstd::mutex mtx1;\n\n</code></pre>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#locks","title":"Locks","text":"<p>A mutex has methods lock, and unlock. There are also objects that provide advanced locking functionality.</p> <p>The Locks are the bodyguard's tools. They ensure that the body guard can do its job safely. </p> <pre><code>\nstd::mutex mtx;\n\n//critical section\nmtx.lock();\nfor(int i : some_collection){\n    std::cout &lt;&lt; i &lt;&lt; endl;\n}\nmtx.unlock;\n\n</code></pre> <p>In c++, it's a common trend that if you make something, you need to destroy it when you're done. When you open something, you've gotta close it. Same deal with locks. If you lock it, you gotta unlock it.</p> <p>Similarly, we have smart pointers that gives us unique_ptr, we have unique_lock. It handles the locking and unlocking for us.</p> <pre><code>std::mutex mtx;\n\nvoid print_block (int n, char c) {\n  // critical section (exclusive access to std::cout signaled by lifetime of lck):\n  std::unique_lock&lt;std::mutex&gt; lck (mtx);\n  for (int i=0; i&lt;n; ++i) { std::cout &lt;&lt; c; }\n  std::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>Here we have a unique_lock of template type mutex. It's called lck, and it takes an existing mutex as its constructor argument. It will now manage that mutex. It's like the boss of the bodyguard. Now we don't have to worry about locking and unlocking. </p>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#condition-variable","title":"Condition Variable","text":"<p>A condition variable is an object that receives a lock object like a unique_lock, and blocks access, or stops it from executing. It's the big boss. This thing basically says, hey, I have a signal to wait, and I have a signal to notify you to go. Generally, when we spin up a bunch of threads, they start ripping as soon as they're active. So, we can make those threads wait until we're ready to start. Once we're ready, we can send a notify_all, and then the threads will all start going ham trying to get their jobs done. You use std::condition_variable, call it cv, and use cv.wait() and cv.notify_all().</p> <p>https://cplusplus.com/reference/condition_variable/condition_variable/</p>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#atomic","title":"Atomic","text":"<p>Atomic types are types that geared specifically toward multithreading. They won't cause race conditions. Basically if you have a bool, use atomic_bool, etc. There are atomic versions of most types. If you need a data type to be shared, then make it atomic.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Multithreading/#videos-and-extra-materials","title":"Videos and Extra Materials","text":"<p>https://www.youtube.com/watch?v=7ENFeb-J75k&amp;t=82s</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%201/","title":"Week 1","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%201/#day-1","title":"Day 1","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%201/#anatomy-of-a-basic-c-program","title":"Anatomy of a basic C++ program","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main(){\n    cout &lt;&lt; \"Hello World\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(){\n    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n    return 0\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nint main(){\n    cout &lt;&lt; \"Hello World\" &lt;&lt; endl;\n    return 0;\n}\n\n</code></pre> <p><code>#include &lt;iostream&gt;</code> For you all, this is somewhat equivalent to <code>import x</code> in python. The include keyword is used to import header files which are essentially files that contain declarations and definitions for classes, structs, functions, and variables. In C++ 20, we now have the import keyword for modules, which works somewhat similarly, except that modules are precompiled and eliminate a lot of overhead that comes with headers. https://learn.microsoft.com/en-us/cpp/cpp/modules-cpp?view=msvc-170</p> <p>Why would we still use headers? As it states in the microsoft docs above, macros, preprocessor directives, and non-exported names are not visible to external code. In other words, if you want to make those things accessible to others, then headers are nice for that. </p> <p>Why don't we need a semi-colon on this type of statement? Essentially the includes are preprocessor directives and run before actual compilation. In other words, a separate program from the compiler reads these lines, and has its own way of parsing these types of directives. After the preprocessor runs, then the compiler takes over, and has a separate set of rules, and requires the use of the semi-colon as a delimiter, since it doesn't care about whitespace.</p> <p><code>using namespace std;</code> What are namespaces? It's just an extra layer of scope. Let's say we have two families of classes that are unrelated, but feature the same type of verbage. For instance, Games and Music Streaming. Both of these systems might have functionality called Play, Pause, Stop, whatever. Since these two names make sense within their own context, it's somewhat of a given that they'll have functions with names that clash. So, what we can do is specify a namespace, or essentially say that a certain collection of Classes, Functions, etc, all belong to a certain scope, and when we use that scope, we be certain that Games.Play is different from Music.Play or something like that. It's just a way to group up common names so that they don't conflict.</p> <p>A more concrete example, is as a library writer, you might want to overload cout, or cin, or write functions or classes that have the same name as functions or classes that are defined in the standard library. As such, defining a namespace, allows us to differentiate between independent libraries.</p> <p><code>int main()</code>{ ... } In C++, everything is typed, and so since main is a function, and the entry point to our C++ program, we say that its type is int, so we can return integers depending on code execution. When we return 0, this essentially just says that everything ran, and we're done.  https://en.cppreference.com/w/c/language/main_function</p> <p><code>cout &lt;&lt; \"Hello World\" &lt;&lt; endl;</code> cout is gonna feel weird to you all. And it kind of is. Most languages have something equivalent to print(), console.writeline(), console.log(), etc. The difference here is that cout is actually an object, and the <code>&lt;&lt;</code> operator is just that: an operator. In python we can overload magic methods (dunder methods) like __eq__() or __str__(). In python, eq usually takes the form fo x == y, while str is in a function format like str(x). In these scenarios, and in compilers, and interpreters, sometimes operators can translate directly to an operation, while in other scenarios, it's syntactic sugar. For us, the &lt;&lt; operator is a nice sugar that is secretly a function that acts like an operator like +, -, &lt;, etc. Python's print function, is also a bit of sugar. It's a function that essentially just acts as a nice little wrapper for doing sys.stdout.write() or something of that nature. Likewise, in C++, cout is the standard output ostream object that we can write with. Using &lt;&lt; is similar to using cout.write() but it comes with some more safety features, and is an operator instead of a full method that we have to write out.  https://docs.python.org/3/library/functions.html#print</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%201/#remembering-the-difference-between-and-for-cout-and-cin","title":"Remembering the difference between &lt;&lt; and &gt;&gt; for cout and cin","text":"<p>It can be pretty tricky remembering which operators to use when doing using cin and cout, especially coming from python where we have \"print\" and \"read\"</p> <p>Remember that cin and cout are OBJECTS. That means that store information. When determining which direction your chevrons should go, remember where the direction is flowing. </p> <p>A cout object is going to pipe information to standard output (like your terminal). SO, that means that we want to direct that information from something like a string, to cout. In other words:  <code>cout &lt;&lt; \"something\"</code>. Despite it being output, the flow of direction is not towards the string, or \"out\" from cout. The string is going INTO the cout object.</p> <p>Likewise, cin receives input from a terminal or some source, and STORES that input, into ANOTHER object. So it's \"piping\" information from itself, to a program object. Thus <code>cin &gt;&gt; my_string;</code></p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%201/#day-2","title":"Day 2","text":"<p>Ints Floats Const Auto</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%201/#compiling-c","title":"Compiling C++","text":"<p>https://code.visualstudio.com/docs/cpp/config-mingw https://bytes.usc.edu/cs104/wiki/gcc</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/","title":"Week 2","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#evaluating-expressions","title":"Evaluating Expressions","text":"<p>https://en.wikipedia.org/wiki/Binary_expression_tree</p> <p>Last time, we talked about evaluating expressions. In most languages, we have a few unary operators, several binary operators, and sometimes a ternary operator. Ternary kind of sucks to be honest. In most situations, favor readability. Just makes things clearer.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#type-conversions-213","title":"Type Conversions (2.13)","text":"<p>Implicit conversions happen between types that can naturally be coerced into the other. Ints can be converted to floats, chars can be converted to ints, etc. The term coercion is not an official term, but you might see it every now and then, and it usually just refers to implicit conversions. We can do implicit conversions with assignments as well. </p> <p>https://www.geeksforgeeks.org/casting-operators-in-cpp/</p> <p>https://en.wikipedia.org/wiki/Assignment_(computer_science)</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#casting","title":"Casting","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#static-cast","title":"Static Cast","text":"<p>This is the most common type of cast. Compile-time conversion. Similar to C style cast </p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#dynamic-cast","title":"Dynamic Cast","text":"<p>Used for downcasting (Parent-&gt;Child) as opposed to upcasting (Child-&gt;Parent)</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#const-cast","title":"Const Cast","text":"<p>Adds or removes constness depending on the state of constness.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#reinterpret-cast","title":"Reinterpret Cast","text":"<p>Changes the pointer type.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#c-style-cast","title":"C-Style cast","text":"<p>(type)expression; (double)i;</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#functional-cast","title":"Functional Cast","text":"<p>type(expression) int(i); Mimics a constructor.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#bitwise-operations","title":"Bitwise Operations","text":"<p>Adding binary numbers works in the same way that adding decimal numbers does. Decimal notation works on a range of 0-9 for every place of increasing or decreasing power. So, if we take the number 9, which is the limit of the range of values in the 1's position, and then add 1 to it, we overflow that position, and increment the next position. During this overflow, we wrap back around to 0, and continue up until 9. So 9 + 1 = 10. Then we get 10 + 1 = 11. And so on. 19 + 1 = 20. It works the same way in binary, but we can only hold 1 value at a time. So, when we add in binary, we simply do the following: 0 + 1 = 1. 1 + 1 = 10 (this is 2). 10 + 1 = 11 (3). And so on. </p> <p>Two's complement is a form of representing binary values that circuments a lot of shortcomings from previous binary representations, specifically in how we approach arithmetic. The only thing you really need to know is to get a negative value, you take the positive representation in binary, flip all of the bits, and then add 1. This will give you your two's complement, or standard binary representation.</p> <p>https://en.wikipedia.org/wiki/Two%27s_complement</p> <p>101 = -3 001 = 1</p> <p>101 + 001 = 110 = -2</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#and","title":"And","text":"<p>For a binary expression, evaluates to true when both operands are true. Evaluates to false in any other scenario.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#or","title":"OR","text":"<p>For a binary expression, evaluates to true when one or both operands are true. Evaluates to false when both operands are false</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#xor","title":"XOR","text":"<p>For a binary expression, evaluates to true when one and only one of the operands is true. Evaluates to false when both are true, or both are false.3</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#switch-statements","title":"Switch Statements","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#floating-point-218","title":"Floating Point (2.18)","text":"<p>Scientific notation for decimal numbers can be something like </p> <p>300 = 3 x 10^2 </p> <p>https://en.wikipedia.org/wiki/Scientific_notation</p> <p>For floating point, we use a similar system but with some slight caveats and given assumptions. </p> <p>Sign is used to represent a positive or negative. Exponent is used to represent by how much to shift the point. It's the exponent attached to the 10 in decimal scientific notation, or 2 in binary scientific notation, but the main thing to remember is by how much you will shift the point by.</p> <p>In order to get a full range of left and right shifts, we use 8 digits to represent the exponent, and then offset whatever that value is set to by -127. So, if you want to represent 2, then your expression would be 2 x 10 ^ 0 or 1 x 2^1. In binary, we can only use 0 or 1.</p> <p>So we use the exponent to represent how much to shift, and the \"mantissa\" is the left hand side, or the significant digits. There's on important thing that we do though, we assume that there's always a 1 for our significant digit. Since a binary value needs to have a 1 in order to be valid, then every non-zero number is going to have at least one 1 in it. So, we just assume that the one already exists, and this allows us to get a greater range out of our digits. </p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#value-categories","title":"Value Categories","text":"<p>https://en.cppreference.com/w/cpp/language/value_category</p> <p>https://learn.microsoft.com/en-us/cpp/cpp/lvalues-and-rvalues-visual-cpp?view=msvc-170</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%202/#universal-initialization","title":"Universal Initialization","text":"<p>Basically just use braces for everything.</p> <p>https://en.cppreference.com/w/cpp/language/initialization</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%205/","title":"Week 5","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%205/#undefined-behavior","title":"Undefined Behavior","text":"<p>When we talked about indexing outside of an array, we wondered what would happen. At some point, we were able to iterate a fair degree outside of the bounds of our array, and then after enough passes, we hit a segmentation fault. A segmentation fault is when we try to access a \"segment\" that is protected by our system. This can happen when trying to access outside of the bounds of our program, or potentially when trying to access a dangling pointer or something. In other words, we asked for resources from our system, those resources were provided, and we're usually accidentally going out of bounds.</p> <p>C++ doesn't make any particular rules about accessing outside of the bounds of an array as it is considered to be undefined behavior. This is a level of the specification where no decisions were made on how to handle a specific feature of the language. In the same way that dividing by zero is undefined in mathematics, there is functionality that results in undefined behavior in C++. Treading into undefined territory is generally legal according to the compiler, but going into the wilderness can have disastrous consequences.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%205/#linking-and-compiling","title":"Linking and compiling","text":"<p>If we want to just manually compile, we can simply use the compile flag -c. This creates object files. </p> <p>From here, we can then link those object files by simply passing them to g++ with an optional output flag. This is virtually the same process that we did before, just now instead of passing .cpp files to the g++ compiler, we're now passing .o files. </p> <p>So if we make changes to one file, we simply invoke </p> <pre><code>g++ -c some_file.cpp\n</code></pre> <p>which produces a some_file.o file.</p> <p>Then we can do</p> <pre><code>g++ main.o some_file.o -o main.exe\n</code></pre> <p>Obviously though, having a lot of source files would make this process more complicated. This is where we use environments like vscode and set up task and launch configurations for building a project, or in Visual Studio where a lot of that is handled automatically. The other option is to create a Make file which has its own distinct syntax.</p> <p>Simple C Makefile tut</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%205/#object-orientation-vs-procedural","title":"Object orientation vs procedural","text":"<p>Object Orientation is NOT about Objects...</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%205/#can-we-make-c-emulate-c-objects-classes-and-structs","title":"Can we make C emulate C++ objects (classes and structs?)","text":"<p>https://stackoverflow.com/questions/44102324/emulating-classes-in-c-using-structs</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%205/#structs-and-classes","title":"Structs and Classes","text":"<p>Structs and Classes are the exact same thing in C++ with the main difference being in default privacy/visibility of member data. Struct member data is public by default, while class member data is private by default. Keep in mind that C++ was originally just a transpiler to C code. Naturally, a lot of the features of C carried over, which can at times feel confusing to new C++ programmers. (Go back to the introduction where I talked about what makes C++ hard). When in doubt, use C++ idioms and features. Opt for C features when you have specific needs.</p> <p>8.2 Talks about returning a struct as opposed to using two reference parameters, sometimes called output parameters in c++. It can come across as confusing to see two parameters passed by reference when their only purpose to is to be modified, since functions insinuate consumption and especially if the function doesn't return anything, one might wonder what we do with the references. It's not wrong, but some could argue it's confusing.</p> <p>Input and Output Parameters in C++</p> <p>8.3 and 8.4 Fall more in line with the C style of programming when back in the day, structs were not objects, and so they had no functionality (methods). So instead, you would create groups of functions that would be able to operate on structs. We could get into a whole thing about the evolution of the \"dreaded\" inheritance features in object orientation. The main idea here is that object orientation is about defining new types that are able to handle messages via methods. Adding new types is trivial in object orientation, and leveraging inheritance allows for code reuse. With greater abstractions, comes greater power, but as a side effect, more responsibility and potentially more confusion. This is where the fresh undergrads tend to swear off OO for the \"simplicity\" of functional programming and all of the safety that it promises.</p>"},{"location":"Academic/C%2B%2B/CS-2370/Week%206%267%20%28Ask%20forgiveness%20instead%20of%20permission%29/","title":"Week 6&7 (Ask forgiveness instead of permission)","text":""},{"location":"Academic/C%2B%2B/CS-2370/Week%206%267%20%28Ask%20forgiveness%20instead%20of%20permission%29/#exceptions","title":"Exceptions","text":"<p>errors and exception handling in modern c++</p> <ul> <li>A\u00a0try\u00a0block surrounds normal code, which is exited immediately if a throw statement executes.</li> <li>A\u00a0throw\u00a0statement appears within a try block; if reached, execution jumps immediately to the end of the try block. The code is written so only error situations lead to reaching a throw. The throw statement provides an object of a particular type, such as an object of type \"runtime_error\", which is a class defined in the\u00a0stdexcept library. The statement is said to throw an exception of the particular type. A throw statement's syntax is similar to a return statement.</li> <li>A\u00a0catch\u00a0clause immediately follows a try block; if the catch was reached due to an exception thrown of the catch clause's parameter type, the clause executes. The clause is said to catch the thrown exception. A catch block is called a\u00a0handler\u00a0because it handles an exception.</li> </ul> <p>try, throw, catch Statements (C++)</p>"},{"location":"Academic/C%2B%2B/CS-3370/Final%20Topics/","title":"Final Topics","text":"<p>1) carefully. It's asking about operator functions. Think back to our BitArray project, and how we specifically handled overloading conversion and access operators. We defined a nested private class, BitProxy, to handle such overloads for us. While BitProxy is defined in BitArray, the functions are BitProxy's, not BitArray.</p> <p>2) will be about check for 1 or 0 value in a given character. Review the lab/slides for info on that. Multiple answer with 2 correct choices</p> <p>3) will ask for a single line of code. Be familiar with how to write a lambda function:</p> <pre><code>[](){'expression'};\n</code></pre> <p>4) Be familiar with lock_guard and how it differs from unique_guard 5) Be familiar with bit masks as were covered in the lab for P6 6) Same as above. You'll be asked to write a code snippet that does some bit operations 7) Be familiar with template parameters (there are some resources on that in the Discord) 8) Be aware of the rule of 5. You'll be asked to evaluate what a certain code snippet outputs with a variety of potential options from different constructors and assignments. 9) You'll need to write a move constructor and move assignment 10) Write a copy assignment snippet 11) Light multithreading example where you add locks to a region, similar to P7 12) Be familiar with maps, you'll have to implement a class that stores records in a map. 13) You can use references from CPlusPlus.com or cppreference.com to figure out what you need to do to implement std::transform. You'll need to be familiar with iterators. I don't care so much about perfection for this one, mostly that you have the general idea. 14) Why did we use BitProxy in P6? 15) Evaluate a problem with a given line of code from P6 related to setting a bit.  16) Implement some functions without using explicit loops.</p>"},{"location":"Academic/C%2B%2B/CS-3370/Module%202/","title":"Module 2","text":"<p>foo-&gt;bar == (*foo).bar</p> <ul> <li>foo being a pointer to an object, with foo.bar the compiler evaluates the dot operator first. Which results in (foo.bar) or in otherwords, we're dereferncing a supposed pointer bar. foo.bar yields dereferencing bar of foo. We get bar from foo, and then dereference that pointer. If we want to access members of a pointer to an object then we need to evaluate the pointer first, thus the parens (foo).bar. This explicitly forces us to dereference foo, and grab the member bar, dereferencing bar of foo. The operator -&gt; is a shortcut for this.</li> <li>We don't need to distinguish between dot operator and -&gt; operator in other languages because languages like python, c#, java etc. don't usually let us access by pointer (except for c# when in unsafe mode)</li> </ul> <p>Size_t vs int and such</p> <ul> <li>Size_t is specifically designed to around system storage.</li> <li>Size_t is guaranteed to represent the max size of any object in memory</li> <li>Could be 16, 32, or 64.</li> <li>Returned by size_of()</li> </ul> <p>Const, constexpr, enum.</p> <ul> <li>I made a goof and talked about readonly. That's a c# thing, my bad. I do think there's a property</li> </ul> <p>Declaration vs Definition</p> <ul> <li>I DECLARE BANKRUPTCY!!! No inherit meaning, just a word without much to it. In the world of programming it's basically just an identifier with a type that can be turned into a symbol for use by the compiler.</li> <li> <p>Definitions give meaning. In other words, when we do an assignment, or define a function with a body, the declaration is given substance, and actual information to be stored in the computer.</p> </li> <li> <p>Struct vs Class</p> </li> <li> <p>What's the difference in C++?</p> </li> <li> <p>What's the difference in C?</p> </li> <li> <p>Pragma Once vs Include Guard</p> </li> </ul> <p>NOTE: Semantics are crucial, but often debated. When we use certain words, we assign certain meaning to those words, and people spend a lot of time debating on whether or not the exact words and what they mean are correct. Don't worry too much about getting lost in the weeds of semantics, just be willing to change and adapt your understanding to match better, more informed definitions.</p>"},{"location":"Academic/C%2B%2B/CS-3370/Module%203/","title":"Module 3","text":""},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#copying-data","title":"Copying Data","text":""},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#c-standard-copy-algos","title":"C++ Standard Copy Algos","text":"<p>copy</p> <ul> <li>Copies the elements in the range\u00a0<code>[first,last)</code>\u00a0into the range beginning at\u00a0result.</li> <li>Used for copying data from one container to another. Things like arrays, strings, etc.</li> <li>Can be used on custom types.</li> <li>Compensates for type sizes</li> <li>just use this one</li> </ul> <p>copy_backward</p> <ul> <li>Copies the elements in the range\u00a0<code>[first,last)</code>\u00a0starting from the end into the range terminating at\u00a0result</li> <li>Does what copy does, but backwards.</li> </ul> <p>copy_n</p> <ul> <li>Similar to copy but specifies first, and then n elements to copy from first.</li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#c-standard-copy-algos_1","title":"C Standard Copy Algos","text":"<p>memcpy - Used for copying raw data - Copies n bytes - No interpretation</p> <p>strcpy - Copies strings until it encounters null character - Assumes the destination buffer is large enough.  - Unsafe for the above reason, buffer overflow is dangerous and can be exploited</p> <p>strncpy - Specifies characters to copy - Ensures that the destination is adequate. - Adds nulls if the consumed data is shorter than specified which can cause other problems</p> <p>strlcpy - truncates results to fit the destination buffer - avoids overflow</p>"},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#vals-refs-and-ptrs-parameters","title":"Vals, Refs, and Ptrs (Parameters)","text":"<p>When writing functions, there are a few ways that we can handle the data we work with.</p> <p>Pass-by-value copies the data from whatever was passed to the function into the parameter name. There's a small amount of overhead with this. Any changes to the parameter are not reflected outside. If you want those changes, you've gotta return it.</p> <p>Pass-by-reference is almost always what you want. It creates an alias which is essentially just a name binding to data. This allows us to make changes to the object or data outside of the function, and has no overhead. </p> <p>Const Reference is the better alternative to passing by value. It makes the data readonly (so we get similar behavior as values since updates don't apply), we we get the aliasing that requires no overhead/copying that pass-by-value does.</p> <p>Pass-by-pointer is when you're working with pointers specifically and need to pass them into a function. You don't always need pointers, think about their life-time (how long they'll be around for, and how long you need them for). Sometimes it's worth it to create objects on the stack, and a lot of times we really just need references.</p>"},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#project-1-help","title":"Project 1 Help","text":""},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#first-attempt-mistakes","title":"First Attempt Mistakes","text":"<ul> <li>Rushing in without a plan. Write out comments and documentation on what your gameplan is. Draw things out, review how a circular buffer behaves.<ul> <li>To my and your defense, the spec doesn't lay everything out explicitly</li> </ul> </li> <li>Good naming conventions. Make sure that your naming conventions are clear. It's even worth-while to copy values to new variables with better names if your context switches, just to be sure you know what you're doing with your vars.</li> <li>Forgetting that we're doing things circularly. We don't want to treat it like the simple array that it is. We're treating it as though the beginning and end are connected. This is critical.</li> <li>Decide now how you want to handle incrementation, and keep in mind what your offsets will be when iterating. Read/Write then Advance after operation, you don't want to step on your toes.</li> <li>If you write and advance, you don't want to overwrite your data, and you don't want to read into bogus region.</li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/Module%203/#useful-things-to-know","title":"Useful things to know","text":"<ul> <li>Use std::copy or std::copy_n for swapping out data between arrays</li> <li>Expand() isn't a given, but you'll need to implement it. This will be crucial to inserting data</li> <li>Shrink will share a lot of the same type of logic as expand. You can copy a fair amount of code as far as copying data goes.</li> <li>You really only need to use one pointer in this project, and that's just for your array that you allocate on the heap, which allows you to size it dynamically. You will also need another pointer if you want to use a temporary array to copy data over while you resize your main array.</li> <li>BE SURE TO DELETE POINTERS AFTER YOU'RE DONE USING THEM</li> <li>The project requires you to allocate space in chunks. You can determine how many chunks you need by dividing the number you want to store, by the CHUNK size (8 per chunk) and then use a ceiling function to round up to the next whole chunk.</li> <li>Feel free to add console output. Also feel free to add small tests in your main. Just remember that it'll be run against an original main on our end.</li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/Module%204/","title":"Module 4","text":""},{"location":"Academic/C%2B%2B/CS-3370/Module%204/#iterators","title":"Iterators","text":"<p>https://users.cs.northwestern.edu/~riesbeck/programming/c++/stl-iterators.html</p> <p>https://www.youtube.com/watch?v=yTi46Pb32qg</p> <p>https://en.cppreference.com/w/cpp/language/lambda#Lambda_capture</p> <p>https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170</p>"},{"location":"Academic/C%2B%2B/CS-3370/Module%205/","title":"Module 5","text":""},{"location":"Academic/C%2B%2B/CS-3370/Module%205/#template-parameters","title":"Template Parameters","text":"<p>https://learn.microsoft.com/en-us/cpp/cpp/templates-cpp?view=msvc-170#type_parameters</p> <p>https://en.cppreference.com/w/cpp/language/template_parameters</p>"},{"location":"Academic/C%2B%2B/CS-3370/Module%205/#type-parameters","title":"Type Parameters","text":""},{"location":"Academic/C%2B%2B/CS-3370/Module%205/#non-type-parameters","title":"Non-Type Parameters","text":""},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/","title":"P2 Memory Pool and Techniques","text":""},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/#introduction","title":"Introduction","text":"<p>The purpose of this project is to learn and understand more advanced techniques in managing memory. Memory Pooling is used for even more efficient allocation and initialization than what is provided to us with the new keyword. This project will allow us to practice the following techniques:</p> <ul> <li>operator new overloading</li> <li>operator delete overloading</li> <li>placement new</li> <li>type punning</li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/#class-overview","title":"Class Overview","text":""},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/#pool-deep-explanation","title":"Pool Deep Explanation","text":"<p>MyObject will have an inline static member, Pool, that accepts MyObject types. This allows us to share the pool between MyObjects</p> <p>Pool is an expanded version of what you did for project 1. Only this time, we're adding one more layer of memory management, and so our pool is a double pointer array. In other words, our pool will have elements that point to pointers that point to arrays. </p> <p>When we first start our main, we'll invoke allocate which will then check to see if we have space to store an element. If we don't, we create a new block in our pool, and then link all of the spaces in our block (array) by having pointers that point to the next free space available. We can remove objects in any order we like, which is why we have to keep track of which spots are free. At first, each next just points to the next space, but as we remove objects at random, that sequential ordering can and will change.</p> <p>We will use an implicit/logical linked list to manage where we can store everything. Keep in mind that we're managing a Heap with our pool. So what this means, is that we're going to have spaces in memory, that are reserved by our arrays (blocks). Each space in our blocks can be a living space for our MyObjects, but until those spots our occupied, we will treat each space as a pointer to the next free space. This is why we will use Unions as a cleaner option for type punning.</p> <p>Our blocks will be of type element, which is a union. We will be able to treat each space in our blocks as either a \"next\" (think back to \"next\" in your linked list project in 2420, only it's not in an object, it's just a pointer to some other free space), or as a MyObject. </p> <p>In main.cpp, we'll have an array of MyObjects. That array doesn't care about where they are on the heap, it just has pointers to objects that live on the heap.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/#public-functions","title":"Public Functions","text":"<ul> <li>allocate<ul> <li>this function will call expand if necessary</li> <li>save the address pointed to by the head for storing the new object</li> <li>move the linked list head to the next free spot </li> <li>return the saved address</li> <li>not responsible for object creation, only space allocation</li> </ul> </li> <li>deallocate<ul> <li>store the address of what the head is pointing to, at the location of the object we're deallocating (this links things)</li> <li>points the head itself to that object's address so that we can allocate an object at this location</li> </ul> </li> <li>profile<ul> <li>prints address of free spots </li> </ul> </li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/#private-functions","title":"Private Functions","text":"<ul> <li>expand - has 2 scenarios<ul> <li>Scenario 1: If nothing has been allocated to the pool, we simply create a new \"block\" or pointer array. This array can go anywhere in memory. We get the pointer to the array we've just made, and save it in our Pool double pointer array. You can think of this new array as a new row</li> <li>Scenario 2: If we've run out of spaces in our row (we hit nullptr), we simply do the same process as before, but we must increase the double pointer array for our pool, which means creating a temp array, copying the pointer pointers over, allocating new space, then copying them over to the new double pointer array with increased size.</li> <li>Finally, we invoke link()</li> </ul> </li> <li>link<ul> <li>Invoked when we call expand</li> <li>After a new block is available, we have free space, as well as a tail pointer.</li> <li>We link our \"tail\" pointer to the first index of the new array, and then move it along with our next pointer until we reach the end.</li> <li>Each index will contain a pointer to the next free slot (at first, it'll just be the address for the next free index)</li> <li>The last one we do will be a nullptr.</li> <li>Set our head at the beginning of the new block of the pool</li> </ul> </li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/P2%20Memory%20Pool%20and%20Techniques/#myobject","title":"MyObject","text":"<p>This class is a dummy object for our project, with an id and a name. It's also all written for you.</p> <p>We're keeping its constructor and overloaded new private so that no one can instantiate MyObject themselves. We're making it so that if we want a MyObject, it HAS to go to the pool. Otherwise, we'd be able to create a new object, and it would just go put on the heap automatically. </p> <p>MyObject the following public functions</p> <ul> <li>delete<ul> <li>invokes pool.deallocate</li> </ul> </li> <li>create<ul> <li>invokes the new keyword for MyObject. More on this below.</li> <li>new invokes pool.allocate. This provides us with an address only. </li> <li>The address is given to the compiler, which invokes the constructor and stores object there</li> </ul> </li> <li>profile<ul> <li>pool.profile</li> </ul> </li> <li>operator &lt;&lt;<ul> <li>we choose how the object gets printed out to console.</li> <li>similar to python's __ str __ </li> </ul> </li> </ul>"},{"location":"Academic/C%2B%2B/CS-3370/P3%20String%20and%20Stream%20Processing/","title":"P3 String and Stream Processing","text":""},{"location":"Academic/C%2B%2B/CS-3370/P3%20String%20and%20Stream%20Processing/#assignment","title":"Assignment","text":"<p>Write a program that handles I/O of Employee objects containing the following data attributes:</p> <ul> <li>name(string)</li> <li>id(int)</li> <li>address(string)</li> <li>city(string)</li> <li>state(string)</li> <li>country(string)</li> <li>phone(string)</li> <li>salary(double)</li> </ul> <p>You will read XML representations of Employee objects from a file, and then will create a file of fixed-length records of Employee data. Do not use an XML software library or regular expressions for this assignment; just use operations from the std::string class for parsing input (see the Notes section below).The input files have no XML header tag.</p> <p>The XML tags are named the same as the attributes (ignoring case, of course). For those that know XML, don\u2019t worry about top-level, system XML tags; we just want sequences of same-level Employee tag groups with attributes tags nested to one level only, like the following (indented to show the nesting, but they may appear free-form in the file; don\u2019t assume that there will be any newlines or formatting):</p> <pre><code>&lt;Employee&gt;\n    &lt;id&gt;12345&lt;/id&gt;\n    &lt;name&gt;John Doe&lt;/name&gt;\n    ...\n    &lt;salary&gt;40000&lt;/salary&gt;\n&lt;/Employee&gt;\n&lt;Employee&gt;\n...\n&lt;/Employee&gt;\n</code></pre> <p>A single XML text file may have multiple Employee records. Internal Employee field tags can appear in any order or not at all, except that name and id are required. When creating Employee objects, use 0.0as a default for salary and empty strings for the other optional attributes.</p> <p>I have provided several XML files to process. All but one of them have errors that you must catch. Throw exceptions of runtime_error(defined in )for these cases. You will catch these exceptions in your main function. <p>Your Employee class must contain at least the following:</p> <ul> <li>void display(std::ostream&amp;) const;  // Write a readable Employee representation to a stream</li> <li>void write(std::ostream&amp;) const;    // Write a fixed-length record to current file position</li> <li>void store(std::iostream&amp;) const;   // Overwrite (or append) record in (to) file</li> <li>void toXML(std::ostream&amp;) const;    // Write XML record for Employee</li> <li>static Employee* read(std::istream&amp;);   // Read record from current file position</li> <li>static Employee* retrieve(std::istream&amp;,int); // Search file for record by id</li> <li>static Employee* fromXML(std::istream&amp;);      // Read the XML record from a stream</li> </ul> <p>Do not change any signatures or return types. Define any constructors you feel needful. You do not need a destructor, as Employee objects only contain string objects and numbers. read, retrieve, and fromXML return a nullptr if they read end of file. retrieve also returns a nullptr if the requested id is not found in the file. Throw exceptions for data errors.</p> <p>The following is an overview of what your main function should do to test your functions using the file employee.xml(provided in this Zip file):</p> <ol> <li>Obtain the name of an XML file to read from the command line (argv[1]). Print an error message and halt the program if there is no command-line argument provided, or if the file does not exist.</li> <li>Read each XML record in the file by repeatedly calling Employee::fromXML, which creates an Employee object on-the-fly, and stores it in a vector (I recommend using unique_ptrs in the vector).</li> <li>Loop through your vector and print to cout the Employee data for each object (using the display member function).</li> <li>The next step is to create a new file of fixed-length Employee records. This is explained below. Write the records for each employee to your new file (call it \u201cemployee.bin\u201d) in the order they appear in your vector. Open this file as an fstream object with both read and write capability, and in binary format.</li> <li>Clear your vector in preparation for the next step.</li> <li>Traverse the file by repeated calls to Employee::read, filling your newly emptied vector with Employee pointers for each record read.</li> <li>Loop through your vector and print to cout an XML representation of each Employee using Employee::toXML.</li> <li>Search the file for the Employee with id 12345 using Employee::retrieve.</li> <li>Change the salary for the retrieved object to 150000.00</li> <li>Write the modified Employee object back to file using Employee::store</li> <li>Retrieve the object again by id (12345) and print its salary to verify that thefile now has the updated salary.</li> <li>Create a new Employee object of your own with a new, unique id, along with other information.</li> <li>Store it in the file using Employee::store.</li> <li>Retrieve the record with Employee::retrieve and display it to cout.</li> </ol> <p>Make sure you don\u2019t leak any memory.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P3%20String%20and%20Stream%20Processing/#output","title":"Output","text":"<p>Here is sampleoutputfrom employee.xml (except for steps 12\u201314):</p> <pre><code>$ ./a.out employee.xml\nid: 1234\nname: John Doe\naddress: 2230 W. Treeline Dr.\ncity: Tucson\nstate: Arizona\ncountry: USA\nphone: 520-742-2448\nsalary: 40000\n\nid: 4321\nname: Jane Doe\naddress: \ncity: \nstate: \ncountry: \nphone: \nsalary: 60000\n\nid: 12345\nname: Jack Dough\naddress: 24437 Princeton\ncity: Dearborn\nstate: Michigan\ncountry: USA\nphone: 303-427-0153\nsalary: 140000\n\n&lt;Employee&gt;\n    &lt;Name&gt;John Doe&lt;/Name&gt;\n    &lt;ID&gt;1234&lt;/ID&gt;\n    &lt;Address&gt;2230 W. Treeline Dr.&lt;/Address&gt;\n    &lt;City&gt;Tucson&lt;/City&gt;\n    &lt;State&gt;Arizona&lt;/State&gt;\n    &lt;Country&gt;USA&lt;/Country&gt;\n    &lt;Phone&gt;520-742-2448&lt;/Phone&gt;\n    &lt;Salary&gt;40000&lt;/Salary&gt;\n&lt;/Employee&gt;\n&lt;Employee&gt;\n    &lt;Name&gt;Jane Doe&lt;/Name&gt;\n    &lt;ID&gt;4321&lt;/ID&gt;\n    &lt;Salary&gt;60000&lt;/Salary&gt;\n&lt;/Employee&gt;&lt;Employee&gt;\n    &lt;Name&gt;Jack Dough&lt;/Name&gt;\n    &lt;ID&gt;12345&lt;/ID&gt;\n    &lt;Address&gt;24437 Princeton&lt;/Address&gt;\n    &lt;City&gt;Dearborn&lt;/City&gt;\n    &lt;State&gt;Michigan&lt;/State&gt;\n    &lt;Country&gt;USA&lt;/Country&gt;\n    &lt;Phone&gt;303-427-0153&lt;/Phone&gt;\n    &lt;Salary&gt;140000&lt;/Salary&gt;\n&lt;/Employee&gt;\n\nFound:\nid: 12345\nname: Jack Dough\naddress: 24437 Princeton\ncity: Dearborn\nstate: Michigan\ncountry: USA\nphone: 303-427-0153\nsalary: 140000\n150000\n</code></pre> <p>Note that store and retrieve search the file for the correct record by looking at the ids in each record. retrieve fails if no record with the requested id is found; return a nullptr in that case. store overwrites the record if it exists already; otherwise it appends a new record to the file.</p> <p>Throw runtime_error exceptions with a suitable message if any required XML tags are missing, or if any end tags for existing start tags are missing, or for any other abnormalities.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P3%20String%20and%20Stream%20Processing/#notes","title":"Notes","text":"<p>Your XML input function should not depend on the line orientation of the input stream, so don\u2019t read text a line at a time(i.e., don\u2019t use getline() with the newline character as its delimiter [other delimiters are okay]\u2014the input should be \u201cfree form\u201d, like source code is to a compiler). Do not use any third-party XML libraries. I want you to do your own basic, custom parsing by using simple string operations. An important part of this assignment is also the proper use of exceptions.</p> <p>To process fixed-length records in a file requires special processing. Our Employee objects use std::string objects, which are allowed to have strings of any length, but we need to write fixed-length, byte-records to files using ostream::write(and we read them back into memory with istream::read). Some strings may therefore get truncated. Here is the record structure I used for transferring Employee data to and from files.</p> <p>struct EmployeeRec { int id; char name[31] ;char address[26]; char city[21]; char state[21]; char country[21]; char phone[21]; double salary; };</p> <p>Note that the strings here are C-style, zero-delimited strings. You need to copy data from and to an EmployeeRec when doing I/O with the binary file. It is the EmployeeRec object that is actually written/read See employeedb.cpp. You may find some of the following functions useful for this assignment:</p> <p>istream::gcount, istream::seekg, istream::tellg, istream::read, ostream::write, istream::getline(istream&amp;,string&amp;, char), istream::unget, ios::clear, string::copy, string::empty, string::stoi, string::stof, string::find_first_not_of, string::find, string::substr, string::clear, string::c_str. </p> <p>The goal here is to understand strings and streams better, as well as serializing simple object data. Along the way, I ended up creating a few handy XML-related functions for future use, which I named getNextTag, getNextValue, both of which take an input stream as a parameter. You might find such a practice useful. Remember to do a case-insensitive compare when looking for tag names. For case-insensitive string comparisons, it is handy to use the non-standard C function, strcasecmp, defined in as a GNU/clang extension. (This function works like std::strcmpbut ignores case.) In MicrosoftVisual C++ the function is named stricmp(possibly with a leading underscore).Note: to extract a char*from a C++ string object to pass to strcasecmp/stricmp, you need to call c_str( )on the string objects: <p>strcasecmp(s1.c_str(), s2.c_str())// Returns negative|0|positive for &lt;|==|&gt;</p> <p>Sample input files are in this zip file. The files employee2.xmlthroughemployee8.xmlhave errors that you should catch through exceptions and print a meaningful message. Here\u2019s my output:</p> <p>$ ./a.out employee2.xml Missing  tag $ ./a.out employee3.xml Missing  tag $ ./a.out employee4.xml Invalid tag:   $ ./a.out employee5.xml Missing  tag $ ./a.out employee6.xml Multiple  tags $ ./a.out employee7.xml Invalid tag:  $ ./a.out employee8.xml Missing tag <p>You should get the same output.</p> <p>Not counting the main driver, my code was 272 lines. FYI.</p> <p>Assessment Rubric Competency  </p> <p>Memory Management Every new has a delete (no memory leaks); destructor does the right thing.(Use unique_ptrin main to receive heap pointers from from XML and read so you don\u2019t have to explicitly delete pointers in the driver.)</p> <p>Memory efficiency No unnecessary temporary variables are used in read and from XML;  use a std::bitset to track which Employee fields have been encountered when reading an Employee\u2019s XML data </p> <p>File I/O  Use binary files properly; efficient use of file positioning functions; call clear when needed</p> <p>Clean Code No repeated code (refactor); No unnecessary code Simplest possible logic to fulfill program requirements; intelligent use of std::string functions to parse data (do not use regular expressions)</p> <p>Defensive Programming Exceptions thrown as requested Use reinterpret_cast with std::read and std::write;  don\u2019t hard-code special characters like \u2018&lt;\u2019, \u2018&gt;\u2019, etc.(use constants). Use assert in appropriate places.</p> <p>Other Use range-based for when applicable; Use constructor initializer lists for non-built-in types of class members;  use in-class initializers for non-static data members where applicable;  proper use of command-line arguments as assigned</p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Analyze%3B%20Data%20Reduction%20with%20C%2B%2B%20Algorithms/","title":"P4 Analyze; Data Reduction with C++ Algorithms","text":"<p>In this program you will analyze digitized data for pulses. The data comes from an actual digitizer that reports voltages (except all the data has been reversed by the hardware \u2013 you must negate all values before proceeding).</p> <p>The data is quite jagged, so for finding pulses we will use a smooth version instead. In a new vector, copy the first 3 numbers from the original, negated data. Then, starting with the 4th point of the file (position [3], of course), and ending with the 4th from the last, replace each of those points with the following weighted average of its neighbors (the current point in question is pointed to by \u201citer\u201d):</p> <p>(iter[-3] + 2*iter[-2] + 3*iter[-1] + 3*iter[0] + 3*iter[1] + 2*iter[2] + iter[3]) / 15</p> <p>Then copy the last 3 numbers over to fill out the smoothed vector. The smooth data will be better for detecting pulses</p> <p>You detect a pulse by looking for a rise over three consecutive points. If the rise (y<sub>(i + 2)</sub> - yi) exceeds vt, (for \u201cvoltage threshold\u201d \u2013 supplied by an input parameter), then a pulse begins at position i. After finding a pulse, move forward through the data starting at yi+2 until the samples start to decrease before looking for the next pulse.</p> <p>Write a program that process all files with a \u201c.dat\u201d extension in the current directory. There can be an arbitrary number of such files, and an arbitrary number of sample data values within each file. Print out where pulses are found and the \u201carea\u201d underneath the pulses. The area is merely the sum of the values starting at the pulse start and going for width samples (another input parameter), or until the start of the next pulse, whichever comes first. Use the original, unsmoothed data to compute the area, however. (The smooth data is just for detecting pulses.)</p> <p>There is one \u201cgotcha\u201d. Sometimes it is hard to distinguish \u201cpiggyback\u201d pulses (where a pulse is adjacent to another) from a wide pulse with some variation to it. To distinguish these, we use the following parameters:</p> Parameter Description drop_ratio A number less than 1 below_drop_ratio The number of values less than drop_ratio pulse_delta The gap between pulses to look for piggyback After you have found where pulses begin, check to see if the start of a pulse is followed by another pulse that starts within (&lt;=) pulse_delta positions of it. If this occurs, find how many points between the peak of the first pulse and the start of the second pulse (non-inclusive; only look at point strictly inside this interval) are strictly less than drop_ratio times the height of the peak of the first pulse. If the number exceeds below_drop_ratio, omit the first pulse from further consideration (it is not a pulse of interest). <p>Read all parameters from an .ini file like the following at program startup (specified in argv/argc; don\u2019t hard-code them):</p> <pre><code># Pulse parameters \nvt=100 \nwidth=100 \npulse_delta=15 \ndrop_ratio=0.75 \nbelow_drop_ratio=4\n</code></pre> <p>All parameters are necessary and no others are allowed. Enforce this. Lines beginning with \u2018#\u2019 are comments so ignore them. Blank lines are allowed and should also be ignored.</p> <p>If a .dat file has no pulses, ignore it. For those that do, report the pulse start positions and their areas in the following format (you should get these same answers):</p> <pre><code>as_ch01-0537xx_Record1042.dat: \nFound piggyback at 1020 \nFound piggyback at 1035 \n1050 (8228) \n\nInvalid file: test.dat \n\n2_Record2308.dat: \n1019 (3540) \n1030 (22916) \n\n2_Record3388.dat: \n1020 (43272) \n1035 (41264)\n</code></pre> <p>The second .dat file has pulses of interest at (zero-based) positions 1019 and 1030, with respective areas 3540 and 22916. The order of appearance of the .dat files is not important.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Analyze%3B%20Data%20Reduction%20with%20C%2B%2B%20Algorithms/#implementation-notes","title":"Implementation Notes","text":"<p>First get the program working, and then consider using lambda expressions and algorithms such as copy, transform, and accumulate, along with istream_iterators to avoid some loops and make the code shorter and more readable. How are you going to discover all the .dat files in the current directory? Use the std::filesystem. Also, verify that the .ini file is present and valid. Here are some sample runs for the invalid .ini files:</p> <pre><code>Charless-MacBook-Pro:prog-analyze chuck$ ./a.out error1.ini \nInvalid value for vt in error1.ini \nCharless-MacBook-Pro:prog-analyze chuck$ ./a.out error2.ini \nInvalid INI file: missing one or more keys \nCharless-MacBook-Pro:prog-analyze chuck$ ./a.out error3.ini \nInvalid or duplicate INI key: foo\n</code></pre> <ol> <li>Piecemeal growth. Get little pieces to work, one at a time </li> <li>You may start with loops: If you don\u2019t know how to do it with an algorithm, do it with a loop first. </li> <li>To smooth using a transform, you have to get the index (\u201citer\u201d) in the example. If you use a lambda expression, pass the integer by reference. Then you can get the address of it, and assign it to a pointer (something like: (int&amp; i) { int* iter = &amp;I; \u2026} Then you can use the pointer as if it\u2019s an array, as in the example smoothing code. (If you don\u2019t use a lambda, it\u2019s the same thing.) </li> <li>You do a lot with the index, or the position number. When you first find the index of the start of each pulse, you can do it with a for_each, but you have to go through some gyrations to get the index. But if you use a for-loop, you have the index already. So USE A FOR LOOP. The code is cleaner. </li> <li>I found it useful to build a little struct that holds things like the index and value of the start of a pulse, and the same thing for its peak. </li> <li>I found it useful to first find all the possible pulses, and then throw away the ones that happen before the peak of the previous one. To do so, I used uniq \u2013 but note that uniq reorders, but does not resize. </li> <li>In finding piggyback pulses, since you are looking at adjacent pulses, I used adjacent_find, because it gives me both pulses. (Just have it return false always.) </li> <li>Don\u2019t hard-code path names (\u201c.\u201d Should work)</li> </ol>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Analyze%3B%20Data%20Reduction%20with%20C%2B%2B%20Algorithms/#rubric","title":"Rubric","text":""},{"location":"Academic/C%2B%2B/CS-3370/P4%20Analyze%3B%20Data%20Reduction%20with%20C%2B%2B%20Algorithms/#file-io","title":"File I/O","text":"<p>Clean Code  No repeated code (refactor);  No unnecessary code.  Use std::filesystem. Simplest possible logic to fulfill program requirements; use algorithms and iterator adaptors to avoid needless loops (I only have 4 loops) to make code more readable; use lambdas and/or standard function objects to avoid writing needless function bodies; use std::accumulate to compute the area. </p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Analyze%3B%20Data%20Reduction%20with%20C%2B%2B%20Algorithms/#defensive-programming","title":"Defensive Programming","text":"<p>Exceptions thrown as requested </p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Analyze%3B%20Data%20Reduction%20with%20C%2B%2B%20Algorithms/#other","title":"Other","text":"<p>Proper use of command-line arguments as assigned.  Reasonable error checking when processing .ini file</p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Re-spec/","title":"P4 Re spec","text":""},{"location":"Academic/C%2B%2B/CS-3370/P4%20Re-spec/#strategy","title":"Strategy","text":"<p>This project used to be called analyze. We're just doing a bunch of data stuff in C++ for this project.</p> <p>Project is divided into parts:</p> <p>1) Read analyzation parameters (from .ini files) 2) Read the Data (from .dat files) 3) Negate the Data 4) Smooth the Data 5) Analyze the Data (Detect Pulses)</p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Re-spec/#main","title":"Main","text":"<p>Receive configuration file (gage2scope.ini) via argv[1]  (Lines with # means comment, ie ignore those lines)</p> <p>Read and Analyze all dat files in the current directory. We're only using 3, but your code should be able to handle any number of dats.</p> <p>Display error messages for invalid .dat, but continue Throw runtime errors for invalid .ini files.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Re-spec/#analyze-this-will-probably-be-a-class","title":"Analyze (This will probably be a class)","text":"<p>Copy data from the file into a vector. Remember to negate the data that goes into the vector</p> <p>Store parameters from ini file here (vt, width, pulse_delta, drop_ratio, below_drop_ratio)</p> Parameter Description drop_ratio A number less than 1 below_drop_ratio The number of values less than drop_ratio pulse_delta The gap between pulses to look for piggyback <p>Smoothing Iterate through your vector (for loop) and for every point starting from [3] and ending at 4th from the last, swap out the values in each index with a weighted average using the following formula:</p> <p>(iter[-3] + 2*iter[-2] + 3*iter[-1] + 3*iter[0] + 3*iter[1] + 2*iter[2] + iter[3]) / 15</p> <p>Pulse Detection Here is where you'll use the vt and width parameters you read from your .ini file. </p> <p>Iterate through your array of smooth values. For every point, check if the rise (array[i+2] - array[i]) exceeds vt. If it does, then a pulse begins at i. After finding a pulse, move forward starting at y<sub>(i + 2)</sub> until the values start to decrease before looking for a new pulse. </p> <p>Calculate the area by </p> <p>Piggy Backs You're given these values in your ini file</p> <p>pulse_delta=15 drop_ratio=0.75 below_drop_ratio=4</p> <p>You'll want to keep track of where your pulses are. </p> <p>If you have one pulse that starts at 0, and another that starts 10, we have two pulses that are within the pulse delta (15 in this case). </p> <p>Then you check all the points between the peak of the first pulse, and the start of the second pulse, and keep track of how many points are less than (drop_ratio * first_pulse_peak_height). If there are more than below_drop_ratio (4 in this case), then we can drop the first pulse from consideration.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P4%20Re-spec/#notes","title":"Notes","text":""},{"location":"Academic/C%2B%2B/CS-3370/P6%20Bit%20Array/","title":"P6 Bit Array","text":"<p>This assignment uses bitwise operations and operator overloading. You will let the vector class template do all of the memory management for you, however (whew!). Users look upon instances of this class as bit strings, indexed left-to-right like any other type of string. Do not think of these as numbers.</p> <p>Create a class named BitArray that holds a dynamic number of bits, packed into unsigned integers to save space. You will use a vector of integers to store the bits. It is up to you to process bits in the correct position inside the appropriate integer in the vector. You need to keep track of how many integers are needed to hold the bits in use. As bits are appended, you will have to expand to the vector if it is full (i.e., if all bits are currently used; vector::resize and/or vector::push_back are handy for this). In addition to providing the capability to set, reset, and test individual bits, this class provides some convenient operations commonly needed in bit-related applications.</p> <p>Remember, the bits appear to the user as if they are bit strings, not numbers, so if the BitArray b holds 1011, then the 0th, 2nd, and 3rd bits are 1 and b[1] is 0. This is unrelated to how we store them.</p> <p>We will make the underlying integer type of the array a template parameter, which defaults to</p> <p>size_t, so your class definition will look like this:</p> <p>template  class BitArray { \u2026 }; <p>On most platforms, this means that you can hold 32 or 64 bits in each array element (I\u2019ll call the individual integers \u201cblocks\u201d), but don\u2019t hard code 32 or 64 throughout your code. Instead, you can calculate the number of bits per block at compile time inside your class as follows:</p> <p>enum {BITS_PER_BLOCK = CHAR_BIT * sizeof(IType)};</p> <p>The macro CHAR_BIT is the number of bits in a byte, and is defined in , and is the number 8 on most platforms (duh). <p>The most efficient way to store bits in each integer may surprise you. To better understand the layout of a BitArray, suppose a BitArray object currently tracks 84 bits and sizeof(size_t) == 4</p> <p>bytes. Then BITS_PER_BLOCK would be 32 and the array would need</p> <p>ceiling(84 / 3)\u00a0=\u00a03\u00a0integer</p> <p>elements to hold 84 bits, and the \u201clast\u201d 12 bits in the third block would be unused. For simplicity in accessing bits, we will have bit 0 of the BitArray be bit 0 in the 0th integer block in the array, as the following diagram of bit positions illustrates:</p> <p>Although this layout does not reflect the logical order users visualize for a bit string, it makes easy work for you of setting and resetting bits by bitwise operations. Suppose, for example, a user has a BitArray object, b, and wants to set (i.e., turn \u201con\u201d) the bit in position 50:</p> <p>b[50] = 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Uses BitArray::operator</p> <p>To implement this, your operator[ ] needs to determine that this bit position resides in array element 1 (the second \u201cblock\u201d) and is bit number 18 offset from the right in that block. This, of course, is very easy:</p> <p>block = bitpos / BITS_PER_BLOCK; // 1 = 50/32 offset = bitpos % BITS_PER_BLOCK; // 18 = 50%32</p> <p>You can then define the appropriate mask and change the second block (blocks[1]) in your array.</p> <p>Naturally, users expect the bits to be processed as if they were stored positionally in increasing index order, left-to-right (so bit-0 is logically left-most), so any I/O functions (like operator&lt;&lt; and operator &gt;&gt;) should process them in that string-like order. See the driver tbitarray.cpp for examples.</p> <p>The class interface you need to implement follows.</p> <pre><code>template&lt;class IType = size_t&gt; class BitArray {\n\npublic:\n\n_// Object Management_\n\nexplicit BitArray(size_t = 0); explicit BitArray(const string&amp;);\n\nBitArray(const BitArray&amp; b) = default;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Copy constructor_ BitArray&amp; operator=(const BitArray&amp; b) = default; _// Copy assignment_ BitArray(BitArray&amp;&amp; b) noexcept;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Move constructor_ BitArray&amp; operator=(BitArray&amp;&amp; b) noexcept;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Move assignment_ size_t capacity() const;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// # of bits the current_\n\n_allocation can hold_\n\n_// Mutators_\n\nBitArray&amp; operator+=(bool);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Append a bit_\n\nBitArray&amp; operator+=(const BitArray&amp; b);\u00a0\u00a0 _// Append a BitArray_\n\nvoid erase(size_t pos, size_t nbits = 1); _// Remove \u201cnbits\u201d bits at a position_\n\nvoid insert(size_t, bool);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Insert a bit at a position (slide \"right\")_\n\nvoid insert(size_t pos, const BitArray&amp;); _// Insert an entire BitArray object_\n\n_// Bitwise ops_\n\nbitproxy operator[](size_t); bool operator[](size_t) const; void toggle(size_t);\n\nvoid toggle();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Toggles all bits_\n\nBitArray operator~() const;\n\nBitArray operator&lt;&lt;(unsigned int) const;\u00a0\u00a0 _// Shift operators\u2026_\n\nBitArray operator&gt;&gt;(unsigned int) const; BitArray&amp; operator&lt;&lt;=(unsigned int); BitArray&amp; operator&gt;&gt;=(unsigned int);\n\n_// Extraction ops_\n\nBitArray slice(size_t pos, size_t count) const;\u00a0\u00a0\u00a0 _// Extracts a new sub-array_\n\n_// Comparison ops_\n\nbool operator==(const BitArray&amp;) const; bool operator!=(const BitArray&amp;) const; bool operator&lt;(const BitArray&amp;) const;\n\nbool operator&lt;=(const BitArray&amp;) const; bool operator&gt;(const BitArray&amp;) const; bool operator&gt;=(const BitArray&amp;) const;\n\n_// Counting ops_\n\nsize_t size() const;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Number of bits in use in the vector_\n\nsize_t count() const;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// The number of 1-bits present_\n\nbool any() const;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _// Optimized version of count() &gt; 0_\n\n_// Stream I/O (define these in situ\u2014meaning the bodies are inside the class)_\n\nfriend ostream&amp; operator&lt;&lt;(ostream&amp;, const BitArray&amp;); friend istream&amp; operator&gt;&gt;(istream&amp;, BitArray&amp;);\n\n_// String conversion_\n\nstring to_string() const;\n\n};\n</code></pre> <p>Remember that all of your code should reside in a header file (bitarray.h; that\u2019s how templates work). If you refer to the BitArray type outside of the class definition, or if you create a local BitArray object, you must qualify it as BitArray&lt;IType&gt;.</p> <p>Note that all single-argument constructors (except the copy constructor) are explicit, so all operator functions can be members (except the stream operators, of course). Define the bodies of the stream operators as friends inside the class definition itself (this is important for templates!). Also, remember that if a stream contains 0100abc, then the stream input operator (&gt;&gt;) will overwrite its BitArray argument with 0100 and leave abs in the stream, just like reading numbers does.</p> <p>The first constructor initializes a BitArray object to the appropriate number of 0-bits if its argument is greater than zero. The second constructor expects a string consisting only of characters \u20180\u2019 and \u20181\u2019 and builds the corresponding BitArray object with the bits set in the same logical configuration. Throw a runtime_error (declared in ) if any other characters occur in the input argument string (even whitespace). An empty string is okay, though (just create an empty object). Throw a logic_error (also declared in ) if any out-of-range indexing is attempted anywhere. For the input operator, set the stream to a fail state if there are no valid bit characters to be read in the input stream (after skipping white space, of course). <p>Define a nested, private bitproxy class to accommodate intelligent use of operator[ ], as discussed in class (i.e., distinguish between b[i] = true and bool val = b[i]). See bits.cpp in the code set for hints on how to define it.</p> <p>The comparison operators should compare BitArray objects lexicographically (i.e., as if they were strings, in dictionary order). The rest of the member functions should be self-explanatory.</p> <p>There is a file, test.h, and a test program, tbitarray.cpp, in this zip file. Use these to test your code before you turn it in. Your output should be:</p> <p>move constructor  move assignment  move assignment move assignment  move assignment  move assignment  move assignment  Test Report:      Number of Passes = 69      Number of Failures = 0 </p> <p>You should have at least the number of move traces that I do above (you may have more).</p> <p>FYI, my bitarray.h is about 318 lines of executable code. </p> <p>Professional tip: Begin by implementing some private, low-level functions to handle individual bits in any position. For example, bool read_bit(size_t bitpos) (tests the bit in logical position pos) and void assign_bit(size_t bitpos, bool val) (either sets or resets the bit in logical position pos, depending on the value of val). These functions can then be used to great advantage in writing other functions.</p>"},{"location":"Academic/C%2B%2B/CS-3370/P7%20Pipeline/","title":"P7 Pipeline","text":"<p>Write a program with a concurrent pipeline architecture that has three steps:</p> <p>1) threads that produce 1000 random integers,  2) threads that filter out multiples of 3 from the integers produced in step 1, and 3) threads that groups the integers from step 2 into one of 10 files, as explained below. (See the figure after the next paragraph)</p> <p>The first two steps are similar to wait5.cpp. Place everything in a class named Pipeline, making sure that items related to thread communication are static members.  </p> <p>For the third step, create exactly 10 threads that retrieve integers from the second queue populated by the threads in Step 2, and group the numbers by their modulus (remainder) base 10. Each of these 10 \u201cgrouper\u201d threads will only remove a number from the front of the queue if its modulus corresponds to theirs. For example, grouper thread 0 will check to see if the first number in the queue ends in a 0 (i.e., it is congruent to 0 (mod 10)). If so, it will remove it from the queue and write it to its file (see below). Otherwise it does nothing. If the number at the front of the queue does not end with the proper digit, the thread leaves it in the queue for the appropriate thread to process. Each grouper thread does likewise for its respective remainder mod 10. The following diagram represents the architecture of this program.</p> <p>Step 1: Generate Random ints -&gt; Random Integer Queue -&gt; Step 2: Filter out multiples of 3 -&gt; Queue with no multiples of 3 -&gt; Step 3: Group into 10 files</p> <p>When you are done, print out a report like the following (your numbers will vary): Group 7 has 271 numbers Group 1 has 244 numbers Group 9 has 264 numbers Group 4 has 278 numbers Group 0 has 275 numbers Group 5 has 267 numbers Group 8 has 285 numbers Group 3 has 279 numbers Group 2 has 268 numbers Group 6 has 242 numbers  </p> <p>Note that the order of the group reports does not have to occur in order; each thread can simply report as it terminates. </p> <p>Use 4 producer threads and 3 filter threads.  </p> <p>Collect your 10 output text files and your source code, along with the execution output like what you see above, into a zip file for submission</p>"},{"location":"Academic/C%2B%2B/CS-3370/P7%20Pipeline/#resources","title":"Resources","text":"<p>https://cplusplus.com/reference/multithreading/</p>"},{"location":"Academic/C%2B%2B/CS-3370/P7%20Pipeline/#videos","title":"Videos","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Composite%20Pattern/","title":"Composite Pattern","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Composite%20Pattern/#project-6","title":"Project 6","text":"<p>The project is a fairly easy project if you are comfortable with the following topics: polymorphism, dispatching, recursion, parsing.</p> <p>The section can be broken down into three major parts: The Composites, the Parser, and the Explorer.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Composite%20Pattern/#composites","title":"Composites","text":"<p>Your project will consist of an interface, let's say, Node.</p> <p>In this case, File is a leaf type, and Directory is a composite type, ie, it's made up of many other objects. </p> <p>They will roughly mirror the command structure provided in the spec, that is, the Node interface will have the methods list, listall, chdir, up, etc.</p> <p>The big key is that since we're explicitly building a tree structure with our composites, the idea is that we will be traversing it recursively. In this light, the main benefit of this pattern is that we can treat each node as the same type (since they implement the same interface) and then we can treat everything polymorphically. This means that leaves are responsible for leaf behavior, and composites are responsible for composite behavior. We don't need to make distinctions or do type checks while interacting with the tree.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Composite%20Pattern/#parser","title":"Parser","text":"<p>The potentially toughest aspect of this project is building the tree from the file.</p> <p>I find it is MUCH easier to build the tree recursively than it is to build it iteratively. Iteration requires that you keep track of depth and a whole lot of details, while recursion makes use of the implicitly recursive structure that's already encoded in the directory file you're given.</p> <p>I recommend having a Parser class with a parser, and parse helper function. Parse() will mostly be responsible for opening the file, reading the lines into a list/array, and then invoking parse_helper() </p> <p>ParseHelper() is really straight forward.</p> <p>Step 1: Pop the first item off the list to get the \"item to add\"</p> <p>Step 2: Base Case: If it's a leaf (or it doesn't contain a \":\") then we simply return a File object.</p> <p>Step 3: Advance Case: If it's not a leaf, we create a Directory object, and then iteratively scan through the next lines. Each line, we check to see if they're indented more than our \"item to add\". If yes, we add them to the list of children for the composite by calling the parse_helper and adding the return of that as the child. Finally, we break, and return the current Directory object.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Composite%20Pattern/#explorer","title":"Explorer","text":"<p>Just do a while loop with a \"current\" pointer to whatever we're looking at in the tree, and a nested if statement or switch/match statement with the commands. On each command, print out the return value of calling the appropriate function on the \"current\" objec.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Course%20Outline/","title":"Course Outline","text":"<p>16 weeks minus spring break  1 Week for Midterms 1 Week for Finals</p> HW PR Qz RD Week End (Sunday) Event 1 Pattern Fish, Orders 1 Jan 12 2 Strat Puzzle 1 Strat 2 Jan 19 1 Strat 1 3 Jan 26 MLK JR (Jan 20)          [Holiday] 3 Observer 2 2 Observer 4 Feb 2 Drop (Jan 27) W Grade (Jan 28) 2 Obs 3 Decorate 5 Feb 9 Tuition (Feb 5) 3 Dec 3 6 Feb 16 4 Fact&amp;Sing 4 4 Factory &amp; 5 Singleton 7 Feb 23 Presidents Day (Feb 17)  [Holiday] 4 Comm 6 Command 8 Mar 2 5 Adpt/Faca 5 7 Adpt/Facade 8 Temp 9 Mar 9 MIDTERM ------------ -------- ------------------ 10 Mar 16 Spring Break (Mar 10-15) [Holiday] 5 Iter 6 9 Iterator Composite 11 Mar 23 Last to Drop (Mar 17) 7 12 Mar 30 6 Compos 12 Compound/MVC 13 Apr 6 6 Visitor 8 14 Apr 13 13 Conclusion 15 Apr 20 8 Design 16 Apr 27 End (Apr 22) / Final (Apr 24-30) <p>Strat Observe Decorator Factory Singleton Command Adapter Facade Iterator Composite Proxy Visitor</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Final/","title":"Final","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Final/#patterns","title":"Patterns","text":"<p>Command</p> <p>Template Method</p> <p>Facade</p> <p>Adapter</p> <p>Iterator</p> <p>Composite</p> <p>Visitor</p> <p>Null Object</p> <p>MVC</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Final/#what-to-know-about-them","title":"What to know about them","text":"<p>For these patterns be familiar with the following:</p> <p>What is the primary purpose of this pattern? </p> <p>What are secondary benefits, if any?</p> <p>What kind of pattern is it? Creational, structural, behavioral?</p> <p>What are key words associated with this pattern? For example, observer pattern uses keywords like Observer and Observable, notify and update, subscribe and unsubscribe. Command has key words like sender/invoker, receiver, command. </p> <p>What is the general structure of their UML diagram like when describing the general flow of the pattern?</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Final/#principles","title":"Principles","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Final/#the-principle-of-least-knowledge-law-of-demeter-talk-only-to-your-friends","title":"The Principle of Least Knowledge / Law of Demeter: Talk only to your friends","text":"<ol> <li>Each unit should have only limited knowledge about other units: only units \"closely\" related to the current unit.</li> <li>Each unit should only talk to its friends; don't talk to strangers.</li> <li>Only talk to your immediate friends.</li> </ol>"},{"location":"Academic/Design%20Patterns/CS-3450/Final/#hollywood-principle-dont-call-us-well-call-you","title":"Hollywood Principle: Don't call us, we'll call you","text":"<p>With the Hollywood Principle, we allow low-level components to hook themselves into a system, but the high-level components determine when they are needed, and how. In other words, the high-level components give the low-level components the \u201cdon\u2019t call us, we\u2019ll call you\u201d treatment.</p> <p>In other words, the template method pattern allowed us to write in \"hooks\" or spots where methods from a lower level class could be called. That lower level class is responsible for getting the job done, but it doesn't make all of the calls. The higher level template class does, and appropriately calls the lower level class when its specific methods are needed. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Final/#single-responsibility-principle-a-class-should-have-only-one-reason-to-change","title":"Single Responsibility Principle: A class should have only one reason to change","text":"<p>This principle is concerned with the same problems that we encountered in chapter 1 with the principle \"encapsulate what varies.\" But, It's more related to determining how we perform that encapsulation. </p> <p>\"Another wording for the Single Responsibility Principle is: Gather together the things that change for the same reasons. Separate those things that change for different reasons.\"</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/","title":"Midterm Study Guide","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#principles","title":"Principles","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#encapsulate-what-varies","title":"Encapsulate What Varies","text":"<p>The parts of your code that are likely to change can be pulled aside into their own classes/modules. This allows us to avoid messing with other code that doesn't need to change. Additionally, many times, code that changes can be better identified as another class or type of thing, which lends itself well to encapsulation.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#favor-composition-over-inheritance","title":"Favor Composition over Inheritance","text":"<p>Classes consist of data and functions to operate on them. Generally, it's a bad idea to have a single class that's responsible for defining all of the behavior it needs. A car consists of an engine, which can be defined as an object unto itself with its own specification. The car can then use the engine, but it doesn't really need to know how it operates. </p> <p>This principle doesn't mean to never use inheritance. Inheritance is still wildly useful for defining families, but it can paint us into a corner, especially in languages with single inheritance, or in instances where two supertypes share similar properties that can conflict.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#program-to-an-interface-not-an-implementation","title":"Program to an interface, not an implementation","text":"<p>Program to a supertype. We can leverage polymorphism, one of the basic key features of object orientation. If we design all of our classes in a way where they share common functionality, they can all be treated as that supertype, which means we can interact with our objects abstractly. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#strive-for-loose-coupling","title":"Strive for loose coupling","text":"<p>Loosely coupled objects require very little knowledge of eachother which means that when you change one, it generally doesn't affect the other. This is the main point of this principle. When we make changes to our code, we want to avoid breaking our whole codebase. Sometimes it's unavoidable, but generally, if we keep most of the other design principles in mind, they can help us design loosely coupled classes. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#classes-should-be-open-for-extension-closed-for-modification","title":"Classes should be open for extension, closed for modification","text":"<p>Focus on the areas that change. By following general OOP guidelines, you'll be able to properly identify areas of your code that will generally remain the same. By removing the parts that change, and encapsulating them, you can generally obey this rule. There's overhead that comes with this in the form of more abstraction, and more classes usually, but it allows for better flexibility and neater maintenance. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#dependency-inversion-principle","title":"Dependency Inversion Principle","text":"<p>SOLI(D)</p> <p>Depend upon abstractions, not concrete classes</p> <p>At first, this principle sounds a lot like \u201cProgram to an interface, not an implementation,\u201d right? It is similar; however, the Dependency Inversion Principle makes an even stronger statement about abstraction. It suggests that our high-level components should not depend on our low-level components; rather, they should both depend on abstractions.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#dont-repeat-yourself","title":"Don't Repeat Yourself","text":"<p>This one is a pretty small principle, but the general idea is that we don't want to write redundant code. It's a waste of time, and if that code needs to change, we have to be precise about changing it everywhere it occurs, otherwise things can break. Therefore, we generally encapsulate this kind of code. If similar code is needed everywhere, it makes sense to have that code come from a single source, and if it's likely to change, then encapsulating it helps us to obey Encapsulate What Varies.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#patterns","title":"Patterns","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#strategy","title":"Strategy","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#observer","title":"Observer","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#decorator","title":"Decorator","text":"<p>I was wrong, decorator is in the exam, but the question was really vague until I thought about it. That's been corrected.</p> <p>Just remember that your decorator takes the form of</p> <p>Interface/Common Type. (Output)</p> <pre><code>class Output(ABC):\n    def write(self, s):\n        ...\n</code></pre> <p>Subclass that does something. (StreamOutput)</p> <pre><code>class StreamOutput(Output)\n...\n    def write(self, s):\n        self.sync.write(s)\n</code></pre> <p>Decorator that implements the interface, and has a member for wrapping other objects of that interface type. (BracketDecorator)</p> <pre><code>class BracketDecorator(Output):\n    def __init__(self, o : Output):\n        self.wrappee = o\n\n    def write(self, s):\n        self.wrappee.write(\"[\" + s + \"]\\n\")\n</code></pre> <pre><code>def main():\n    s = StreamOutput(sys.stdout)\n    s = BracketDecorator(s)\n</code></pre>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#factories","title":"Factories","text":"<p>How do we make factories?</p> <p>Remember that there are 3 factories. Simple, Method, Abstract. </p> <p>Simple factory is more of an idiom, and just refers to the encapsulation of runtime decision making about class creation into a separate class. Generally, you'll have one single family of related objects.</p> <p>Factory method is more about providing an abstract method that can be defined in subclasses to create necessary objects, so that the class itself can determine what kind of objects it needs created at runtime.</p> <p>Abstract factory is about having many families of related objects, and encapsulating the creation of related objects into a family of factories. Decision making can be done in main or wherever to determine the types of factories you might need, but the idea is encapsulating many families of objects, and then creating a family of factories that are able to create related objects. Think of the 3x3 matrix representation of Furniture organized by Art Style.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#singleton","title":"Singleton","text":"<p>How do we make a singleton?</p> <p>Private constructor, private static class instance, public/global GetInstance method.</p> <p>GetInstance acts like our constructor and is responsible for either returning the static instance if it exists, or creating a new object, assigning it to the static instance, and then returning the instance.</p> <p>Benefits / Stuff we get for free</p> <p>Lazy instantiation. We're able to defer object creation until later. This can save resources like time and space. It also saves us in instances where we sometimes create an object but don't actually need it. </p> <p>Problems</p> <p>Multithreading:</p> <p>Why is multithreading a problem with this pattern?</p> <p>Three ways to fix:</p> <p>1) Plain ole synchronization/locking     Just throw a normal lock around the check for an instance. Can cause bad performance, but if it's not a high traffic area, don't sweat it. Focus on optimization later.</p> <p>2) Eager Instantiation     We define the static instance to have an instance at compile time. This has its pros because the object is ready to go, no resource management at all, but it takes away from the benefit of this pattern, which is lazy instantiation.</p> <p>3) Double-check locking     This allows you to potentially avoid locking the resource altogether. Synchonization has overhead, so doublechecking can help quite a bit. You may end up only hitting the lock once, and any other time is a plain O(1) conditional.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Midterm%20Study%20Guide/#oo-basics","title":"OO Basics","text":"<p>Abstraction</p> <p>Encapsulation</p> <p>Polymorphism</p> <p>Inheritance</p> <p>There will be a question about Inheritance and overriding, and the problems that can occur with expected output. I've provided some files to play with in the Canvas Announcement.</p> <p>Object Slicing in C++</p> <p>Why Slicing doesn't Happen in other language</p> <p>Method Hiding</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/","title":"P3 Decorator Re spec","text":""},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#decorators","title":"Decorators","text":"<p>This re-spec is longer than the original, but I go into more detail on how the features can/should be implemented. Read the original specification first, and then read this for clarifications if needed.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#project-spec","title":"Project Spec","text":"<p>You are given 4 files in the project. If you are using C++, you can use the .h files, if you're using Java, you can use the Output/StreamOutput.java. Everyone else will need to re-write these in their respective language. That shouldn't be daunting, they're very small classes.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#output","title":"Output","text":"<p>This is your common interface/abstract class that is shared between decorators and decoratables. Specifies the following methods:</p> <ul> <li>Write(t : Any)</li> <li>WriteString(s : String)</li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#streamoutput","title":"StreamOutput","text":"<p>This is your concrete decorate-able. In this project, we're only using one concrete. This is analogous to the Coffee types in the chapter on decorators. Only, we're just using one class rather than multiple subclasses.</p> <p>Members:</p> <ul> <li> <p>sink</p> <ul> <li>This is a reference to an ostream object that can be written to. (will be standard out)  Defines the following methods:</li> </ul> </li> <li> <p>Write(t : Any)</p> <ul> <li>writes an object to the sink</li> <li>the java example invokes the writestring method and passes t.toString() to get the string representation.</li> </ul> </li> <li>WriteString(s : String)<ul> <li>writes a string to the sink</li> </ul> </li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#decorator-base","title":"Decorator Base","text":"<p>This is where your real work begins. You will create a class that extends/implements the Output class. So it will have the same methods as Output.</p> <p>If your Decorator Base is just an interface, you must ensure that each concrete class that implements the interface has a field/member (whatever keyword applies) to store the wrapped object.</p> <p>If your Decorator Base is an abstract class, go ahead and make the abstract class have a field that is your referenced decorate-able.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#decorator-subclasses","title":"Decorator Subclasses","text":"<p>Member:</p> <ul> <li>object_to_decorate -&gt; Reference to the thing you're wrapping/decorating<ul> <li>For typed languages, make sure it's of type Output.</li> </ul> </li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#bracketoutput","title":"BracketOutput","text":"<p>From Original Spec: Surrounds each line with square brackets, and adds a newline to each.</p> <p>This sublcass will likely be the easiest and a good starting point for trying out your decorators.</p> <p>For both Write and WriteString you'll be doing something similar to the dungeons&amp;patterns demo. </p> <p>write(\"[\") write(t) write(\"]\\n\")</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#lineoutput","title":"LineOutput","text":"<p>From Original Spec: this precedes each write with the current line number (1-based) right-justified in a field of width 5, followed by a colon and a space.(Don\u2019t add a newline.)</p> <p>Keep track of line number in this class, add the line number and spacing and stuff directly to the t parameter you passed in. </p> <p>Invoke your object_to_decorate.write/writestring method and pass the modified t string/stream object as the parameter.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#teeoutput","title":"TeeOutput","text":"<p>From Original Spec: writes to two streams at a time; the one it wraps, plus one it receives as a constructor argument</p> <p>This one is mildly confusing, but fear not. You'll just be passing your parameter t along to the object_to_decorate.write/writeline as normal.</p> <p>For the extra stream, you'll want a member that is a reference to an ostream, call it tee_stream. You'll assign your paremter t to this tee_stream object as well.</p> <p>This tee_stream reference will be used to write to a file. </p> <p>In short, your TeeOutput will have members object_to_decorate, which is type Output, which through method chaining will reach the ostream object \"sink\", and then it will have this other ostream object tee_stream which exists only in TeeOutput. </p> <p>In main, you can pass an ostream to a file output as your constructor parameter for teestream.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#filteroutput","title":"FilterOutput","text":"<p>From Original Spec: writes only those objects that satisfy a certain condition (unary predicate), received as a constructor parameter.</p> <p>This part can be the most confusing especially if the term predicate is new to you. I can promise you it's not though! Unary predicates simply take a single argument, perform some boolean logic on it, and return true or false. These methods can be passed as arguments in languages where functions are first class citizens.</p> <p>Filter output will take a predicate function reference in its constructor and save it to a member. That function can then be used in your write and writestring methods to determine if you should invoke object_to_decorate.write/writestring</p>"},{"location":"Academic/Design%20Patterns/CS-3450/P3%20Decorator%20Re-spec/#main","title":"Main","text":"<p>In your main, you should create / do the following:</p> <ul> <li>A StreamOutput instance<ul> <li>name it whatever you want</li> <li>pass cout for c++, stringwriter for Java, sys.stdout for python, etc as parameter for your constructor. </li> <li>Since StreamOutput will be the core of your decorated objects, everything will end up going down to your StreamOutput where it will write whatever was passed to your decorator from the text file into the console.</li> </ul> </li> <li>An input stream <ul> <li>This will be used for reading lines</li> </ul> </li> <li>ask for input file</li> <li>decorator menu<ul> <li>while loop</li> <li>list out which decorators</li> <li>when a number is selected, make a new decorator instance, and pass the older decorate-able as a parameter, as well as whatever other constructor parameters are needed, and then reassign the old variable to the new value. At the start, your StreamOutput instance will be fed to a new decorator, and the name of the variable will be reassigned from the StreamOutput, to whatever the new decorator is</li> </ul> </li> <li>Write with decorator<ul> <li>For this part, just do a while loop using your inputstream, and feed lines from it into your decorator.write method.</li> </ul> </li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/UML/","title":"UML","text":""},{"location":"Academic/Design%20Patterns/CS-3450/UML/#class-diagrams","title":"Class Diagrams","text":"<p>Class Lucid Chart</p> <p>A class diagram consists of 3-4 parts</p> <p>For members, we can use + for public, - for private, and # for protected members. Static members can be underlined</p> <p>Relationships https://en.wikipedia.org/wiki/Class_diagram</p>"},{"location":"Academic/Design%20Patterns/CS-3450/UML/#use-case-diagrams","title":"Use Case Diagrams","text":"<p>Use Case Lucid Chart</p>"},{"location":"Academic/Design%20Patterns/CS-3450/UML/#sequence-diagram","title":"Sequence Diagram","text":"<p>Sequence Diagram Youtube Sequence Lucid Chart</p> <p>Sequence diagrams have a timeline that moves from top to bottom.</p> <p>Actors include anything from users to external systems that might interact with a system.</p> <p>A lifeline is an element of the system that will be interacted with during the lifespan of a sequence.</p> <p>Messages show how the different lifelines and actors interact. They usually have a block that follows a lifeline that indicates a certain amount of time passed for a given message or event</p> <ul> <li> <p>Synchronous messages: Solid Arrow... waits for a reply. Responses to a synchronous message are usually dotted lines.</p> </li> <li> <p>Asynchronous message: Solid arrow... Doesn't need a reply</p> </li> <li> <p>Create Message: Shows the spawning of a new element. Usually labeled with \\&lt;\\&lt;create&gt;&gt; and a dotted arrow to the element being created</p> </li> <li> <p>Delete message shows when to destroy an element. Solid arrow to an X on the lifeline.</p> </li> <li> <p>Self message is just a loop arrow on the same lifeline</p> </li> <li> <p>Reply messages are usually dotted arrows</p> </li> <li> <p>Found message: from unknown source. Dot indicating unlisted element with an arrow to a lifeline.</p> </li> <li> <p>Lost message: to unknown source. Arrow from lifeline to a dot.</p> </li> <li> <p>Guards: Circle or square indicating some kind of conditional or situation that determines whether or not a sequence will execute.</p> </li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/UML/#activity-diagram","title":"Activity Diagram","text":"<p>Activity Lucid Chart</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Visitor%20Pattern/","title":"Visitor Pattern","text":"<p>The Visitor Pattern is fraught with varying implementations and philosophies depending on your language. In some ways, the way people think about the pattern and implement it, can turn it into something of an anti-pattern.</p> <p>Let's see what the core purpose of the Visitor Pattern is and then we can dive into issues, and implementations.</p> <p>From Design Patterns: Elements of Reusable Object-Oriented Software by the GoF:</p> <p>Visitor Pattern: Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Visitor%20Pattern/#main-idea","title":"Main Idea","text":"<p>The Visitor Pattern's core idea is to add behavior to elements of an object structure. This insinuates adding behavior onto a composite structure of some kind. We're adding behavior to objects without modifying their class definitions. This allows us to obey the open/close principle. Great stuff.</p> <p>There are some core issues with the pattern however, and the common solutions to those issues end up often being mistaken as the solution that the pattern provides.</p> <p>The visior pattern is usually implemented with an Accept method in the elements, which takes a visitor, and then inside invokes the visit method of the visitor, and passes self to the visit() method.</p> <p>class SomeObject     accept(visitor)         visitor.visit(this)</p> <p>class Visitor     visit(object)         //do something</p> <p>There is a problem that arises with this approach however. In languages (especially earlier languages when the pattern was invented) that only support single dispatch, the above pseudocode doesn't work. The dispatcher won't be able to determine which method to call if there are several overloads, especially if there's an overload for a common base class between elements.</p> <p>So the solution is to do something like this</p> <p>class SomeObject     accept(visitor)         visitor.visitSomeObject(this)</p> <p>class Visitor     visitSomeObject(object)         //do something     visitAnotherObject(object)         //do something else</p> <p>This approach avoids function overloading, and instead defines a set of functions with different names, so that we don't have to worry about which method the dispatcher chooses. </p> <p>Then, all elements of the composite structure implement the accept interface, or what I would call being a \"visitable\" as an object might be an \"iterable\"</p> <p>However, in this solution, we face an inherent issue. We're now disobeying the open/close principle, even if only slightly. </p> <p>If we decide to use visitor from the get-go it might not be a problem, but if we decide we want to add behavior to our objects later, we now have to go implement the accept method for every single class. This is time-consuming, and arduous, especially if you have a very large heterogeneous composite structure. So now we're modifying our original structure.</p> <p>For single-dispatch classes, we more or less have to concede to slightly breaking open/close principle even though that's what we were initially striving to maintain from the beginning.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Visitor%20Pattern/#multiple-dispatch","title":"Multiple Dispatch","text":"<p>Now, the Accept/Visit dichotomy is almost inherently tied to the concept of the visitor pattern, and in almost all scenarios, you'll find people who talk about the necessity of the accept method, and you'll see the accept method being used even in languages where the above issues don't apply. Let's take a look at an example of the visitor with Multiple Dispatch</p> <p>class Object1:     accept(Visitor)         visitor.visit(this) class Object2:     accept(Visitor)         visitor.visit(this) class Visitor:     visit(ObjectA)         //do something     visit(ObjectB)         //do something else</p> <p>In the above example, with multiple dispatch, we'll likely be dispatching the method call based on a number of factors.</p> <p>We'll look at the order, arity, and types of parameters passed, we'll look at the type of object that the message is being sent to, and we'll look at the name of the function.</p> <p>In a single dispatch situation, usually the method that gets dispatched is based on the type of the receiving object. So with visitor.visit(obj), the dispatcher will look at visitor to decide the function. In languages like python, function overloading just refers to the last defined function, in other languages, it may defer to the first, in any case, it doesn't matter what the arguments of the function are, because it won't look at them to resolve it.</p> <p>However, in a multiple dispatch scenario, it will be able to determine the correct method to call based on many factors revolving around the message being sent.</p> <p>So now we can do something like this</p> <p>class Object1:     accept(Visitor)         Visitor.visit(this) class Visitor:     visit(Object1)         //do something     visit(Object2)         //do something else</p> <p>In this scenario, we can define a generic visit method, which makes defining our accept a little bit easier. We can just call the visit method of the visitor without having to specify a bunch of different unique names depending on the type of object we want to visit.</p> <p>This is where the next issue with the visitor pattern comes in. If we're in a multiple dispatch scenario where we're able to determine the correct method to call based on the type of arguments being passed in, this renders the accept method completely useless. However, this isn't so much of an issue with the visitor pattern as it is with the dogma and interpretations of programmers who have implemented the visitor pattern in their varying languages.</p> <p>So, if we have multiple dispatch, then we can do something like</p> <p>class Object1:     ...</p> <p>class Visitor:     visit(Object1)         //do something     visit(Object2)         //do something else</p> <p>Now we can truly obey the open/close principle. We no longer need to modify our original classes, and we can just add behavior to the object in question.</p> <p>However, in my experience, programmers will assert that this isn't a proper visitor pattern.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Visitor%20Pattern/#traversal","title":"Traversal","text":"<p>Now, revisiting the intent of the Visitor Pattern, the idea is that we should be adding behavior to elements of an object structure. This is the core idea. Especially in the context of ASTs and general graphs, the visitor pattern is very popular. In the GoF book, it even discusses ASTs as one of the main examples for usage. One of the main use cases of the Visitor Pattern is to not only add behavior to a set of elements, but also to manage traversal of a tree structure. While this two-for-one behavior can be useful, it does end up confusing the purpose of the pattern in my opinion, and violates the single responsibility principle.</p> <p>There are two places we can define the traversal of the tree in the visitor pattern. One of the more common ways is to define it in the accept method. However, this violates single responsibility principle. </p> <p>The accept method in the case of an element is to make it visitable by emulating double dispatch. </p> <p>If we put the traversal logic inside of the visitor, we're still, once again, disobeying the single responsibility principle. </p> <p>The purpose of the visit method in the case of the visitor is to perform some operation on or with the element in question, thus extending the element's behavior.</p> <p>In either scenario, we should be avoiding adding traversal behavior to either the visitable, or the visitor. </p> <p>Iterators are in charge of iteration, and then we can perform logic on that Iterable via other means.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Visitor%20Pattern/#circular-includes-forward-declaration","title":"Circular Includes / Forward Declaration","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Visitor%20Pattern/#solutions","title":"Solutions","text":"<p>For single dispatch scenarios, we have to concede to following the accept/visit paradigm. It isn't an ideal scenario, however, we end up getting better behavior out of our classes by following open/close as best we can. It's not perfect, but neither is single dispatch.</p> <p>However, for multiple dispatch scenarios, there really is no reason why we should be using the accept/visit paradigm. The terms accept/visit don't even really lend themselves to what we're trying to do with the class in question. </p> <p>In both scenarios, we should also not be tying the traversal to the algorithm that we're adding to the classes. I suggest we instead define a Visitable interface which would define something similar to our accept method. </p> <p>On one hand, accept ends up adding weird behavior to our objects, but on the other hand, by putting traversal properties here, it means that the visitor doesn't have to be aware of the underlying family structure of the node it's operating on. On the other hand, the idea is to add behavior to elements, which means that we're extending the behavior of nodes whose behavior we should be aware of to begin with. </p> <p>I suggest we should abandon the pattern altogether in the case of multiple dispatch scenarios, and instead define a recursive iterator, which could follow any depth first or breadth first algorithm or whatever you want, and then while iterating through for each object, call the Extender's method on the currently iterable object. This could be implemented via strategy pattern, or a pure visitor scenario. This would also eliminate the need to define an accept method in every single class that makes up your tree. This would also clear up the terminology issues that arise with the visitor pattern.</p> <p>The use of accept also violates DRY. The problems with the pattern are myriad, and there seems to be a plethora of misunderstanding regarding the topics of dispatching, and general confusion when confronted with the redunant feeling of having accept be called on an object so that visit can be called with the object as an argument, and then potentially calling accept within the visitor on the children of the object being visited. It's a mess overall, and while it's a nifty way to approach things, I think we can do better.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/","title":"Week 1","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#syllabus-and-what-this-class-is","title":"Syllabus and what this class is","text":"<p>Principles and Patterns of Software Design. AKA, how to make your code not suck.</p> <p>This class is cultural. This class is more of a reading/writing, philosophy, linguistics, architecture, history, design class than it is a \"coding\" class. Obviously we do a great deal of coding, but that's the hammer, not the house. </p> <p>It's meant to be experiential. Don't get me wrong, chatgpt is great for helping when it comes to implementation, don't get me wrong, but for the rest of the class, it's really about digging into the problems of software, experiencing them, getting a handle on it, and knowing when or when not to apply patterns.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#myths-dogmas-and-misunderstandings","title":"Myths, Dogmas, and Misunderstandings","text":"<p>Don't be Dogmatic</p> <p>OOP vs Functional</p> <p>Design Patterns</p> <p>What is OOP?</p> <p>What are patterns?</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#take-this-fish-and-look-at-it","title":"Take this fish and look at it","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#wheels","title":"Wheels","text":"<p>In school, our main goal is often to practice by reinventing the wheel. This allows us to gain exposure to solving problems and gaining the same insights that countless others before us have. However, in real life, patterns help us to avoid reinventing the wheel for every problem. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#alexander","title":"Alexander","text":"<p>TimeStamps</p> <p>5:52 - WW2 and modern environments</p> <p>12:40 - The root: A continuous moral preoccupation with under what circumstances is the environment good. </p> <p>Does that moral component exist in our software? Patterns may make a program better, but it's not the same thing. Do we go far enough so that our program or the thing that's being created is morally profound? Actually has the capacity to play a more significant role in human life? Will it make human life better? Whether or not this is obtained is questionable, but it's the intent. This is what we should try to pursue.</p> <p>Does the pattern language produce a coherent environment?</p> <p>17:12 Patterns are a neat format, but can lack the other dimensions. The moral element, and the ability to create a coherent structure.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#patterns-from-a-pattern-language","title":"Patterns from A Pattern Language","text":"<p>159 - Light on Two Sides of Every Room</p> <p>179 - Alcoves</p> <p>203 - Child Caves</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#quality-without-a-name","title":"Quality without a name","text":"<ol> <li>It is the process that brings order out of nothing but ourselves. It can't be captured, only invited.</li> <li>There's a central quality that is the root criterion of life and spirit in a person, building, or wilderness. This quality is objective and precise, but can't be named</li> <li>The search for this quality in ourselves is the crux of our own personal story. Ie, finding ourselves.</li> <li>Finding this quality in buildings and towns relies on finding the patterns that occur there to give it its character.</li> <li>These patterns are interlocked in geometric patterns in a space. These patterns are the atoms and molecules of a place.</li> <li>The patterns can be dead or alive. Patterns that are alive let our inner forces loose and set us free, while dead patterns keep us trapped, locked in inner conflict.</li> <li>The more living patterns a space has, the more the space becomes alive. It glows and has a self sustaining fire.</li> <li>When a building or space has this fire, it becomes a part of nature. Like ocean waves and blades of grass, its parts are governed by the endless play of repitition and variety created in the precense of the fact that all things pass. This is the quality itself.</li> </ol> <p>A pattern language is a gate to the quality without a name 9. The quality in buildings cannot be made, only generated indirectly by the actions of ordinary people, in the same way a flower can't be made (this was written in the 70s) 10. People can shape buildings by using a pattern language. A pattern language can give each person the ability to create an infinite variety of new and unique buildings, in the same way regular language gives the power to create infinite and unique sentences 11. The patterns aren't confined to village and farm society. All acts of building are governed by a  pattern language. </p> <p>Everything is expressed through communication. Math is language to represent phenomena. Programming is language to instruct a machine. Natural language is how we express ourselves and convey ideas. Language is our natural interface for communication. Everything emits, and part of what makes sentience, is the ability to receive what is emitted. Language ultimately has nothing to do with this agelessness, but instead just releases what is native to us. Language helps us learn the same lessons that nature speaks to us over and over again.</p> <p>Patterns can be alive or dead, and a pattern language can be shared. Since language expresses those patterns that are native to us, this means that not all patterns are good, but rather we can use the positive patterns to invite a timelessness. Alternatively, anti-patterns exist, which will ultimately result in the death of a thing. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#places-that-speak-to-your-humanity","title":"Places that speak to your humanity","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#software-that-speaks-to-your-humanity","title":"Software that speaks to your humanity","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#application-of-feeling","title":"Application of Feeling","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%201/#state-mandated-urbansuburban-planning","title":"State Mandated Urban/Suburban Planning","text":"<p>Looking back to the ideal communist city</p> <p>Soviet Architecture</p> <p>Rise of the suburbs</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/","title":"Week 11","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/#to-do","title":"To-do","text":"<p>This week we have the Iterator pattern for the upcoming project, and we have a project about the Composite pattern coming up soon as well.</p> <p>We'll talk about these but we'll end up looping back and hitting the template method pattern in more detail because it's a really useful pattern.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/#iterator-pattern","title":"Iterator Pattern","text":"<p>At this point, whether you've known it or not, you've been interacting with iterators in just about every language you've used in your major so far. </p> <p>2420 is the first real brush with iterators that you've had though. You may not remember, but when implementing your linked list, you created an iterator. Check out this spec from python. </p> <p>https://wiki.python.org/moin/Iterator</p> <p>Most languages have details on implementing iterators. It's a pretty important feature when it comes to creating data structures / containers. </p> <p>https://learn.microsoft.com/en-us/dotnet/csharp/iterators</p> <p>https://cplusplus.com/reference/iterator/</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/#implementation","title":"Implementation","text":"<p>Looking at the python wiki about iterator, we see in their example iterator how the iter method returns self, while the iterator returns whatever value needs to be returned. Their random iterator is sort of silly, but we can see the structure. </p> <p>The idea is that in order for something to be iterable, it must return an iterator. </p> <p>To be an iterator, a class must implement the next method which returns some value, ideally from a collection.</p> <p>In the simplest case, the class itself is also an iterator. But why would this be a bad idea? What kinds of things can go wrong here?</p> <p>Why is it better to encapsulate the iterator?</p> <p>What about iter? Is there a way we can make our classes a bit more robust when it comes to iteration?</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/#generators","title":"Generators","text":"<p>Some languages support generators. All generators are an iterator. They make use of the yield keyword, and through language implementation, the state of the function is held in memory. Generators are wildly useful, but are a bit less of a pattern, and more of an idiom of a language that implements it. Still good to know them.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/#single-responsibility-principle","title":"Single Responsibility Principle","text":"<p>A class should have only one reason to change. </p> <p>Remember one of our previous principles, open to extension, closed to modification. Remember that our principles are strong foundational guidelines, but they aren't laws. And scenarios like this are where we can bend the open/close principle. </p> <p>Why do we allow the pattern to change in this context though? What are some ways we can handle an iterator better? </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%2011/#composite-pattern","title":"Composite Pattern","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/","title":"Week 2","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#summary-from-last-week","title":"Summary from last week","text":"<p>Architecture that has motives other than to give life to its inhabitants results in the kinds of architecture we've seen post WW2, whether it's the copy-paste suburbs, or communist block style housing, we see architecture that does not live and give life.</p> <p>Peter Eisenman</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#memes-and-emperors-new-groove","title":"Memes and Emperor's New Groove","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#squeaking-doors-and-shiny-objects","title":"Squeaking Doors and Shiny Objects","text":"<p>Patterns that give life Patterns that give death</p> <p>Juice</p> <p>Game design</p> <p>Software design</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#a-word-about-oop","title":"A word about OOP","text":"<p>First: Like Alexander said, a pattern language is adapted to its particularities.  di</p> <p>Message Passing</p> <p>Objects and Inheritance</p> <p>Encapsulation</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#modeling-software-patterns-avoiding-extra-work","title":"Modeling, Software Patterns, avoiding extra work","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#strategy-pattern","title":"Strategy pattern","text":"<p>Define a family of algorithms, encapsulate them, and make them interchangeable. Strategy lets the algorithm vary independently from the client that uses it.</p> <p>DRY principle. Don't Repeat Yourself.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#design-principles","title":"Design Principles","text":"<p>Identify the parts of your project that vary and separate them from what stays the same</p> <p>Program to an interface, not an implementation</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%202/#links","title":"Links","text":"<p>Alan Kay on the meaning of OOP</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%203/","title":"Week 3","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%203/#p1-strategy-queue","title":"P1: Strategy Queue","text":"<p>The queue class for project 1 wants us to write a generic class that separates the storage from its interface. </p> <p>The interface consists of the following methods: add, get, remove, size, clear. This interface partly defines the queue ADT.</p> <p>Disallow copy and assignment of queue objects. I.e, if we were using C++, we'd use the delete keyword on our copy constructor and assignment operator.</p> <p>ChangeImpl is our method for swapping out objects for underlying storage. This is the same kind of method that we see in the strategy pattern in the reading that takes a concrete data type, and then assigns the concrete data type to a field of the queue class.</p> <p>For our implementation, we're going to create our own hierarchy of custom storage types. You don't have to go all out with these like you might in 2420, but these storage types represent the \"family of algorithms\" that the strategy pattern looks to encapsulate. </p> <p>Remember that in the strategy pattern, we have a class that is \"composed\" of an instance of an encapsulated algorithm. </p> <p>To clarify, yes, we could simply swap out the underlying storage with built in types, but this would really only leverage composition, without fully practicing the concept of the strategy pattern. This is why we're spinning our own data structures. </p> <p>The premise is simple though, we'll have a pointer to whatever our data type is, and the type of that pointer will be the generic QImpl type. Our list and stack data types will implement the QImpl interface. </p> <p>To make things easy, remember that we're just creating a mapping from our high level class (ie interface) to the underlying implementation. So, Queue has a method add, QImpl will also have an add method. Queue will call the add method of its QImpl pointer, which will in turn actually add the item to the data structure.</p> <p></p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%203/#strategy-pattern-applied","title":"Strategy Pattern Applied","text":"<p>Remember that we're encapsulating what varies, favoring composition over inheritance, avoiding repeating ourselves, and programming to an interface, not an implementation. These properties together yield a lot of different patterns, but in certain contexts, those principles take different forms.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%203/#it-can-be-used-in-complex-systems","title":"It can be used in complex systems","text":"<p>Quake Defrag Hangtime</p> <p>Counter Strike Surf</p> <p>Titanfall Air Strafe</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%204/","title":"Week 4","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%204/#observer","title":"Observer","text":"<p>The general problem solved by the observer is a matter of interrupting/polling</p> <p>Principles</p> <p>We still want to generally adhere to the principles we covered in chapter 1: Encapsulate what varies, composition over inheritance, program to an interface, DRY. </p> <p>Our new principle is to strive for loose coupling in our designs. We want our classes and methods to rely on each other and external data as little as possible.</p> <p>Definition </p> <p>A one-to-many dependency between objects so that when state for one changes, the rest are updated accordingly</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%204/#pubsub","title":"Pub/Sub","text":"<p>Very similar to the observer, but adds an additional layer between the subjects/observers</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%205/","title":"Week 5","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%205/#decorators","title":"Decorators","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%205/#definition","title":"Definition","text":"<p>Attach additional behavior to an object dynamically.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%205/#things-were-avoiding","title":"Things we're avoiding","text":"<p>Monolithic structures.</p> <p>This includes monolithic inheritance structures, and monolithic super classes.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%205/#design-principles","title":"Design Principles","text":"<p>Open for extension, closed for modification. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%205/#main-features","title":"Main Features","text":"<p>Structurally similar to strategy pattern. Composition based.</p> <p>Context and Decorators both implement the same interface. </p> <p>While structurally similar, the intent is different (that's the main difference between most patterns). The idea is to not just delegate actions to components, but to also add additional behavior.</p> <p>But it's not just a matter of adding additional behavior, it's a matter of separating and encapsulating what varies from what stays the same.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%206/","title":"Week 6","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%206/#decorator-pattern","title":"Decorator Pattern","text":"<p>We have a family of classes that we want to be able to decorate, this would be some kind of abstract base class, and then concrete subclasses.</p> <p>We then create a separate family of decorators, that have their own hierarchy as decorators. They have some abstract base class, and then concrete subclasses. The key is that the abstract base class, is also a subclass of the decorate-ables. In other words, our decorator abstract base class / interface, inherits from the decorate-able base class.</p> <p>The decorators have some member that will be used to store a reference to the thing it wants to decorate or wrap. If you're using interfaces, then every subclass will likely need to define a reference</p> <p>The decorator's purpose is to augment the behavior of the decorate-able. This means that it will have at least one of the same methods of the decorate-ables (this is overriding). We then write whatever logic we want inside of this method, and at some point we invoke the wrapped or decorated object's same method.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/","title":"Week 7","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#creational-patterns","title":"Creational Patterns","text":"<p>Provides mechanisms for the flexbile creation of objects </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#factory-patterns","title":"Factory Patterns","text":"<p>The Factory Pattern isn't actually just one pattern. There are a variety of factories that have different implementation features, but they are all responsible for making new objects in a flexible manner.</p> <p>So far, most of our patterns have their own unique benefits but one of the main reasons we keep implementing patterns is to overcome obstacles that arise when we change certain aspects of our code. We've use interfaces, composition, and polymorphism to help us write code that is adaptive to change. This goes back to the principles of chapter 1. However, change is ever-present. This chapter focuses on hard coding new objects, and where change might impact us, and more importantly, how we end up repeating ourselves in our object creation, which violates DRY.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#simple-factory","title":"Simple Factory","text":"<p>Creates a class with a create(string s) method that receives a string for input, and using conditionals, creates and returns an object of a specified type.</p> <p>From the book:  The Simple Factory isn\u2019t actually a Design Pattern; it\u2019s more of a programming idiom. But it is commonly used, so we\u2019ll give it a Head First Pattern Honorable Mention. Some developers do mistake this idiom for the Factory Pattern, but the next time that happens you can subtly show you know your stuff; just don\u2019t strut as you educate them on the distinction.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#factory-method","title":"Factory Method","text":"<p>Rather than creating a class dedicated to creation, subclasses instead implement an abstract method that handles the creation of their own objects. We're not really worrying about code reuse, and we're not as concerned about user input or anything like that for this one. This pattern is more concerned about creating objects that make sense for the creating object. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#abstract-factory","title":"Abstract Factory","text":"<p>It feels a bit circular, but this one takes properties of the other two patterns to create objects. It can get kind of big, that's what it's used for. It's meant for when you have a lot of objects that need to be created.</p> <p>It expands upon the simple factory in the sense that we're going back to having a class that's responsible for building objects. But rather than having a single class with a lot of internal logic, we declare a few base classes that encapsulate a family of related objects.</p> <p>So if we're building a car, we might have one factory build engines, and it's responsible for 4 cylinder, 6 cylinder, and 8 cylinder engines. Another factory might make seats, and it builds leather and cloth seats. </p> <p>The factories don't have to always make the same \"brands\" either. You could potentially have a factory that builds a multitude of products that are intended for different consumers. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#singleton","title":"Singleton","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#what-the-singleton-is","title":"What the singleton is","text":"<p>Singleton pattern allows us to create only one instance of an object. The common approach is the add conditional logic to a constructor or initializer, or to create a private constructor that is invoked through a helper method.</p> <p>For languages like C++, Java, C#, your go-to strategy will be to</p> <ul> <li> <p>make a private static member variable (pointers work best in C++) to an instance of the class</p> </li> <li> <p>make a private constructor</p> </li> <li> <p>make a public GetInstance() method that's responsible for checking if the reference or pointer is null, and if so, invoke the private constructor and set the static member.</p> </li> </ul> <p>Python is a bit different. It doesn't have standard privacy and its init processes are a bit different. In Python, we have 3 methods at our disposal during the creation of an object. We have __init__, __new__, and __call__ that we can use. When we invoke a python constructor like</p> <p>x = some_class(), call, then new, then init are invoked. Since none of these are private, the standard is to</p> <ul> <li> <p>make a class variable for your instances (just don't use self.)</p> </li> <li> <p>and then check if a class instance exists during call or new.</p> </li> </ul> <p>Python references</p> <p>https://www.geeksforgeeks.org/singleton-method-python-design-patterns/</p> <p>Classic Python Singleton</p> <pre><code>\nclass Singleton:\n\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            return cls._instance\n\n# Usage\n\na = Singleton()\nb = Singleton()\n\nassert a is b # True\n\n</code></pre> <p>Metaclass Singleton</p> <pre><code>\nclass SingletonMeta(type):\n\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Singleton(metaclass=SingletonMeta):\n    pass\n\n# Usage\n\na = Singleton()\nb = Singleton()\n\nassert a is b # True\n\n</code></pre>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#pros-and-cons","title":"Pros and Cons","text":"<p>Why use the singleton as opposed to static classes?</p> <p>Typically static classes don't support any kind of inheritance. This makes a static class rigid in some aspects, but what we really want is flexibility.</p> <p>Singletons are live objects that can hold state and are dynamic. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%207/#summary","title":"Summary","text":"<p>The big trick with these factory patterns is really understanding how interfaces work, their role in defining types of objects, and what they mean to us in terms of polymorphism.</p> <p>More specifically, it comes down to how much typing you want to implement. Are you gonna have one factory that makes a single family of objects, are you gonna have multiple types of objects that need their own specific versions of objects, or do you want to have factories that specialize in multiple different types of variants of one kind of product (one might do 3 kinds of engines, another factory might do 3 kinds of chairs, etc)</p> <p>(simple, method, abstract respectively)</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/","title":"Week 8","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/#command-pattern","title":"Command Pattern","text":"<p>Command pattern at its simplest decouples actions from their requests. This is done by creating a standalone intermediate object that gets sent by a sender/invoker, and passes along the request to a receiver.</p> <p>Senders are loaded with command objects</p> <p>Command objects are invoked with an execute method that calls the appropriate method on the receiver</p> <p>Receiver objects need no change besides maybe having a reference to a command. They do the actual job that's done and that's it.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/#project-4","title":"Project 4","text":"<p>This project may appear overwhelming but don't worry, it's not all that bad. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/#parsing","title":"Parsing","text":"<p>The grammar for the command language is small. </p> <pre><code>&lt;command&gt; &lt;database id&gt; &lt;key&gt; [&lt;value&gt;] | B | E\n</code></pre> <p>This means there are 3 potential inputs.</p> <p>Either a B indicating a beginning for a macro, an E indiciating an ending for a macro, or a command line.</p> <p>It's the Command, which database, a key, and then an optional value for the key. </p> <p>Your CS projects generally involve reading some kind of string. There are a number of approaches you can do but a nice easy one is to do the following:</p> <ul> <li>Readline, and then check the first element of the string you read. Check if B or E, otherwise it's a command, and then you can access the string by elements to set up the commands.</li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/#structuring","title":"Structuring","text":"<p>You should have modules that are structured in a commandish form, you'll have a module for commands, one for your receiver, one for your invoker. </p> <p>Databases are receivers. They're pretty simple, just make a dictionary, and support methods for adding, updating, and removing items from the dictionary. Keep an id member variable so you can look for specific databases.</p> <p>Commands are just that, commands. They're hooked up a specific instance of a database, and they invoke the proper methods on a database.</p> <p>You'll make a sender class that will be responsible for parsing the data. It should likely have a queue (use whatever container you like) for storing the commands that are read in, and then an undo stack that gets populated when the command queue is executed.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/#queuing","title":"Queuing","text":"<p>Just keep a container, and every time you read a command, enqueue it. When you're done reading the file, you can just execute the whole queue.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%208/#undo","title":"Undo","text":"<p>While your commands are being executed from the queue, the commands should probably be pushed to an undo stack. That way, when you're done, you can just roll through the undo stack and pop everything off.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%209/","title":"Week 9","text":"<p>Midterm, Adapter, Fa\u00e7ade, NullObject.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%209/#midterm","title":"Midterm","text":"<p>There's a separate study guide for the midterm over at Midterm Study Guide</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%209/#adapter","title":"Adapter","text":"<p>Adapter is a really straight forward pattern. It leverages composition, so structurally, it'll feel the same as strategy pattern, but the intent is different.</p> <p>Let's say we have a set of classes with a common interface. The interface has a method \"do_something().\" A bunch of classes implement that interface just fine, but then we have a class or something from another library, that virtually does the same kind of stuff, but slightly differently. Maybe it's method is \"do_something_cooler().\" These objects are incompatible, and in the instance we want to treat this ExternalClass the same way as our InternalClass, it doesn't work. So we can fix this by making an adapter. </p> <pre><code>ExternalClassAdapter(InternalClass):\n    def __init__(self, external):\n        self.adapted_object = external\n\n    def do_something():\n        self.adapted_object.do_something_cooler()\n</code></pre> <p>It can simply be as simple as invoking the other method's call, or doing some modifications to make the return value of that call fit the return expected.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%209/#facade","title":"Fa\u00e7ade","text":"<p>This pattern is sort of the basis of an API. Generally with an Application Programming Interface, the idea is to provide a a common interface. Interface in this context means a simplified, standardized \"control panel\" or interface that a developer can interact with. It's an interface for the human rather than the language. An API is usually a much more simplified entry point to an underlying library that allows developers to interact with library code without having to know the underlying implementation.</p> <p>Fa\u00e7ade aims to do this by providing a single entry point for a lot of potentially complex engine code. Examples that we might see relate to doing some kind of video conversion or something. There are a lot of processes that happen under the hood, that an end user doesn't really need to or want to know about. So rather than leaving the responsibility up to the user, we create a Facade. It lets us effectively just make a single call, and that call is responsible for kickstarting a lot of processes. So ConvertVideo(video, format) kicks off a chain reaction of all the necessary conversions from codecs to audio. But the end user just had to go ask the cashier what they wanted, and that's all they need to worry about.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%209/#nullobject","title":"NullObject","text":"<p>NullObject is beyond cool, but potentially dangerous. It helps us to resolve situations with potentially dangerous null references.</p> <p>Consider a tree structure that we're traversing recursively. With a simple linked list like you did in 2420, or even a homogeneous tree structure like in a BST, we have one single type of node object, and it's fairly straight forward to see when we're at the end of a branch. We check for null, and if it's null we do nothing or return whatever. If it's not null, we do some work.</p> <p>Now imagine you have a huge tree consisting of all kinds of object types, as one might find in an AST for a compiler. Or perhaps you even have a file explorer like we'll see with future project/homework. It may be difficult and dangerous to do nullchecks or to assume work will be done. Nullchecks are a pain to write and account for, especially as we add new object types. So instead of doing nullchecks every time, we can simply create a NullObject. It implements the same base as all of the other objects in the tree, but it's basically a dummy. It safely does nothing, and even allows us to return when it's encountered.</p> <p>NullObject isn't necessarily a onestop shop for removing nullchecks. We may still need to do certain checks or behaviors if something is null. And sometimes, if something is null, a part of our program has gone terribly wrong. However, in the context of trees especially where a branch just abruptly ends, we can expect that kind of behavior, and gracefully handle it with nullobjects that can do work. Additionally, because we've encapsulated nullness in an object, we can do better encapsulated logical behavior around our null values, rather than handling that across every class that might or might not be null.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Week%209/#principle","title":"Principle","text":"<p>Principle of least knowledge. Talk only to your immediate friends.</p> <p>Also known as the law of Demeter.</p> <p>If we follow the original concepts of OOP, especially in regards to encapsulation, this rule is almost a given.</p> <p>Each unit should have only limited knowledge about other units: only units \"closely\" related to the current unit.</p> <p>Each unit should only talk to its friends; don't talk to strangers</p> <p>Only talk to your immediate friends.</p> <p>This makes sense if we think about encapsulation. Remember the original definition of encapsulation. Encapsulation is information hiding, according to SmallTalk. We normally think of it as just bundling related data, but it's specifically bundling data and hiding it. </p>"},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/","title":"Wrapping Up","text":""},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/#what-was-the-point-of-all-of-this","title":"What was the point of all of this?","text":"<p>Well, you learned design patterns for object oriented programming languages. But what does that really do for us? It can definitely help us write neater, better encapsulated, and easily extendible code, but the lessons should extend beyond just your OOP skills.</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/#what-did-alexander-want-to-do","title":"What did Alexander want to do?","text":"<p>Christopher Alexander wanted to create patterns that could beget other patterns, so that you could craft a specific pattern language for a specific job.  So, he set out to create a language that would allow architects to speak in a language that would naturally and recursively lead to the creation of a space that gives its inhabitants \"life.\" </p> <p>He argued that determining if something was good or not (i.e. it gives life) was something that was objective and precise (contrary to modern beliefs), but all but impossible to capture.</p> <p>His work was a testament to this belief, and captured the attention of software develops who believed that this philosophy would benefit the software space. At the end of the day, patterns in a software sense don't really fulfill Alexander's philosophy. Most patterns don't beget other patterns, and subsequently, pattern languages in programming don't fully exist. But it's the idea of patterns that's the basis for writing better software, even if the analogy gets a bit stretched out.</p> <p>The reality is this, humans are inherently good at recognizing patterns, and we can try to use these patterns to create tools of all kinds. So, we can recognize patterns, and the principles of good design across multiple spaces, and up and down the scope of abstraction. It's all about scope and resolution. Both in the creative space, and in the high level meta space. What are we trying to achieve, and how do we cater those tools to work within that scope?</p> <p>A non-exhaustive list of things to consider when designing something, (software, team management, a painting, a story, whatever)</p> <ul> <li> <p>Pattern recognition is just one cognitive tool in the human toolbelt. </p> </li> <li> <p>Humans are emotional creatures. </p> </li> <li> <p>Human perception is less about reality, and more about culture, senses, memory, and emotion, among many other things. Very little of what we experience is \"real.\" Yet, how we experience things is at a high level very \"real.\" </p> </li> </ul>"},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/#orders-of-ignorance-knowledge-and-emotion","title":"Orders of Ignorance, Knowledge and Emotion","text":"<p>Scientific Process</p> <p>Emotional Processing and Memory</p> <p>Emotional Processing and Memory 2</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/#human-design","title":"Human Design","text":"<p>color perception</p> <p>Even the differences between these two websites</p> <p>order of viewing an application</p> <p>Traffic light optical illusion</p> <p>my.uvu.edu and its terrible new layout</p> <p>\"Experience is critical, for it determines how fondly people remember their interactions. Was the overall experience positive, or was it frustrating and confusing? When our home technology behaves in an uninterpretable fashion we can become confused, frustrated, and even angry\u2014all strong negative emotions. When there is understanding it can lead to a feeling of control, of mastery, and of satisfaction or even pride\u2014all strong positive emotions. Cognition and emotion are tightly intertwined, which means that the designers must design with both in mind.\" - Don Norman, The Design of Everyday Things</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/#leadership","title":"Leadership","text":"<p>Winger</p> <p>This old app</p> <p>Jim McCarthy (Author of Dynamics of Software Development) Quotes</p> <p>Vision \u201cIn my opinion, a leader\u2019s empathetic perception of the psychological state of his or team is the beginning of what we call vision. If the leader can then resonate with the team\u2019s complex emotional state\u2014identify with it, articulate it, and give the whole constellation of feeling and thought a visible, concrete reality in his or her own personal voice or gesture\u2014the boundaries among the individual team members and between the team members and the leader will collapse. A wave of unity will wash over the entire community.\u201d</p> <p>Control \u201cBefore the program manager can be worth anything to the team, he or she must be thoroughly disabused of the notion that he or she has any direct control. Fortunately, in the healthy team, no one needs to take any special steps to see that this happens: the program manager\u2019s teammates will quickly disabuse him or her of any delusions of control he or she may be harboring.\u201d</p> <p>Authority \u201cThe goal as far as authority is concerned is to make every team member an authority himself or herself. You want the team to have authority, both individually and collectively. That\u2019s where the manager\u2019s ultimate authority comes from.\u201d</p> <p>Honesty \u201cThe goal on a software development project is not to have the correct plan in advance but to make the right decisions every day as things that were unknown become known. If you\u2019ve been pretending that you know something you don\u2019t, you won\u2019t be able to take advantage of the true information when it becomes known. You\u2019ll also be left in the uncomfortable position of having been proven wrong by emergent information.\u201d</p> <p>Integrity \u201cIntegrity is about truth. The only thing harder than telling the truth is knowing the truth. When all around me are confirming one another\u2019s fantasies and magically converting wishes to reality; when I have only the vaguest sensation that something is not quite right; when conventional wisdom and group think are strangling a new, emergent reality being born in me, can I know, and tell, my truth?\u201d</p> <p>Emotion \u201cIn addition to calling for an understanding of the dynamics of the technology, leadership in software development requires a high degree of sensitivity to the human nature of the enterprise, an awareness of the underlying drives and emotions that determine the team\u2019s behavior.\u201d</p> <p>Burn-out \u201cThe basic issue in developer burn-out is that the individual\u2019s passion, essential to producing great software, has been consumed or has become misdirected or is otherwise unavailable. The role of passion in software development can\u2019t be overstated... When the passion burns out, the compulsive interest in pouring oneself into an invisible yet coherent and dynamic stream of bits goes with it.\u201d</p>"},{"location":"Academic/Design%20Patterns/CS-3450/Wrapping%20Up/#conclusion-of-some-kind","title":"Conclusion of some kind?","text":"<p>Reality mostly matters less than how people perceive it. People are emotional. People are largely irrational. But these things aren't necessarily negative things. These are real facets to humanity. Engineers who balk at these facets of life are missing the big picture. </p> <p>Creators of any field can ignore the humanity of others, but at the end of the day, when we're creating something meant to be used and consumed by others, we need to relinquish control of that thing, and consider the emotions, reality, and humanity of the people interacting with it.</p> <p>This all goes without saying in my opinion, but a lot of people really do miss out on this, or they get so narrowed in they forget. Nothing about what Alexander set out to accomplish is exactly profound, but more of a reminder of things that we each already know. You know this stuff, you just have to remember it.</p> <p>At the end of the day, all of these software patterns you learned, and all of these principles are just an extension of that knowledge, applied to writing object oriented code. The pattern won't make your code good, but good application of a pattern might.</p>"},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/","title":"Class Logistics","text":""},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#important-dates","title":"Important Dates","text":""},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#university-dates","title":"University Dates","text":"Date Event August 29 Waitlist and Open Registration Ends August 30 Last Registration Begins ($45 Late Fee) September 13 Last Day to Withdraw with no penalty"},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#holidays","title":"Holidays","text":"Date Event September 4 Labor Day"},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#class-dates","title":"Class Dates","text":"Date Event August 26 Quiz 0 August 29 Unit 1 Participation and Challenge Activities August 31 Unit 1 Homework September 2 Quiz 01"},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#notes-and-todos","title":"Notes and ToDos","text":""},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#day-1","title":"Day 1","text":"<ul> <li> <p>Introduction</p> <ul> <li>About Me<ul> <li>From West Virginia</li> <li>Mission in Brazil</li> <li>Graduated in CS Spring 2022</li> <li>A mini career in law</li> <li>Game Dev </li> <li>Guitar</li> <li>Favorite movies</li> <li>Favorite food</li> <li>Games</li> </ul> </li> <li>About You<ul> <li>Name</li> <li>Major</li> <li>Hobbies and tell us a little bit about it</li> <li>Favorite Food</li> <li>Maybe a favorite book, movie, show, game, band whatever</li> </ul> </li> </ul> </li> <li> <p>Go over syllabus</p> </li> <li>Tips For Success<ul> <li>Contact me early if troubles arise. Please. Like actually.</li> <li>Get enough sleep. I can't emphasize this enough. If anyone practices an instrument, you'll see this become abundantly clear. Your brain needs rest, and does a lot of disk cleanup and solidifying during this time.</li> <li>Take adequate rests and make sure you're fueling your brain and body with what it needs</li> </ul> </li> <li>How should we redistribute the 10% from discussions (we can also keep discussions if it's preferred)</li> <li>How do we prefer Exams? Proctorio, Testing Center, In Class? -&gt; Probably Proctorio</li> <li>Take this fish / Orders of Ignorance</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Class%20Logistics/#day-2","title":"Day 2","text":"<p>Patch Notes: - Got rid of discussions (still need to reallocate points) - Got rid of some videos that Teng had posted since they were specific to his course - Simplified the module layout by including a supplemental section for each module - Reduced the requirements to move onto the next module Known Issues: - Potential issue with canvas links to zybooks - </p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%201%20Prep/","title":"Exam 1 Prep","text":"<p>The Midterm will have tables that have laws of propositional logic and rules of inference, quantifier instantiation and generalization, mathematical definitions, as well as language of proofs. </p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%201%20Prep/#midterm-multiple-choice-hints","title":"Midterm Multiple Choice Hints:","text":"<p>A good number of questions come from chapter 1. Many require that you translate abstract language to symbolic form (a sentence to p-&gt;q for instance). Many are about logical equivalence.</p> <p>One Question with the table from 1.9. Remember the rows are x, columns are y. Hint, it's not the OR statement.</p> <p>Direct Proof: Takes the form p -&gt; c.</p> <p>Contrapositive: !Q -&gt; !P or !c -&gt; !p. There's a question that asks about the contrapositive of a statement. Be sure to remember that since we're negating, when we apply DeMorgan's law, we have to flip symbols. e.g. And becomes Or.</p> <p>Proof by exhaustion: Demonstrate with every element in the domain.</p> <p>Proof by Contradiction: Assume the theorem is false, and show that in doing so, you can reach conclusions that aren't true.</p> <p>Proof by Cases: Select a subset of elements in the domain. For instance, if the domain is real numbers, a case could be where all x are even numbers, and all y are odd numbers.</p> <p>Logical Equivalence: Have the tables handy, but when in doubt, draw out the truth table.</p> <p>One question asks about 1 of the 4 common errors in proofs outlined in 2.3</p> <p>Nested Quantifier question. Just be sure to read it out loud. For example, UxEy P(x, y) reads For every x, there is a y where ...</p> <p>Be familiar with, Inverse, Converse, Contrapositive, specifically what form they take.</p> <p>There's one question with DeMorgan's Law that feels like a curve ball. Don't overthink it, your first hunch is probably right. Just apply DeMorgan's to the expression, and remember to flip all the signs after distributing the negation into the expression (as per DeMorgan's).</p> <p>What is the difference between a predicate and proposition? How do we turn predicates into propositions? Or in other words, what are some ways that we turn P(x,y) into a proposition?</p> <p>A few questions will have answers that look the same unless you're careful and notice their logical operators. I have a tendency to skim over equations, so be sure to read the signs.</p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%201%20Prep/#midterm-written-question-hints","title":"Midterm Written Question Hints:","text":"<p>Two questions will ask you to turn a sentence into its symbolic form. An important part to remember is that when talking about Nested Quantifiers, you have to account for the fact that if x and y have the same domain, you generally need to take into consideration that for whatever predicate, like x emailed y, x and y can refer to the same person or whatever thing in the domain. From 1.10, How could we use logic to express that everyone sent an email to everyone else without including the case that everyone sent an email to himself or herself? The idea is to use the conditional operation:\u00a0(x \u2260 y) \u2192 M(x, y).</p> <p>One logic puzzle where you have to infer something. Keep in mind that the two are making contradictory statements.</p> <p>One will ask you to prove that something is even. This question should be answered in the theorem format, not the symbolic format. Be familiar with the types of proofs from chapter 2.</p> <p>One question will ask you to establish the validity of an argument. Convert the statements into their symbolic form, then use rules of inference to show the conclusion. Remember that an argument is a conjunction of all hypotheses that yields a conclusion. Remember that we're not replacing anything in the argument. We introduce the hypotheses in our steps table, and then use rules of inference to draw new conclusions, and ultimately end at a conclusion.</p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%202%20Prep/","title":"Exam 2 Prep","text":""},{"location":"Academic/Discrete%201/CS-2300/Exam%202%20Prep/#topics","title":"Topics","text":"<p>In-Degree / Out-degree</p> <p>Adjacency Matrix</p> <p>String Concatenation</p> <p>Set Partitions</p> <ul> <li>There's a question that asks you to figure out the representation of a set partition in the set builder notation. If you're iffy on set builder, you should still be fine, just think logically about how we represent equalities on a number line.</li> </ul> <p>Floor / Ceiling Functions</p> <p>Subsets</p> <ul> <li>Remember that if a set is an element of a set, the elements of that set are not elements of the main set.... A = {1, {2}} Then 2 is not an element of A, and {2} is not a subset of A. {{2}} is a subset of A.</li> </ul> <p>Set builder notation:</p> <p>Set Operations</p> <ul> <li> <p>Union = Combination of elements</p> </li> <li> <p>Intersect = Elements that are in common</p> </li> <li> <p>Difference = A - B = Elements only in A</p> </li> <li> <p>XOR / Symmetric Difference = Elements that are not in common</p> </li> <li> <p>Complement = Elements outside of the set.</p> </li> </ul> <p>Strings</p> <ul> <li> <p>3.6 Talks about string notation</p> </li> <li> <p>4.1 Talks about operations on strings</p> </li> </ul> <p>Functions:</p> <ul> <li> <p>g: R -&gt; R . g(x) = |x| </p> <ul> <li>g maps every real number to a real number, specifically it maps all real numbers to the absolute value of itself.</li> </ul> </li> <li> <p>One-to-one, onto, bijection</p> </li> <li> <p>Well-defined: all elements have one and only one mapping.</p> </li> <li> <p>Identity Function (4.5)</p> </li> <li> <p>Inverse of Functions</p> </li> </ul> <p>Logarithms</p> <ul> <li>One question on log expressions and equivalences</li> </ul> <p>Hasse Diagram</p> <p>Composition of Functions</p> <p>Composition of relations</p> <p>Equivalence Relation</p> <p>Partial, Strict, Total Orders</p> <p>Graph Powers</p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%202%20Prep/#written-questions","title":"Written Questions","text":"<p>Transitive Closure (4.5)</p> <ul> <li> <p>You'll be given a digraph, you need to be able to to determine the powers of the graph and show the transitive closure (basically the union of all the different powers of the digraph)</p> </li> <li> <p>Check out 4.5.4 PA to easily calculate the transitive closure</p> </li> </ul> <p>Adjacency Matrix, Boolean Matrix Multiplication (4.6)</p> <ul> <li> <p>Convert a digraph to an adjacency matrix</p> </li> <li> <p>Multiply the matrix against itself to find G2</p> </li> <li> <p>A x B would see you multiple r1 of A against c1 of B, then c2 of B, c3 of B, then move to r2 of A and so on. </p> </li> <li> <p>When performing the multiplication, you multiply the corresponding elements of rows and columns (r_1_1 and c_1_1, r_1_2 and c_1_2, etc) and then boolean add the results. In other words, if any of the multiplications result in a 1, you'll have a 1 for the resulting matrix coordinate. Row 1 and Column 1 correspond to index [1,1] in the matrix.</p> </li> </ul> <p>Power sets (2.2)</p> <ul> <li> <p>Remember that power sets is the set of every combination of elements in the set.</p> </li> <li> <p>Remember that the number of elements in a power set (cardinality) is 2^n. So if there are 3 elements in a set, the power set will have 2^3 elements.</p> </li> </ul> <p>Composition of Functions (3.5)</p> <ul> <li> <p>Functions map elements from a domain, to targets in the range (not necessarily every element of the range).</p> </li> <li> <p>If we compose one function of another function, the input into the composition will yield an output from the inner function, and then the output will be consumed as input for the outer function. g o f is g(f(x))</p> </li> </ul> <p>Inverse of Functions (3.4 &amp; 3.5)</p> <p>Set operations (2.3 &amp; 2.4)</p> <ul> <li>You'll be asked to perform some unions and intersect, and subtract sets from other sets.</li> </ul> <p>Identity Proof (2.5)</p> <ul> <li>You'll be given a cheat sheet in the appenix, and you'll just need to demonstrate using the form where you present known facts as hypotheses, then introduce identities, and show which lines you're applying the rules to. (See 2.5.3 PA)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Exam%203%20Prep/","title":"Exam 3 Prep","text":""},{"location":"Academic/Discrete%201/CS-2300/Exam%203%20Prep/#chapter-6-topics-integer-properties","title":"Chapter 6 Topics (Integer Properties)","text":"<p>Questions 1-7 from the Test 3 sample are very close to questions that will be on the test.</p> <p>Be aware of the Extended Euclid's Algorithm. You will be asked to find s and t.</p> <ul> <li>Modding negative numbers</li> <li>Congruency (6.2 definition: m divides (x-y))</li> <li>Prime Factorization (gcd, lcd)</li> <li>Decimal to Binary</li> <li>Base conversions (octal, hex, etc.)</li> <li>Modding LARGE values (remember the way exponents work to simplify the problem (fast exponentiation), and use 6.2.(2/4) for the equation for modular arithmetic)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Exam%203%20Prep/#chapter-7-topics-induction-and-recursion","title":"Chapter 7 Topics (Induction and Recursion)","text":"<p>Remember that in a sequence, the next value can be determined by multiplying the previous value by the common ratio. What this also means is that we can express all values in a sequence as being the initial value times the common ratio raised to an index. Additionally, the sum of all values can be expressed as common ratio raise to the power of n+1, minus 1.</p> <p>7.3</p> <p>PA 7.10.4.1 will be on the exam</p> <p>Questions about Common ratio, balanced strings, calls in a binary search, recursive definition with strings, sum questions.</p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%203%20Prep/#chapter-8-topics-counting","title":"Chapter 8 Topics (Counting)","text":"<p>Exercise 8.4.4 is featured on the exam.</p> <p>Binary Strings, and sequence of characters where there are no repeated neighbors.</p> <p>Exercise 8.12.20.b Is similar to a question on the exam.</p> <p>8.8 is useful.</p>"},{"location":"Academic/Discrete%201/CS-2300/Exam%203%20Prep/#written-response-questions","title":"Written Response Questions","text":"<p>Section 2 in the test exam has questions (22-25) that are very close to the exam. </p> <p>Be comfy with the strong induction example with money. </p> <p>Strong induction for proving a sum is equal to a closed form equation. </p> <p>Evaluate a Sum for some large number of iterations (7.3 has formulas for closed forms). </p> <p>Euclids Algorithm to find GCD and s and t (Extended Algorithm), remember, you're just working out the standard algorithm to completion, then backtracking by substituting numbers with expanded forms.  </p> <p>One question similar to Test 3 Sample Question 25 about cards. </p>"},{"location":"Academic/Discrete%201/CS-2300/Extra%20Resources/","title":"Extra Resources","text":"<p>Discrete Mathematics: An Open Introduction</p>"},{"location":"Academic/Discrete%201/CS-2300/FINAL%20REVIEW/","title":"FINAL REVIEW","text":""},{"location":"Academic/Discrete%201/CS-2300/FINAL%20REVIEW/#multiple-choice-topics","title":"Multiple Choice Topics","text":""},{"location":"Academic/Discrete%201/CS-2300/FINAL%20REVIEW/#chapter-10","title":"Chapter 10","text":"<ul> <li> <p>Lexicographic n-subset</p> </li> <li> <p>Lexicographic Order</p> </li> <li> <p>Combination Equality</p> </li> <li> <p>Solve A Sum with a Combination</p> </li> </ul> <p>Proof by contradiction theorem</p>"},{"location":"Academic/Discrete%201/CS-2300/FINAL%20REVIEW/#graphs-and-trees","title":"Graphs and Trees","text":"<ul> <li> <p>Tree with x nodes of y degrees</p> </li> <li> <p>Edge Connectivity of Kx,y tree</p> </li> <li> <p>Vertex Connectivity</p> </li> <li> <p>What properties satisfy a set 11.3</p> </li> <li> <p>Depth first search on a spanning K tree</p> </li> <li> <p>BFS Spanning Tree</p> </li> <li> <p>Pre-order Traversal</p> </li> <li> <p>Prim's Algorithm</p> </li> <li> <p>Prefix Tree 11.2.3</p> </li> <li> <p>Graph Height (Tic-Tac-Toe) 11.2.1</p> </li> <li> <p>Graph Degree</p> <p>1) K_ graph</p> <p>2) C_ graph</p> <p>3) Q_ graph</p> </li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/FINAL%20REVIEW/#written-questions","title":"Written Questions","text":"<p>There are 121.4 million people in the United States who earn an annual income that is at least $10,000 and less than $1,000,000. Annual income is rounded to the nearest dollar. Show that there are 123 people who earn the same annual income in dollars.</p> <p>Binomial Coefficient problem (9.2)</p> <p>Isomorphism function from G to G'</p> <p>Find the the adjacency list and the degree sequence for a graph.\u00a0 (For the adjacency list, please list them in alphabetical order.)</p>"},{"location":"Academic/Discrete%201/CS-2300/Logical%20Symbols/","title":"Logical Symbols","text":""},{"location":"Academic/Discrete%201/CS-2300/Logical%20Symbols/#logic-symbols","title":"LOGIC SYMBOLS","text":""},{"location":"Academic/Discrete%201/CS-2300/Logical%20Symbols/#conjunction","title":"Conjunction ( \u2227 )","text":"<ul> <li>Logical AND</li> <li>p ^ q can translate to (x AND y) or (x &amp;&amp; y)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Logical%20Symbols/#disjunction","title":"Disjunction ( \u2228 )","text":"<ul> <li>Logical OR</li> <li>Also known as Inclusive Or</li> <li>p v q can translate to (x OR y) or (x || y)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Logical%20Symbols/#exclusive-or","title":"Exclusive Or ( \u22bb )","text":"<ul> <li>The way we normally use or in English. One or the other.</li> <li>You can go to Tim's class, or you can be a loser (jk)</li> <li>Also seen as \u2295</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Logical%20Symbols/#negation","title":"Negation ( \u00ac )","text":"<ul> <li>Logical NOT</li> <li>Reverses the truth value of proposition</li> <li>If p is True then \u00acp is False</li> </ul> <p>Order of Operations Parenthesis, Negate, AND, OR</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/","title":"Week 01","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#day-1","title":"Day 1","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#introduction","title":"Introduction","text":"<p>Discrete Math is where you'll really start to get into the science aspects of computer science. It is a CS course after all.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#what-is-discrete-math","title":"What is Discrete Math?","text":"<p>Discrete math is a branch of mathematics that employs unique tools and disciplines like logic, graph theory, and combinatorics to analyze objects with a finite nature. These tools have practical applications in computer science</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#notes-for-module-1","title":"Notes for Module 1","text":"<p>Logic is formal reasoning with an emphasis on making precise statements.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#propositions-are-statements-that-are-either-true-or-false-they-are-the-most-basic-element-in-logic","title":"Propositions are statements that are either true or false. They are the most basic element in logic.","text":"<p>Questions are not propositions, but propositions can be an answer to a question.</p> <p>A proposition has a truth value which can be true, false, unknown, or some value in between (like an opinion)</p> <p>Important variables:</p> <p>Zybooks refers to p, q, r for our variables as opposed to x, y, z. It doesn't really matter but each set of mathematics has its own unique set of symbols, even if they're somewhat analogous. Read the questions carefully, I mix up p and q all the time</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#logic-symbols","title":"LOGIC SYMBOLS","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#conjunction","title":"Conjunction ( \u2227 )","text":"<ul> <li>Logical AND</li> <li>p ^ q can translate to (x AND y) or (x &amp;&amp; y)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#disjunction","title":"Disjunction ( \u2228 )","text":"<ul> <li>Logical OR</li> <li>Also known as Inclusive Or</li> <li>p v q can translate to (x OR y) or (x || y)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#exclusive-or","title":"Exclusive Or ( \u22bb )","text":"<ul> <li>The way we normally use or in English. One or the other.</li> <li>You can go to Tim's class, or you can be a loser (jk)</li> <li>Also seen as \u2295</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#negation","title":"Negation ( \u00ac )","text":"<ul> <li>Logical NOT</li> <li>Reverses the truth value of proposition</li> <li>If p is True then \u00acp is False</li> </ul> <p>Order of Operations Parenthesis, Negate, AND, OR</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#truth-tables","title":"Truth Tables","text":"<p>Entries in a truth table have 2^n rows. Each column has equal number of true and false entries. We can see alternating patterns of T and F. The main way to fill out a truth table is to fill the first column split in half, top half with T's, bottom half with F's.</p> <p>When evaluating compound propositions, we should evaluate individual expressions first. For instance NOT p AND (q OR r) can be broken down into an evaluation of NOT p as a unary expression, as well as the statement within parentheses as a binary expression. Not p has its own set of values, then the evaluation of q OR r yields its own set of values, and the results of those two distinct values can be evaluated as a final binary expression.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#conditional-statements","title":"Conditional Statements","text":"<p>A compound proposition that uses a conditional operation is called a conditional proposition, also known as a conditional statement.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#if-then","title":"If Then ( \u2192 )","text":"<ul> <li>p \u2192 q reads as if p then q</li> <li>proposition p is the hypothesis and proposition q is the conclusion</li> <li></li> <li>Evaluation of this proposition is true when p and q are both true, false if p is true but q is false.</li> <li> p q p \u2192 q T T T T F T F T T F F T </li> <li>Represents a contract. <ul> <li>If p is true, then the contract breaks when q is false.</li> <li>Doesn't have to be fair, only indicates a contract if p is fulfilled, then q HAS to be fulfilled. Says nothing about if p ISNT fulfilled.</li> </ul> </li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#converse","title":"Converse","text":"<ul> <li>if q then p</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#contrapositive","title":"Contrapositive","text":"<ul> <li>if not q then not p</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#inverse","title":"Inverse","text":"<ul> <li>if not p then not q</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#if-and-only-if-biconditional-operation","title":"If and Only If ( \u2194 ) Biconditional Operation","text":"<ul> <li>What we might traditionally think of with conditional logic or contracts</li> <li>p if and only if q, shorthand p iff q</li> <li> p q p \u2194 q T T T T F F F T F F F T </li> <li>I will mow your law if and only if you pay me: Statement is true if the lawn is mowed and I get paid, also true that if I don't mow the lawn, I don't get paid. If mow the lawn and don't get paid, contract is broken, if I get paid, but don't mow the lawn, the contract is also broken.</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#conditional-precedence","title":"Conditional Precedence","text":"<p>If parentheses are not given, then logical operators get precedence over conditional operators. When in doubt, just use parens.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#tautology-contradiction-equivalence","title":"Tautology, Contradiction, Equivalence","text":"p not p (q) p iff q T F F F T F <p>A Tautology means that all results are true, contradiction is all results are false. Equivalence is when two statements yield the same truth results.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#de-morgans-laws","title":"De Morgan's Laws","text":"<p>Logical equivalences that show how to distribute negation operations inside a parenthesized expression</p> <ol> <li>NOT (p OR q) \u2261 NOT p AND NOT q</li> <li>NOT (p AND q) \u2261 NOT p OR NOT q</li> </ol>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#day-2","title":"Day 2","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#topics","title":"Topics","text":"<p>Take This Fish/Orders of Ignorance - Logical Math     - https://www.youtube.com/watch?v=BrDyDQYRUxM         - Law of Excluded Middle From Standford         - Law of Excluded Middle         - Laws of Thought - Multi-state machines     - https://www.youtube.com/watch?v=fXwSFhUVFmE - Why use base 2?     - see above Go Over Exercises</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2001/#logical-math","title":"Logical Math","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2002/","title":"Week 02","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#day-1","title":"Day 1","text":"<p>Labor Day</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#day-2","title":"Day 2","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#predicates","title":"Predicates","text":"<ul> <li>A statement that is a function of one or more variables.</li> <li>Because it is a function, it is not a proposition until the input has been specified. </li> <li>\"x is an odd number\" is ambiguous until x has been assigned. \"5 is an odd number\" is a well defined statement, and then it becomes a proposition.</li> <li>Can become a proposition with Universal Quantifier</li> <li>Variable x is unbound until a quantifier is introduced (because it can take on any value)</li> <li>A statement is only a proposition when its variables are bound</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#logic-symbols","title":"LOGIC SYMBOLS","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#universal-quantifier","title":"Universal Quantifier ( \u2200 )","text":"<ul> <li>\u2200x P(x) -&gt; For all x, P(x) or For every x, P(x)</li> <li>\u2200x means that P(x) is true iff P(x) is true for every single value in the domain of x.</li> <li>\u2200x P(x) is equivalent to P(n1) ^ P(n2) ^ ... ^ P(nk)</li> <li>Because P(a1) is well defined, and is therefore a proposition, we can see that this is a compound proposition, which can result in a single well defined truth value. </li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#existential-quantifier","title":"Existential Quantifier ( \u2203 )","text":"<ul> <li>\u2203xP(x) -&gt; An x exists such that P(x) is true. There is at least one value in the domain of x that makes P(x) a true statement</li> <li>\u2203x means that P(x) is true iff P(x) is true for at least one value in the domain of x</li> <li>\u2203xP(x) is equivalent to P(n1) v P(n2) v ... v P(nk)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#quantifiers","title":"Quantifiers","text":"<ul> <li>Highest precedence</li> <li>Variable x becomes bound by quantifiers</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300/Week%2002/#de-morgans-law-for-quantifiers","title":"De Morgan's Law For Quantifiers","text":"<ul> <li>\u00ac\u2200x F(x) where F(x) means x can fly and the domain of x is the set of all birds.</li> <li>\u00ac\u2200x F(x) is evaluated as \u00ac(\u2200x F(x)) because of order of operations.</li> <li>\u2200x F(x) is equivalent to P(n1) ^ P(n2) ^ ... ^ P(nk) which means that only one of these values needs to be False, in order for the entire Quantified Statement to be false. </li> </ul> <p>F(x) -&gt; x can fly X is the set of 2 birds For every x, x can fly -&gt;</p> <p>F(Bird1) ^ F(Bird2)</p> Bird1 Can Fly (p) Bird2 Can Fly (q) P ^ Q ! (P ^ Q) True True T F True False F T False True F T False False F T <p>So the statement isn't that No birds can fly, the statement is that Not all birds can fly, because the statement can be true when one can fly while the other cannot. It can be true as well when no birds can fly, but that statement would only truly be applicable if our truth table yielded false for one bird being able to fly, and the other not being able to fly.</p> <p>Since this statement is equivalent to not all birds can fly, then the statement \"There exists a bird that cannot fly\" is equivalent as well.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2003/","title":"Week 03","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2003/#day-2","title":"Day 2","text":"Argument \u00acq  p \u2192 q \u2234 \u00acp <p>The Conjunction of the hypothesis implies the conclusion</p> <p>In other words ((p -&gt; q) ^ !q) -&gt; !p</p> <p>When we talked about conditional operations, we discussed the fact that p -&gt; q has p as the hypothesis, and q as the conclusion.</p> <p>In an argument, we have a few hypotheses, and then a conclusion. So in other words, an argument is the conjunction of a few hypotheses or propositions followed by a final proposition or conclusion.</p> <p>Whenever there are rows where all of the arguments in a truth table are true, the argument is valid when the conclusion is also true for those rows, and invalid if the conclusion is false for those rows.</p> Argument p V q  p \u2234 \u00acq p q p V q \u00acq T T T F T F T T F T T F F F F T <p>Rows 1 and 2 of the truth table for the hypotheses in the argument yield true. However, row 1 has a false conclusion. Since there is an instance where the hypotheses are true, but the conclusion is false, the entire argument is false, despite there being an instance where the hypotheses are true with a true conclusion.</p> <p>When p and q are true, the argument is false.</p> <p>In order to prove that an argument is invalid, you HAVE to have an instance where the hypotheses are all true. There are a few questions that ask about whether or not the propositions show that an argument is invalid, but in order to prove whether or not an argument is invalid, you have to show that the hypotheses can first be true, but that the resulting conclusion is false. When we're talking about validity, we're talking about arguments with grounds for reason. Arguments that have baseless or truth-less hypotheses are not even considered to be arguments basically.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2003/#homework-help","title":"Homework Help","text":"<p>Okay, so the idea with this section is that we're proving that an argument is valid. We're taking the rules of inference, and applying them to the hypotheses of our argument to reach the conclusion. We're not necessarily replacing the hypotheses, but instead just using them as we apply rules in our justification. We can also use laws of propositional logic to get where we need to go (e.g. De Morgan's Law). Rules of inference are usually only unidirectional, whereas propositional logic laws tend to be bidirectional.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2003/#1122f","title":"1.12.2.f","text":"Step Result Rule 1 p ^ r HypothesisAll hypotheses just declare the hypothesis to the list of proofs 2 p Simplification 1We can simplify line 1 of our proof to give us a single p 3 p -&gt; q Hypothesis 4 q Modus Ponens 2,3Since we were able to use simplification to get a single p, we can use the result of that simplification proof along with the hypothesis on line 3 and apply Modus Ponens to those two lines to yield a single q 5 r -&gt; u Hypothesis 6 r ^ p Commutative Law 1We aren't \"eliminating\" any rules from the actual argument, so we can reuse our hypothesis on line 1, and apply the commutative law to get r ^ p 7 r Simplification 6With r ^ p, we can use simplification to get a single r by itself 8 u Modus Ponens 7, 5Now that we have a single r by itself as the result of step 7, we can apply Modus Ponens with our hypothesis on line 5, and our single r on line 7 to give us u 9 q ^ u Conjunction 4, 8   Finally we've generated all the propositions we need from our initial argument using rules of inference. At this point we can apply conjunction to our results from steps 4 and 8 to get us to our final conclusion which is q ^ u <p>1.13.5c</p> <p>For this particular problem, the argument is invalid. M implies D, not the other way around. For this particular example, there are two pieces that are necessary to prove its invalidity. The first is to \"desugar\" the statements. This is a term that you'll find in discussions about language design (which is half the reason we have this course). The second is to create a counterexample.</p> <p>To desugar, we want to cut out the syntactic sugar (abstract words) and reduce them to single values.</p> <p>Every student who missed class got detention can be reduce to</p> <p>x students missed class -&gt; M(x)</p> <p>x students got detention -&gt; D(x)</p> <p>Ux M(x)-&gt;D(x)</p> <p>Penelope is a particular student -&gt; c</p> <p>Penelope got detention -&gt; D(c)</p> <p>Penelope missed class -&gt; M(c)</p> <p>The next part is to create a counterexample. Up until now, we've been shown that rules of inference are helpful for demonstrating a proof. This is helpful in the context of demonstrating truth, more or less after we've already identified that the argument isn't invalid, and sometimes to help us determine quickly if the argument is valid.</p> <p>A counterexample can be easily created if we already know a scenario that yields a false-y argument, but sometimes we do need to build out a truth table.</p> <p></p> <p>M(x) students missed class\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p> <p>D(x) students got detention</p> Ux (M(x) -&gt; D(x))Penelope is an element (c)D(c) M(c) <p>We can build our truth table using D(c) and M(c) to create the values for M implies D.</p> <p>If Penelope misses class, then she will get detention</p> <p>Penelope got detention</p> <p>Therefore she missed classed.</p> <p>In the scenario where If she gets detention, but she didn't miss a class (see row 3), then the argument is no longer true.</p> M(c) (r) D(c) (s) M(c)-&gt;D(c) (t) s ^ t (v) v -&gt; r 1 T T T T T 2 T F F F T 3 F T T T F 4 F F T F T <p>All of this is to say, you only need to find a scenario where the hypotheses are true, but the conclusion is false. In our instance, it would be when we say \"If penelope misses class, then she gets detention\" is True, and \"penelope got detention\" is True, but she didn't miss class.</p> <p>So in other words, this argument is invalid when D(c) = T and M(c) = F</p> Step Result Justification 1 Penelope is an element (c) Hypothesis 2 Ux (M(x) -&gt; D(x)) Hypothesis 3 M(c) -&gt; D(c) Universal Instantiation 1,2 4 D(c) Hypothesis 5 D(c) ^ (M(c) -&gt; D(c)) Conjunction 3,4 Couldn't really go any further without making redundant justifications"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/","title":"Week 04","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#mathematical-definitions","title":"Mathematical Definitions","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#evenodd","title":"Even/Odd","text":"<p>Even: x = 2k (x and k are both integers) Odd: x = 2k + 1</p> <p>The definition for even is any number that is a multiple of 2, or can be evenly divided b y 2.</p> <p>Parity is if a number is even or odd</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#rational","title":"Rational","text":"<p>y != 0 r = x / y</p> <p>Any number divided by any number as long as the divisor is not zero</p> <p>This can be seen as the proof for a quotient</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#divides","title":"Divides","text":"<p>x | y reads x divides y. In other words y / x. It's flipped and we're talking about the divisor.</p> <p>This can be seen as the proof for the divisor</p> <p>x divides y iff x != 0 y = kx</p> <p>There's a distinction between this proof and last is that r does not have to be an integer. For this proof, we're talking about whether or not an integer divides another integer, when k is an integer.</p> <p>3 * 4 = 12. Or in other words, 12 / 4 = 3. 4 divides into 12.</p> <p>4 | 12 -&gt; k * 4 = 12. When k is 3, this is true.</p> <p>Anyway, rather than proving the quotient, we're proving the divisor </p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#proofs","title":"Proofs","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#vocab","title":"Vocab","text":"<p>Theorem: a mathematical statement that can be proven to be true. Not to be confused with theory which is a scientific model that has been well tested and generally proven to be accurate.</p> <p>Proof: logical steps that follow previous steps that arrive to a final true statement.</p> <p>Axiom: a true statement. Used in proving</p> <p>Thus / Therefore We've used the word Therefore as the concluded statement in an argument up until now, but generally speaking, in the context of formal proofs, Therefore just follows from previous statements and does not necessarily indicate a conclusion. In formal proofs, the square can be used as the terminal character.</p> <p>Let For creating variable names</p> <p>Suppose Also for introducing variables. </p> <p>Since / because we know that...  Invokes a previous statement</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#syntax","title":"Syntax","text":"<p>\u25a0 / T: Tautology</p> <p>\u25a1 / \u22a5: Contradiction</p> <p>Theorem: some statement</p> <p>Proof:     Some statement     Another Statement     Conclusion \u25a0</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#proof-by-exhaustion","title":"Proof By Exhaustion","text":"<p>We've kind of done this one a few times in class. When our domain is small enough, then it might be prudent to walk through each element individually. </p> <p>Theorem: If n is an element of the set {-1, 0, 1} then n squared equals the absolute value of n.</p> <p>Proof:     Check the equality for every element in the set     ...</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#common-mistakes-in-proofs","title":"Common Mistakes in Proofs","text":"<p>Generalizing From Examples. This is not an exhaustive proof, and just because it works for one example, does not necessarily mean that it works for all examples.</p> <p>Skipping Steps</p> <p>Circular Reasoning</p> <p>Assuming facts that have not yet been proven</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#direct-proofs","title":"Direct Proofs","text":"<p>Can be shown in the form of a conditional statement, p -&gt; c where p is the set of hypotheses, and c is a conclusion.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#proof-by-contrapositive","title":"Proof by Contrapositive","text":"<p>Converse: If Q then P Contrapositive: If !Q then !P Inverse: If !P then Not Q</p> <p>Proof by Contrapositive proves a conditional theorem p -&gt; c by showing the contrapositive !c -&gt; !p is true.</p> <p>Work out truth table for each of these</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#proof-by-contradiction-indirect-proof","title":"Proof by Contradiction (Indirect Proof)","text":"<p>Show that when the theorem is false it leads to a conclusion that is not true.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2004/#proof-by-cases","title":"Proof by Cases","text":"<p>Break the domain down into difference cases. All elements of the domain have to be assigned to a case. For Universal Quantifiers, proof by case can be used to show the validity of a statement.</p> <p>Without loss of generality (WLOG) means that the proofs for different cases are so similar that they can be merged into one case.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2005/","title":"Week 05","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2005/#terminology","title":"Terminology","text":"<p>Set: A collection of objects</p> <p>Element: Object in a set</p> <p>Roster Notation: A = {}</p> <p>Cardinality: The number of items in a set</p> <p>Null set / Empty set: {} A set with nothing in it. Cardinality = 0</p> <p>N: Natural Numbers Z: Integers P: Irrational numbers Q: Rational numbers R: Real numbers Superscript +/- indicates set of values that are non-zero positive or negative</p> <p>Set Builder Notation: A = {x\u00a0\u2208 S: P(x)}. Read as follows: A is the set of all x in S, such that P(x)</p> <p>Universal set: Is the set of all elements within a context</p> <p>Subset \u2286: If all the elements within one set exist within another set, then those elements are within a subset of another set.</p> <p>Proper Subset \u2282: Same conditions as above, but A != B</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2005/#loose-ideas","title":"Loose Ideas","text":"<p>Subset vs Element in the context of Power Set</p> <p>The empty set is a subset of every set. </p> <p>A = { 1 } nullset  P(A) = { nullset, {1} }</p> <p>Ideas about scoping exist here</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2006/","title":"Week 06","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2006/#functions","title":"Functions","text":"<p>A function maps some value x to another value y. </p> <p>In algebra we use the form f(x) = y, in discrete math we use the form f: X -&gt; Y</p> <p>The set X is called the domain of f, and the set Y is the target, or co-domain, of f.</p> <p>(x, y) element of f</p> <p>For all elements in f, a given element in the domain of f must map to exactly one target of f to be considered well defined. If an element of the domain targets 0 or 2 or more targets, it's not well-defined.</p> <p>A function is one-to-one/injective if all elements of the domain map to unique targets. Or in other words, f(x1) != f(x2). </p> <p>A function is onto/surjective if all targets are mapped to.</p> <p>Bijection: If a function is one-to-one and onto</p> <p>If a function is a bijection, then the inverse of f is obtained by mapping the targets to the elements of the domain.</p> <p>Composition is when we apply the results of one function to another function.</p> <p>Lambda Caclulus</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/","title":"Week 07","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#relations","title":"Relations","text":"<p>Relation is the word we use when an element from one set maps to an element in another set.</p> <p>We use the notation xRy to indicate that x relates, or maps, to y. R is the set of relations from one set to another set.</p> <p>If we have a cartesian product A x B where A = {1,2} and B = {A, B}, then A x B = {(1, A), (1,B), (2, A), (2,B)}</p> <p>We can represent any subset of this Cartesian Product as the set R (Relation). What we're indicating here is that we have this sort of ordered mapping, where the first element in the tuple is an element from the domain, and that the second element is from the range. So we're indicating that 1 maps to A, and it also maps to B. 2 maps to A, and it also maps to B. Keep in mind, we're not necessarily ensuring that the mappings enforce a well defined function. </p> <p>Set R doesn't have to include every element of the cartesian product. It just represents some given subset.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#reflexive","title":"Reflexive","text":"<p>if all elements in the domain A map to themselves. Or in other words, for all x in A, xRx.</p> <p>Example: A = {1,2} ... A x A = {(1,1), (1,2), (2,1), (2,2)} </p> <p>R = {(1,1), (2,2)} Note: This subset R doesn't include all elements from the cartesian product, but the elements it does include follow the rule of xRx. In other words, 1 maps to 1, 2 maps to 2, and is reflexive.</p> <p>R = {(1,1), (1,2), (2,1)}  Note: This subset R doesn't include all elements from the cartesian product. And since it's missing (2,2), it is not reflexive</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#anti-reflexive","title":"Anti-Reflexive","text":"<p>For all elements in the domain, it is not true that xRx. </p> <p>Example: A = {1,2} ... A x A = {(1,1), (1,2), (2,1), (2,2)} </p> <p>R = {(1,2)} Note: This subset R has mappings (1,2) xRy. Since it has no mappings xRx, it is anti-reflexive.</p> <p>R = {(1,1), (1,2), (2,1)}  Note: This subset R has a mapping (1,1), and so it is not anti-reflexive</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#symmetric","title":"Symmetric","text":"<p>For all elements in the domain, xRy if and only if yRx</p> <p>Example A = {1,2,3} ... A x A = {(1,1)(1,2)(1,3)(2,1,)(2,2)(2,3)(3,1)(3,2)(3,3)}</p> <p>R = {(1,2),(2,1)} Note: This subset has mappings (1,2) and (2,1), which means that xRy and yRx. </p> <p>R = {(1,2)(2,1)(1,3)} Note: Even though this subset has mappings (1,2) and (2,1) which are symmetric by themselves, we also include (1,3), but not (3,1), so it is not symmetric.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#anti-symmetric","title":"Anti-symmetric","text":"<p>Can't be symmetric at any point. Everything else is allowed.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#transitive","title":"Transitive","text":"<p>If a maps to b, and b maps to c, then a maps to c.</p> <p>Note: This isn't saying that a graph must be transitive, just that it is transitive if we have mappings from x to y, then y to z, and x to z.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#digraphs","title":"Digraphs","text":"<p>is a pair of Vertices and their Edges (V,E). V is a set of vertices, E is a set of directed edges that is a subset of V x V. </p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#head-tail","title":"Head / Tail","text":"<p>In a directed graph, u -&gt; v, v is the head, u is the tail.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#inout-degree","title":"In/Out Degree","text":"<p>How many edges point to or away from a vertex</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#walk","title":"Walk","text":"<p>Can be reprsented by notation</p> <p> <p>Length = number of edges in a walk</p> <p>Open Walk is where first and last vertices are not the same Closed Walk is when the first and last vertices are the same</p> <p>Types of Walks - Trail: Unique Edges - Path: Unique Vertices - Circuit: A closed trail. Or a closed walk with unique edges - Cycle: A circuit greater than or equal to 1, where all vertices are unique except for the start and end. In other words, A Circuit Path.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#composition-of-relations-54","title":"Composition of Relations ( 5.4 )","text":"<p>All relations have been represented using a digraph so far.</p> <p>The composition of relations basically takes a mapping aXb and mapping bYc, and we end up with the relation aZc if we composite the relations together.</p> <p>If we have some function f(x), we have our domain as input, and our targets as output. In chapter 4.5 we saw how if we compose a function with its inverse, we end up mapping our input to our input. To get there though, we put some initial input in, and receive and output. When we use that output as the input for our inverse function, we get as output, the original input.</p> <p>The composition of relations more or less just shows these mappings in digraph form, rather than in a pure functional form. </p> <p>In 5.4, when we compose S with R, or S o R, we're looking at the digraphs that represent the mapping, or results of applying a function to input from a set. R is the result of some function, and S is the result of some function. When we get S o R, we're essentially calculating S(R(x)). and demonstrating that relationship as x(S o R)y. </p> <p>So if we pass a to the composition S o R, we're saying, okay if we put a into R, we get the result d, when we get d and pass it into S, we get C. So that's why a maps to c in S o R.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#graph-powers-and-transitive-closure","title":"Graph Powers and Transitive Closure","text":"<p>In this section we can think about things almost geographically. The power of a graph represents how many steps in a walk we can take, or how many times a function is composed of itself. If I can go from a to d in a step, and I can go from d to a in a step, then I can go from a to d back to a in two steps, or vice versa. </p> <p>We're essentially saying, given a certain number of steps, what destinations can I get to? Thinking back to composition of functions, we can see the composition of a function with its inverse as a walk of 2. </p> <p>If we have 4 vertices, then we can calculate up to 4 mappings. We describe all of these mappings as G^1, G^2, G^3, G^4 etc. These mappings are calculated by either visually determining which nodes you can get to given a number of walks indicated by the superscript of the graph G, or by composing the functions with each-other. Again, digraphs just graphically represent the relationships between inputs and outputs of a function. </p> <p>We can calculate this by doing G o G for Gen 2, then G o G2 for gen 3 and so on. R^k = R o R^(k-1). </p> <p>The Transitive Closure is just describing the combination of all of the possible walks for a given power of a graph. So if we have G^1, G^2, G^3, and G^4, we're combining all of these graphs together, to indicate all of the transitive walks for a given graph. This is indicated with G^+</p> <p>When we're describing a transitive closure, we're saying \"okay, take all of the possible combinations of walks that could exist over all generations, or number of steps, and combine them into a single digraph\"</p> <p>So then it describes every possible way to traverse, but rather than having to speculate how to get there over a number of steps, we just instead say \"okay, if you can get to A from C by walking through D or B, we can just instead simplify things and show that it's possible to get to A from C.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#matrices","title":"Matrices","text":"<p>Another form to represent mappings. We can use matrix operations on these mappings to manipulate them in ways that might be useful in different applications.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#partial-order","title":"Partial Order","text":"<p>Relation R on set A is a partial order if it is reflexive, transitive, and anti-symmetric. </p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#strict-order","title":"Strict Order","text":"<p>Irreflexive, assymetric, and transitive</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#equivalence-relations","title":"Equivalence Relations","text":"<p>Reflexive, symmetric, and transitive</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2007/#directed-acyclic-graphs","title":"Directed Acyclic Graphs","text":"<p>A digraph with no cycles.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/","title":"Week 08","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#division-algorithm-61","title":"Division Algorithm (6.1)","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#hw","title":"HW","text":"<p>6.1.1(a,d) 6.1.3(c,d)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#terms","title":"Terms","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#basic-terms","title":"Basic Terms","text":"<p>Counting: The process of determining the number of elements in a finite set</p> <p>Combination: An unordered selection of elements in a finite set (salad or skittles or whatever)</p> <p>Permutation: An ordered selection of elements in a finite set (locks are actually permutation locks, not combination locks)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#divides","title":"Divides","text":"<p>x divides y (not to be confused with x divided by y)</p> <p>iff x != 0 and y = kx where k is an integer</p> <p>So if we're looking at 10/2, then we get 2 divides 10, which is true because 2 != 0, and 2 * 5 = 10.</p> <p>So, 10 is a multiple of 2, and 2 is a factor or divisor of 10.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#linear-combination","title":"Linear Combination","text":"<p>A linear combination is a precisely what it says. It's a combination or unordered selection of elements that produces a linear selection of elements</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#division","title":"Division","text":"<p>Factor: A number that divides another number evenly</p> <p>Parts of Division</p> <p>Divisor = denominator = d Dividend = numerator = n Quotient = answer = q Remainder = r</p> <p>Fraction Form : dividend / divisor</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#modular-arithmetic-62","title":"Modular Arithmetic (6.2)","text":"<p>This form of arithmetic concerns itself with \"rings\" of results. The results we get from performing the modulus operation maps to values within a limited range that are essentially {0:m-1} ie n mod m</p> <p>This section largely focuses on equalities that we can use. This chapter overall will focus on properties of integers and things we can do with them, and so the types of operations that we perform on different integers can take many forms. </p> <p>(x % m + y % m) % m is equivalent to (x + y) mod m. These kinds of transformations are useful in coming sections.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#prime-factorizations-63","title":"Prime Factorizations (6.3)","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#hw_1","title":"HW","text":"<p>6.3.1(a,c) 6.3.2(a,c)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#fundamental-theorem-of-arithmetic-prime-factorization","title":"Fundamental Theorem of Arithmetic (Prime Factorization)","text":"<p>All positive integers can be expressed as a product of prime numbers in non-decreasing order (e.g. 120 = 2 * 2 * 2 * 3 * 5)</p> <p>Prime if p &gt; 1 and 1 and p are the only factors</p> <p>Composite: An integer composed of multiple factors</p> <p>Multiplicity: number of times a prime occurs in the prime factorization</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#great-common-divisordenominator","title":"Great Common Divisor(Denominator)","text":"<p>largest non-zero positive integer that is a factor for two numbers x and y</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#least-common-multiple","title":"Least Common Multiple","text":"<p>If x and y are factors, what is the smallest non-zero positive number in common?</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#euclids-algorithm","title":"Euclid's Algorithm","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#euclids-extended-algorithm","title":"Euclid's Extended Algorithm","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#preliminary-info","title":"Preliminary Info","text":"<p>Okay, so to understand what we're doing in this section, we have to disambiguate some things. This section swaps out variables to signify the same concepts, which makes it hard for non mathematicians imo.</p> <p>So let's start with some simple things.</p> <p>In the beginning of 6.1 we were introduced to some variables, n, d, q, and r. We're given a form for division q = n div d. r = n mod d. </p> <p>We're presented with a formula n = qd + r in 6.1.2 as the the division algorithm. We can view this formula as saying that the numerator of a fraction, is equal to the quotient times the denominator + whatever remainder. This checks out if we have some fraction 5/3. We can express this fraction as being 5 = 1 * 3 + 2. Think about long division here. If you have 3\u27cc5, we get 1 as our q, and 2 as our r. </p> <p>Essentially what we're doing is expressing a relationship between n, d, q, and r, and organizing them in a way the solves for any given component of this relationship. </p> <p>n = qd + r is the same form as y = mx + b. In our text book, they shift to using y and x to represent n and d, and they have a bad habit of shifting our variables around.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2008/#the-algorithm","title":"The Algorithm","text":"<p>Okay, so jumping back to the extended form. We have to piece together some things from across all the sections so far. If we want to find the greatest common denominator, then we use gcd(x,y). Here, x is our denominator, y is our numerator. This hint of the relationship of variables is given in the paragraph under The Extended Eucliaidean Algorithm when they specify that y = dx + r. So in other words, n = qd + r -&gt; y = dx + r. </p> <p>We know that gcd(x,y) = gcd(y mod x, x), because the book says so. We could probably prove it but we're taking their word for it. This essentially translates to gcd(r, x). Okay, with all of that out of the way, and know what our variables mean, what they map to, and how they relate to eachother, we can know figure out how to find the coefficients for the linear combination of x and y. We'll get to why that matters in a minute.</p> <p>To recap:  gcd(x,y) = gcd(y % x, x) = gcd(r, x) n = qd + r -&gt; y = dx + r -&gt;  r = y - dx -&gt; r = n - qd -&gt; r = y - qx</p> <p>In the example in zybooks, we use gcd(675, 210) = 15. </p> <p>gcd(675, 210) -&gt; gcd(210 % 675, 675) gcd(210, 675) -&gt; gcd(675 % 210, 210)  gcd(45, 210) -&gt; gcd(210%45, 45)  gcd(30, 45) -&gt; gcd(45 % 30, 30) gcd (15, 30) -&gt; gcd (30 % 15, 15) gcd(0, 15). </p> <p>See 6.5.1 for further questions. Note: 45 for instance divides cleanly into 675, but not 210. So it's not the gcd. When we reach 15, that is the gcd, or the largest non-zero, positive number that cleanly divides 675 and 210. </p> <p>When we get to the end of our euclids algorithm, we have these forms we can manipulate. Remember that we can </p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/","title":"Week 09","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#sequences","title":"Sequences","text":"<p>https://www.youtube.com/watch?v=JteQEN1XPyc</p> <p>https://www.youtube.com/watch?v=XHyeLKZYb2w&amp;t=234s</p> <p>Sequences are special functions that take sequential integers, indices, as the domain or input.</p> <p>Geometric sequence takes a previous number and multiplies it by a common ratio. </p> <p>Arithmetic sequence involves a common difference.</p> <p>m = initial index n = final index a_m = initial term a_n = final term</p> <p>In short, sequences are just some type of repeating pattern (arithmetic, geometric, quadratic, etc.), and we can represent those patterns in a few ways.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#recurrence-relations","title":"Recurrence Relations","text":"<p>Recurrence relation is when a term is defined as a function of previous terms. </p> <p>Geometric sequences rely on the previous term can </p> <p>Dynamical System is one that changes over time. Over discrete time intervals, each state is fixed during each slice. The history of the system is defined by a sequence of states.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#sigma-summation-notation","title":"Sigma / Summation Notation","text":"<p>Expresses the sum of terms in a sequence</p> <p>Don't confuse summation notation with the series itself. </p> <p>For instance, if we want to calculate the values of a gemoetric sequence where the common ratio is 1/5, we end up with {1/5, 1/25, 1/125, ...}</p> <p>If we want to represent the summation of that sequence, we can do so with summation notation</p> <p>Sigma notation can be viewed as calculating one final result, and can be treated as an operand in an expression. So in zybooks, when they do the expanded form, we see  sigma notation + final value of sigma calculation</p> <p>closed form for arithmetic sequence is an + (d(n-1)n)/2</p> <p>closed form for geometric sequence is (a(r^n - 1))/(r-1)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#pulling-out-final-term","title":"Pulling out final term","text":"<p>Sum of a_k from m to n == sum of a_k from m to n-1 + a_n</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#change-of-vars-in-sums","title":"Change of Vars in Sums","text":"<p>New Lower Limit: New Upper Limit New Expression</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#induction","title":"Induction","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#formal-definitions","title":"Formal Definitions","text":"<p>Base Case: Establishes that a theorem is true for the first value Inductive Step: Establishes that the theorem is true for k, which means it must be true for k+1</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#3-laws-of-recursion","title":"3 Laws of Recursion","text":"<p>A function must call itself A function must have a base case, or a way of stopping calling itself A function must move towards the base case</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#induction-with-recurrence-relation","title":"Induction with Recurrence Relation","text":"<p>We can look at recursion as either a current step and a next step, or a current step and previous step. In a recurrence relation that relies on information from a previous step, n and n-1, we can instead refer to these as k+1 and k.  We're just adding 1 to both n and n-1, but using k to represent this paradigm shift. </p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2009/#strong-induction","title":"Strong Induction","text":"<p>Base Case shows that S(n) is true for n = a through b</p> <p>Inductive Step shows that S(j) is true for all values of j in the range from a through some int &gt;= b and then proves the theorem for k+1</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2010/","title":"Week 10","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2010/#program-correctness","title":"Program Correctness","text":"<p>We can verify that a program works right by breaking down different portions into individual sections and testing those sections. We can define some condition before testing to be true, and then verify that a condition is true after the algorithm's execution. </p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2010/#loop-invariants","title":"Loop Invariants","text":"<p>If we have a while loop like this:</p> <p>while(condition):     do something / condition_change     end_iteration</p> <p>The loop condition is the portion that we use to determine execution of the while loop. If true, it continues, if not it stops.</p> <p>The loop invariant is something that is true at the beginning and end of each iteration of the loop. It is effectively the \"do_something\" portion of the loop, or the body of the loop. We can use mathematical induction to show that our program runs correctly. This gives us a formal set of tools to work with rather than just \"well, it seems to be working right for the cases I've given it.\" </p> <p>Deductive reasoning -&gt; From general hypotheses to a specific conclusion Inductive reasoning -&gt; From a specific hypothesis to general conclusions</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2010/#recursive-definitions","title":"Recursive Definitions","text":"<p>Basis: shows that element(s) are in the set Recursive rule: how to construct more elements from what we have Exclusion statement: things that can't be made in the recursive rule or basis don't belong</p> <p>Stacks and Reverse Polish Notation</p> <p>Parsing</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2010/#binary-strings-trees","title":"Binary Strings / Trees","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2011/","title":"Week 11","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2011/#homework-topics","title":"Homework Topics","text":"<p>Recurrence Relations</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/","title":"Week 12","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#counting","title":"Counting","text":""},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#product-rule","title":"Product Rule","text":"<p>If we're determining the number of ways that a sequence of choices can be made, we can use the product rule to figure it out.</p> <p>If we have some choice to make m, and then some other choice to make n, and these choices are independent of eachother, then we can view this as the cardinality, or number of choices that can be made for m, multiplied by the cardinality or number of choices that can be made for n.</p> <p>In zybooks we're given an example of a menu where you pick a drink, an entree, and a side.</p> <p>D = {Coffee, OJ} M = {Pancakes, Eggs} S = {Bacon, Sausage, Hash Browns}</p> <p>We can represent the number of choices in a similar fashion to a truth table.</p> D M S Coffee Pancake Bacon Coffee Pancake Sausage Coffee Pancake Hash Brown Coffee Eggs Bacon Coffee Eggs Sausage Coffee Eggs Hash Brown OJ Pancake Bacon OJ Pancake Sausage OJ Pancake Hash Brown OJ Eggs Bacon OJ Eggs Sausage OJ Eggs Hash Brown <p>The number of rows is the number of combinations possible.</p> <p>Alternatively, we can view this as nested for loops</p> <p>for i in D:     for j in M:         for k in S:</p> <p>This gives us three twice, twice.</p> <p>The simple form is |D| * |M| * |S| = 12</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#sum-rule","title":"Sum Rule","text":"<p>If all choices are available to use for a given selection like before, we can use the product rule. However, if our choices are partitioned, or exclusive, then we can use the sum rule.</p> <p>In the book it gives an example of if we want to select a drink, but there are cold drinks and hot drinks. </p> <p>It kind of makes sense in the previous example, that our drink option was one out of the sum of drinks. If we want to though, we can nest, or encapsulate our options into categories which can numerically represent a different number of options. If we have hot and cold drinks, for a total of 5 drinks, the overall number of choices is still 2 * 2 * 5, but we can also encapsulate those 5 drinks into 2 distinct choices of either cold or hot drink and make it 2 * 2 * 2.</p> <p>So, in the passwords example, if we want to make a password that can be 6-8 digits long, with various options for characters, we can view this as chars^6 + chars^7 + chars^8. This works out because we're essentially saying that there are 6 digit options, plus 7 digit options, plus 8 digit options.</p> <p>Expanded further we can see this as (36x36x36x36x36x36) + (36x36x36x36x36x36x36) + (36x36x36x36x36x36x36x36)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#bijection-rule","title":"Bijection Rule","text":"<p>Remember that a function is a bijection if it is one-to-one and onto. We also know that a bijection has an inverse, and the inverse is obtained by mapping the targets to the elements of the domain.</p> <p>So the bijection rule is that if there are two sets, that are a bijection, they have the same cardinality. Duh.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#permutation-and-combinations","title":"Permutation and Combinations","text":"<p>Permutation without parameter contains each element of a finite set exactly once. The number of permutations is n! Every combination with all elements (no selection parameter given)</p> <p>r-permutation P(n, r) has closed form n!/(n-r)! and is used when we select a limited number of items from the set. Yields x sequences of r objects from n objects Order does matter</p> <p>Combination C(n,r), n choose r, closed form n!/(r!(n-r)!) is used when order doesn't matter. Gives an r-subset or r-combination. Yields x groups of r objects from n objects.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#counting-by-complement","title":"Counting by complement","text":"<p>This one is pretty easy, if there are 10 items, 2 are red, then 10 - 2 = 8 not red items. This is counting by complement. It's everything outside of the given set.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#permutation-with-repetitions","title":"Permutation with repetitions","text":"<p>Remember that a permutation is a selection or arrangement where order matters. It's a sequence. If we have an arrangement where order matters, but duplicate elements in the resulting sequence, we can find the total number of sequences by taking the combination of spaces available and number of repeated elements and then multiplying each choice together.</p> <p>Remember that a permutation has n number of elements in a set, and then we want to get a sequence of r elements (while r =&lt; n). </p> <p>Permutation with repetitions &gt;= Permutation &gt;= r-permutation &gt; r-combination</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#multiset","title":"Multiset","text":"<p>A set but you can have repeated items, but order still doesn't matter. The keyword here is distinguishability. Or uniqueness. If you want duplicates, but the distinction between duplicates doesn't matter, you have a multiset.</p> <p>C((n+m-1), (m-1)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#inclusion-exclusion-principle","title":"Inclusion-Exclusion Principle","text":"<p>| A | + | B | - | A intersect B |</p> <p>This is an alternate form for finding the cardinality of the union of two finite sets. Can be used to find outcomes in combinations.</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#definitions","title":"Definitions","text":"<p>Counting: Determining the quantity of elements in a set</p> <p>Permutation: An arrangement of elements in a set where order does matter. P(n, r) = n!/((n-r)!)</p> <p>Combination: A selection of items from a set where order doesn't matter. C(n, r) = n!(r!(n-r)!)</p>"},{"location":"Academic/Discrete%201/CS-2300/Week%2012/#extras-material","title":"Extras Material","text":"<p>Intuition behind permutations and combinations</p> <p>Easy permutations and combinatiosn</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Introduction/","title":"Introduction","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Introduction/#about-me","title":"About me","text":"<ul> <li>I'm 30</li> <li>Background, WV, SP-BR, BYU-I, UVU, etc.</li> <li>I play guitar, enjoyer of death metal. Fallujah, rivers of nihil, ulcerate, aegaeon, cynic, death</li> <li>I love sushi, but really any dishes with rice I usually go crazy for</li> <li>Slight anime nerd. Eva, HxH, Trigun, .hack, Akira, Ghost in the Shell, CSM, JJK, etc</li> <li>R6 Siege, Elden Ring</li> <li>Reading, movies, hobby collection</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Introduction/#class-structure","title":"Class Structure","text":"<ul> <li>We'll have a class-topics thread in discord. This is where you all will post questions that you have or material you want to especially talk about in class.</li> <li>I don't really go over slides. We'll talk about relevant class material, and any side topics that you all want covered. </li> <li>We can go over a few of the assignment questions in class, and work through them together. In effect, one of the days each week will have something that's partially like a lab. We'll cover as much material as we need to, and work on some of the more challenging questions together.</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Introduction/#warnings","title":"Warnings","text":"<ul> <li>I do not make the coursework. I am an adjunct, not a mentor. Let me repeat that, I don't make the coursework, or any of the material. I'm here to deliver it to you, help you understand it, and guide you through the work. Someone had the audacity to complain about the fact that I didn't create my own material when I explained that day 1 a few semesters ago. I'm also not in control of zybooks. If there are issues, it's an administrative issue that comes from zybooks or the department. All I can do to fix things is send emails and hope people respond quickly. So let it be written, that I don't make the material.</li> <li>If attendance gets too low, I will enforce an attendance policy. I hate basing grades off attendance, but the overall class experience diminishes greatly if people aren't coming to class. Class is better with you there. </li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Introduction/#success","title":"Success","text":"<ul> <li>Get your sleep. Seriously, this is probably the most important thing. Staying awake burning the midnight oil might feel like what you're supposed to do, and with how fast things go, you might have to stay up a bit. But seriously, get your 8 hours, make sure you're rested. Take mental breaks. Come back to it if it's not clicking. If it comes down to you not sleeping so that you can get your project in on time, let me know, get your rest, and I'll flex the date by a day.</li> <li>Read. The CS major is really a reading and writing major. While we generally write lots of programs in this major, more than anything, what you're doing is communication.</li> <li>Get used to drawing/writing. Honestly, the easiest way to grasp material in this class is often to draw things out and walk through problem steps on paper, whiteboard, onenote, whatever.</li> <li>Group up. We don't tolerate plagiarism. But we do love it when students get together, explain topics to each other, suggest strategies for approaching a problem, help each other succeed, and make friends. </li> <li>Have fun. Realize that although this course will be challenging, this is a real meat and potatoes course. This is one of the true CS classes that you'll take, with topics that'll be useful to you whether you're building compilers, working with assemblers, or writing DSL's. Look ahead to the future, and get pumped for the cool stuff you'll learn!</li> <li>Get ahead of the work. Don't lose the basically free points that come from the reading. Get those in on time. Even if you need to skim ahead, get your PA points. It's the freest way to get points, which will potentially give you more wiggle room on the exams and projects. They can be the deciding factor between matriculation or not.</li> <li>Engage during class-time. I know it's tough sometimes to speak up, and sometimes there might be someone who appears to know a lot, so you don't want to embarrass yourself. It's really fine though, we're all in different places, and chances are, a lot of other people are wondering the same thing you are, and big chances are, someone may not even realize they have a question (very dangerous). So pipe up, ask questions, and be engaged. We'll have a lot better of a time if everyone has fun and talks during class!</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/","title":"Week 1","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#what-is-discrete-math","title":"What is Discrete Math?","text":"<p>Discrete math is a branch of mathematics that employs unique tools and disciplines like logic, graph theory, and combinatorics to analyze objects with a finite nature. These tools have practical applications in computer science</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#notes-for-module-1","title":"Notes for Module 1","text":"<p>Logic is formal reasoning with an emphasis on making precise statements.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#propositions-are-statements-that-are-either-true-or-false-they-are-the-most-basic-element-in-logic","title":"Propositions are statements that are either true or false. They are the most basic element in logic.","text":"<p>Questions are not propositions, but propositions can be an answer to a question.</p> <p>A proposition has a truth value which can be true, false, unknown, or some value in between (like an opinion)</p> <p>Important variables:</p> <p>Zybooks refers to p, q, r for our variables as opposed to x, y, z. It doesn't really matter but each set of mathematics has its own unique set of symbols, even if they're somewhat analogous. Read the questions carefully, I mix up p and q all the time</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#logic-symbols","title":"LOGIC SYMBOLS","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#conjunction","title":"Conjunction ( \u2227 )","text":"<ul> <li>Logical AND</li> <li>p ^ q can translate to (x AND y) or (x &amp;&amp; y)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#disjunction","title":"Disjunction ( \u2228 )","text":"<ul> <li>Logical OR</li> <li>Also known as Inclusive Or</li> <li>p v q can translate to (x OR y) or (x || y)</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#exclusive-or","title":"Exclusive Or ( \u22bb )","text":"<ul> <li>The way we normally use or in English. One or the other.</li> <li>You can go to Tim's class, or you can be a loser (jk)</li> <li>Also seen as \u2295</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#negation","title":"Negation ( \u00ac )","text":"<ul> <li>Logical NOT</li> <li>Reverses the truth value of proposition</li> <li>If p is True then \u00acp is False</li> </ul> <p>Order of Operations Parenthesis, Negate, AND, OR</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#truth-tables","title":"Truth Tables","text":"<p>Entries in a truth table have 2^n rows. Each column has equal number of true and false entries. We can see alternating patterns of T and F. The main way to fill out a truth table is to fill the first column split in half, top half with T's, bottom half with F's.</p> <p>When evaluating compound propositions, we should evaluate individual expressions first. For instance NOT p AND (q OR r) can be broken down into an evaluation of NOT p as a unary expression, as well as the statement within parentheses as a binary expression. Not p has its own set of values, then the evaluation of q OR r yields its own set of values, and the results of those two distinct values can be evaluated as a final binary expression.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#conditional-statements","title":"Conditional Statements","text":"<p>A compound proposition that uses a conditional operation is called a conditional proposition, also known as a conditional statement.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#if-then","title":"If Then ( \u2192 )","text":"<ul> <li>p \u2192 q reads as if p then q</li> <li>proposition p is the hypothesis and proposition q is the conclusion</li> <li></li> <li>Evaluation of this proposition is true when p and q are both true, false if p is true but q is false.</li> <li> p q p \u2192 q T T T T F T F T T F F T </li> <li> <p>Represents a contract. </p> <ul> <li>If p is true, then the contract breaks when q is false.</li> <li>Doesn't have to be fair, only indicates a contract if p is fulfilled, then q HAS to be fulfilled. Says nothing about if p ISNT fulfilled.</li> </ul> </li> </ul> <p>Again, these kinds of statements or propositions describe the truth value of the overall statement. In a scenario where we're describing that if x is true, then y is true: if our x is true, but our y is false, then the overall statement is false because the statement posits that y must be true when x is true. y must be fulfilled when x is fulfilled. If x is false, but y is true or false, then no rule has been broken. </p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#converse-luigi","title":"Converse (Luigi)","text":"<ul> <li>if q then p</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#inverse-wario","title":"Inverse (Wario)","text":"<ul> <li>if not p then not q</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#contrapositive-waluigi","title":"Contrapositive (Waluigi)","text":"<ul> <li>if not q then not p</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#mario-luigi-wario-waluiji","title":"Mario, Luigi, Wario, Waluiji","text":"<p>From ChatGPT: </p> <p>Given the playful nature of mapping these characters to logical concepts, here's how we might align Luigi, Wario, and Waluigi to the ideas of converse, inverse, and contrapositive:</p> <ol> <li> <p>Luigi as the Converse:</p> <ul> <li>Converse in logic: If \"If A, then B\" becomes \"If B, then A.\"</li> <li>Luigi is often seen as the converse of Mario, being similar but not identical. He shares many of Mario's traits but is often portrayed as the more cautious or secondary character. If Mario is the protagonist, then Luigi, in many ways, could be seen as the character who would step into the same role if their situations were reversed.</li> <li> <p>Wario as the Inverse:</p> </li> <li> <p>Inverse in logic: If \"If A, then B\" becomes \"If not A, then not B.\"</p> </li> <li>Wario represents the opposite of Mario in many ways\u2014greedy, selfish, and unruly. He\u2019s the \"not Mario\" in terms of character and values, embodying what Mario is not. As such, Wario can be seen as the inverse of Mario.</li> <li> <p>Waluigi as the Contrapositive:</p> </li> <li> <p>Contrapositive in logic: If \"If A, then B\" becomes \"If not B, then not A.\"</p> </li> <li>Waluigi, as the contrapositive, is a more complex reflection. He\u2019s not just a counterpart to Luigi; he\u2019s a twisted version that contrasts with Luigi while also maintaining a similar dynamic to Mario and Luigi\u2019s relationship. If Luigi is Mario's converse, then Waluigi, being the opposite of Luigi and reflecting Wario's relationship to Mario, aligns well with the concept of a contrapositive\u2014taking the original relationship and flipping it in a more complex, mirrored way.</li> </ul> </li> </ol> <p>So, in summary:</p> <ul> <li>Luigi: Converse of Mario</li> <li>Wario: Inverse of Mario</li> <li>Waluigi: Contrapositive of Mario (and Luigi in some sense)</li> </ul> <p>This mapping keeps the characters' relationships and their oppositional nature in line with logical operations.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#if-and-only-if-biconditional-operation","title":"If and Only If ( \u2194 ) Biconditional Operation","text":"<ul> <li>What we might traditionally think of with conditional logic or contracts</li> <li>p if and only if q, shorthand p iff q</li> <li> p q p \u2194 q T T T T F F F T F F F T </li> <li>I will mow your law if and only if you pay me: Statement is true if the lawn is mowed and I get paid, also true that if I don't mow the lawn, I don't get paid. If mow the lawn and don't get paid, contract is broken, if I get paid, but don't mow the lawn, the contract is also broken.</li> </ul>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#conditional-precedence","title":"Conditional Precedence","text":"<p>If parentheses are not given, then logical operators get precedence over conditional operators. When in doubt, just use parens.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#tautology-contradiction-equivalence","title":"Tautology, Contradiction, Equivalence","text":"p not p (q) p iff q T F F F T F <p>A Tautology means that all results are true, contradiction is all results are false. Equivalence is when two statements yield the same truth results.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#de-morgans-laws","title":"De Morgan's Laws","text":"<p>Logical equivalences that show how to distribute negation operations inside a parenthesized expression</p> <ol> <li>NOT (p OR q) \u2261 NOT p AND NOT q</li> <li>NOT (p AND q) \u2261 NOT p OR NOT q</li> </ol>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%201/#topics","title":"Topics","text":"<p>Take This Fish/Orders of Ignorance - Logical Math     - https://www.youtube.com/watch?v=BrDyDQYRUxM         - Law of Excluded Middle From Standford         - Law of Excluded Middle         - Laws of Thought - Multi-state machines     - https://www.youtube.com/watch?v=fXwSFhUVFmE - Why use base 2?     - see above Go Over Exercises</p> <p>Waluigi Copypasta</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/","title":"Week 2","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#logic-symbols","title":"LOGIC SYMBOLS","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#predicates","title":"Predicates","text":"<p>Predicates are functions that can take 1 or more variables that returns the result of a logical statement. In programming, we often refer to functions as predicate functions when they specifically return a bool.</p> <p>C++ named requirements: Predicate</p> <p>Domain: set of all possible values for a variable</p> <p>Predicates can be true for all input, but they're still considered to be a predicate and not a proposition simply because it has a variable.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#universal-quantifiers","title":"Universal Quantifiers","text":"<p>While a predicate is still a predicate, and not a proposition because it has a variable, if we make a statement about the predicate itself, then this is a proposition, or a universal quantifier. We're talking about the function itself, rather than the result of the function. In this sense, when we say \"for all x, P(x)\" we're asserting that either P(x) is true for every x, or it there is some scenario where P(x) yields false. In other words, rather than relying on the assignment of a variable to determine the truth, we're just looking at every possible combination of variables from the domain, and this ends up making the entire thing a proposition again because:</p> <p>$\u2200xP(x) = P(a_1) \u2227 P(a_2) \u2227 P(a_3) \u2227 ... \u2227 P(a_k)$</p> <p>So going back to the statement where we say P(x) = x + 1 &gt; 1 and let's limit the domain to just 1 and 2</p> x P(x) 1 T 2 T P(1) (x) P(2) (y) x ^ y (z) T T T T F F F T F F T F So, if we can show that P(x) for 1 and 2 is true, then we can see that the quantified statement is entirely true. This works because by assigning values to a predicate, it then becomes a well defined proposition, and therefore, we can combine the results of every variable in the domain the show the truth value for that Universally Quantified Statement."},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#counter-example","title":"Counter Example","text":"<p>It's obviously a lot of work to show that something is true for literally every value in the domain. So the idea is that we just find one scenarios where one of the propositions is false, which is sufficient to show that the universally quantified statement is false, following the rules of conjunction. If a predicate doesn't take a variable, or if the domain is 0, then the universally quantified function is true.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#existential-quantifiers","title":"Existential Quantifiers","text":"<p>This works the same way as the Universal Quantifier, but rather than saying \"EVERY\" P(x) we say \"Some\" P(x) is true, or more accurately, some x exists that makes P(x) true. Existential Q's can take the form </p> <p>$\u2203xP(x) = P(a_1) \u2228 P(a_2) \u2228 P(a_3) \u2228 ... \u2228 P(a_k)$</p> <p>You'll notice a trend throughout this class, that really we're just thinking of every possible combination of outcomes. This comes in the form of conjunction vs disjunction for example, and then their subsequent truth tables that show all possible truth values given a way that we can express a logical statement. Universal seeks to find one instance where x results in a false statement rendering the entire statement false, whereas Existential seeks to find one instance where x results in true rendering the entire statement true.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#de-morgans-law","title":"De Morgan's Law","text":"<p>The same rules that we can use to distribute negation into conjunctive or disjunctive statements can obviously be applied to Quantified statements because as we saw before, those quantified statements can simply be viewed as massive propositions. </p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%202/#nested-junk","title":"Nested Junk","text":"<p>In 1.10.1 we can see that a matrix can be really useful for representing the domains for each variable for a predicate. </p> <p>In the examples where they talk about Everyone sending an email to Everyone or \"for all x, for all y, x sent an email to y\" where the domain for x and the domain for y is every employee.</p> <p>We get </p> - Tim Alex Devin Tim T T T Alex T T T Devin T T T This is why the statement is false when someone doesn't also send a message to their self. <p>If we want to express this more naturally then we can create a more complex statement as demonstrated in zybooks where for every person and every recipient, if someone is not theirself, they sent an email to everyone UxUy((x != y) -&gt; M(x,y)).</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%203/","title":"Week 3","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%203/#logical-reasoning","title":"Logical Reasoning","text":"<p>So far we've been building up a framework for working with logical in an algebraic format. Week 1 was sort of our arithmetic week. In introductory arithmetic, we're introduced to numbers, arithmetic expressions, and things like times tables and most of these things are so primitive that we are effectively taught them as universally true. 1+1 = 2 is just a primitively true expression. We use times tables to remember what combination of numbers yield a certain value.</p> <p>In discrete, we're introduced to conjunction, disjunction, truth tables etc. Likewise, these are sort of primitive expressions and truth tables just show a mapping, or show what combination of expressions yield.</p> <p>From those primitives, we can start to build up our capabilities like we did in week 2. And in week 3 we're continuing on in that format. </p> <p>Arguments have a specific format</p> <p>h1 h2 therefore c</p> <p>Arguments effectively translate to (h_1 ^ ... ^ h_n) -&gt; c. In other words, an argument is a conditional statement. If hypotheses, then conclusion. What we aren't doing is saying \"If my hypotheses are correct, then my conclusion is correct.\" We're evaluating the entire argument as a whole. So in normal human terms, people will make arguments and say \"if A and B, then C must be true.\" Our job here is to test the validity of that claim. </p> <p>We shouldn't treat conditional expressions like an arithmetic expression where 1+1=2 and that's a given. We must test the validity of the entire expression. So, we have to evaluate the claim that 1+1 does in fact actually yield 2 (not a direct parallel but whatever).  In other words, we're not using the hypotheses to find a conclusion, we're testing the hypotheses and the conclusion all together.</p> <p>So in a very primitive form we can create a true table to establish whether or not the argument is valid.</p> <p>From the text:</p> <p>To use a truth table to establish the validity of an argument, a truth table is constructed for all the hypotheses and the conclusion. Each row in which all the hypotheses are true is examined. If the conclusion is true in each of the examined rows, then the argument is valid. If there is any row in which all the hypotheses are true but the conclusion is false, then the argument is invalid.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/","title":"Week 5","text":""},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#terminology","title":"Terminology","text":"<p>Set: A usually unordered collection of objects. Technically a set is defined in terms of axioms where some element x is an element of a set S. In other words, it doesn't have anything to do with quantity of that thing, just a description of its existence in that thing.</p> <p>Element: Object in a set</p> <p>Roster Notation: A = {}</p> <p>Cardinality: The number of items in a set</p> <p>Null set / Empty set: {} A set with nothing in it. Cardinality = 0</p> <p>N: Natural Numbers Z: Integers P: Irrational numbers Q: Rational numbers R: Real numbers Superscript +/- indicates set of values that are non-zero positive or negative</p> <p>Set Builder Notation: A = {x\u00a0\u2208 S: P(x)}. Read as follows: A is the set of all x in S, such that P(x)</p> <p>Universal set: Is the set of all elements within a context</p> <p>Subset \u2286: If all the elements within one set exist within another set, then those elements are within a subset of another set.</p> <p>Proper Subset \u2282: Same conditions as above, but A != B</p> <p>Another way you can approach it is by looking at the subset as a base for determining if something is a proper subset or if two sets are equal. A proper subset is proper because it's truly a subset, in the sense that it's not equal to the superset.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#loose-ideas","title":"Loose Ideas","text":"<p>Subset vs Element in the context of Power Set</p> <p>The empty set is a subset of every set. </p> <p>A = { 1 } nullset  P(A) = { nullset, {1} }</p> <pre><code>Ideas about scoping exist here\n</code></pre>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#power-set","title":"Power Set","text":"<p>\\ With power sets, the key takeaway is that it only contains sets. Those sets are the combination of every item contained within the original set. Nullset is a part of the power set because the nullset is technically part of every set.</p> <p>The amount of items (cardinality or arity) in a power set is 2^n </p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#unions-and-intersections","title":"Unions and Intersections","text":"<p>Intersections imply where two roads converge, or where two things meet, or where they share something in common. So, the intersection of two sets are the things they have in common, which is that nice little middle overlap slice in a venn diagram.</p> <p>Unions are the combination of all things. We take a union, a combination, of things that don't necessarily belong to one another or have to do with eachother, but become one.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#difference","title":"Difference","text":"<p>This is an exclusion. It's everything I don't have in common with you. As with subtraction, a difference expression with sets is not commutative.</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#symmetric-difference","title":"Symmetric Difference","text":"<p>This is represented with the same symbol that we use for XOR. </p> <p>This can be summed up with (A - B) U (B - A) In other words, everything A does't have in common with B, combined with everything that B doesn't have in common with A. It is a set of pure differences. Insert political joke here</p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#set-identities","title":"Set identities","text":"<p>We can express set operations with logical operations. These identities allow us to perform different types of algebra on sets that we might not normally be able to. </p>"},{"location":"Academic/Discrete%201/CS-2300%28Fall2024%29/Week%205/#cartesian-products","title":"Cartesian Products","text":"<p>2</p>"},{"location":"Academic/Random%20Learning%20Stuff/Logs%20And%20Exponents/","title":"Logs And Exponents","text":"<p>I had a realization today</p> <p>Logs are the result of repeated (or iterated) division</p> <p>Exponents are the result of repeated multiplication</p> <p>Products are the result of repeated addition</p> <p>Quotients are the result of repeated subtraction</p> <p>There are operations of a higher order after Logs and exponents.</p> <p>After Exponents is Tetration or super exponentiation or repeated exponentiation, and after the log is inverse tetration or super log or repeated logarithm</p> <p>Logs are the result of dividing the operand k number of times by the base until we are left with 1</p> <p>https://www.quora.com/Why-can-logarithms-be-interpreted-as-the-number-of-times-that-one-divides-a-number-by-the-logarithm-base-until-left-with-1</p> <p>Kind of</p> <p>So in terms of calculating the complexity of a recursive function, in the case of a binary search where we are decreasing the search space and search time by division every time, we are iteratively dividing, or performing a logarithmic search.</p> <p>In terms of calculating the fibonacci sequence, we are iteratively increasing the amount of time to find the result, or performing an exponential calculation.</p> <p>Calculating logs by hand https://math.stackexchange.com/questions/820094/what-is-the-best-way-to-calculate-log-without-a-calculator</p> <p>Repeated operations aren't real though https://math.stackexchange.com/questions/56663/is-there-a-natural-way-to-extend-repeated-exponentiation-beyond-integers</p>"},{"location":"Academic/Random%20Learning%20Stuff/Universal%20Expansion%2C%20Fractals%2C%20etc/","title":"Universal Expansion, Fractals, etc","text":"<p>https://bigthink.com/starts-with-a-bang/universe-fractal/</p> <p>https://www.wtamu.edu/~cbaird/sq/2013/09/17/where-is-the-center-of-the-universe/</p> <p>https://bigthink.com/starts-with-a-bang/big-bang-beginning-universe/</p> <p>https://www.space.com/13320-big-bang-universe-10-steps-explainer.html</p>"},{"location":"Excalidraw/Drawing%202025-01-22%2013.50.21.excalidraw/","title":"Drawing 2025 01 22 13.50.21.excalidraw","text":"<p>==\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0== You can decompress Drawing data with the command palette: 'Decompress current Excalidraw file'. For more info check in plugin settings under 'Saving'</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2013.50.21.excalidraw/#drawing","title":"Drawing","text":"<pre><code>N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm+gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFAFYyJE9VGEYwGgQAbQBdcnQoKABlALA+UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA\n</code></pre> <p>%%</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2014.50.00.excalidraw/","title":"Drawing 2025 01 22 14.50.00.excalidraw","text":"<p>==\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0== You can decompress Drawing data with the command palette: 'Decompress current Excalidraw file'. For more info check in plugin settings under 'Saving'</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2014.50.00.excalidraw/#excalidraw-data","title":"Excalidraw Data","text":"","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2014.50.00.excalidraw/#text-elements","title":"Text Elements","text":"<p>Employee ^dCHOr1oa</p> <ul> <li>PaymentInstance  ^EqtR363G</li> </ul> <p>&lt;&gt; PaymentStrat ^7itWJVlc <p>Hourly ^Ml5iAULm</p> <p>Salary ^4WWprP0j</p> <p>Context ^PGbOIMiA</p> <p>Strategy ^jK4Xm9Jk</p> <p>%%</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2014.50.00.excalidraw/#drawing","title":"Drawing","text":"<pre><code>N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQBWGjoghH0EDihmbgBtcDBQMBKIEm4IOwArZQBRABEAFQBJTQBhAHl6Nr9iKE0ADkkkflLYRArA7CiOZWDUkshMbmce\n\neIBmbQA2eIAWXa2kgEZ4gE599fWt0cgYFaPD7VOt9YGdo4H4pJuIChJ1bg8AAMp2SPCSSQ2GyBB0+30KkGGhGU0m4RxB2nRpwGQJ4PAOIPWXx+1jm4lQQJ+zCgpDYAGsEG02Pg2KQKgBiI4ILlchalTS4bB05S0oQcYhMllsiQ06zMOC4QLZPmQABmhHw+AAyrB5hJBB4VRBqbSGQB1f6SQFUmn0hA6mB69AG8o/UUojjhXJoI4/NgK7BqO4+oGU\n\nhEQEXCODNYje1B5AC6P1V5EyMe4HCEmp+hHFWAquCORtF4s9zDjxUW0Hg5PWCIAvlSEAhiGjdvEtqG9nifowWOwuGgBgNe0xWJwAHKcMRo+IDbFnLZHXY55j1dJQFvcVUEMI/TTCcW1YKZbJxzPZ8NCODEXCb1s+qFJAY8Q6nOfrH5EDh0jNZ/BfmwQpbmgO74GEhSNoUlaQOUEinEIACOpAdO0pwAEqEAAChOAwALIADI8I0ABa2AAEKIUa4zkh\n\nA34jOGyxoKsGzaDw6zvsOQIQrsRynKcPzBqgzhHDwAyYvspxrJxxxJFsfDhn8fRWmgwJbNouwvvE8RiWsy4DPsPxIiiUBogkrwdqcSTrKJ8JVqSTphlWJp2pKrIcjy3IMVWApCpGYoSsy7kyuQHDyoqWSmcmGrarqtEuq2NqmggFrKda4YuQyDpOsazKuuG7qSGWca+uG/qCkGaKhj8/nRrG+RJuGKa4GmD6oBeAHhrmxD5hIuA8MWh7EMV3AwZA\n\nNGAg2TYgagy7rEkux4oto79pw3ADHZpR9uOHBThwM6Plsi2HOCTmlIQa4bjNYF7uGB4BceGSRee/4/Net73rORLPq+8kgqVVbfr+aAdYBwFtTdCA/HAbC5jk+QImABSLCUZ2LECiONSjyMo2pGlaTpWn6YZiNgCJ5mfFsVk2eCmMIljpT4KEUBMvo+hqPeWGw8qIOvRlUSkFA5Hdbmyh/peVZZMQwviqL4udc5AtQAAgqQtIUMMuBtaD4ZS6r6ua\n\n9r/6QaMMFlG1EASgAEh0pBHGwuDUTWFSbpgUWMSs7HiUC8RHESWw4txRIA6UQkiUkoLLtx5yafiPAfCOimWutiTvvx6wHFJrxiSHiIIMiqKqZtkAOeSaPGraDJudK6Ccl5vL7oKwoloFUou6F4VKu7Vbqpq2XxXliX88lqUAqpSV2v3FQJYNfhFV6aJ+gGlUhuXtUxnGibJqmCDprzEvnXmTHoLguyz6WC/7wrpRhDNHyadiokHCtO3cLsAnhttA\n\n57Qds3zqG85E5VguuuYIn1QK7ihndIaj1Tzwyvm9G8d475PhfEdEEwIvy5mBu1PmgMgIMghpAn4rtTISFqPoHwbAYDNmLJQRoWAyHoAoVQmh3lSiqk4FALUhAjDkkwU1LhAAxFqGohLF2gIw5WRBlCDnQMEVU3ctpMCgOYAg0jkRyOgP6I0ehsi4FzEwPeuCD6QFZMiXMBAGFuwqCwlkbCjS4CEFANg6Fwi8PJDSIQUDAaGKtvnEyZlaYlCgiUM2\n\ncF0BtEkLgLCdIhFanIo0GAHAAAajRiAADUSJtAANJ4SBGaJ2EwJD0SNMfFicQiRAgzniBaLxPiCRWO+BIRwI5HA+CdDOrwfhKTHrwGECRdgcUWq+H2IyjIBMLhSDSGcdI8FOKGDiQJ5ISNLtwcumVGRBRrhAOunkjS+WbkNau7c5QKi7kaXusVHQD0NBPc0ydx7D0nnFaeg9Z4ekvrNJeFVYBVTXqKOqm8GZqh3sYnWwCj4FhSG6IaI00BjWrMU3\n\ngU0MrNjam054UllwvwHNwBZuLJzTnJJCKmaxLjlxAVdIh4EfH8hgSeZ68tEEfRQd9NBZKrJYJ/My8MLJwbbmIeGGGcNN6IxxujG4qNMZSolSUYEuxBnDLxJ2bsCkUZkyBDM9seIFnVIWSsumiwQV0WZqzdmMgWxczhryxWiohYi1mLa0oUsZaOCdQg/m9r9ZsA1iEI2piMDih9X6rW8sTbQS6hbWoiEoDoSuOsAA4kU2ipCyme2ONoH2oZ35iWfM\n\nOHYjTmKiU2GcM4tl3yHBWT0x5f9NjWWxOCIZ5xrKiQmQXJhSRy5rLQBsyuWy24SD2V5A5Td/LihOSFM5EVlTRT7q8/U7z7kpVreqm+/ap6LruQVYQnzyyLzKsvP5q8aqAo3g1beLVd4BuvrBKFfUtjn2Gl8iFN90XrVaVcAk1xP5jjxWgLlv7Vq7WJWiT4pwPjtJfKuUBCBwGoEhvuBlT0zzOsgO9ZBbUTjsr0p2NY3KcGvsgPywhgraUkMYRUZw\n\nqAsK4BgHA5oYUZhiAADpcDdPQyjEhqO0fo5FRj1JrCsfY4I7IPC+GAnLpw7IIj2b4HERRt2GjZEVAUUoyAfZVHuGU1olxcBdFcIMZ6Ug4K8GlHMf4KxXH0A8bowxpjQmEBsccc41x7iJNoC8XS4jfjJlMKOGxJIEawlRoqPEM0RhVRJCqIQQgAw2YAFViAAEU6RmhInSRCysBgpoqI4FqnAh5VnKQHDSVlKY03BM+H9VYw6iVBECOaz4kjAi7XOG\n\ntaU0CvECwm1pEHFxwnbYE1Siqun4iOhHZ4hIgGlB7RSZdk7a6eQbndMdLdFvQA7ucyKlyYqbudEu55DzOu8GXft3K26qyFXhd8w9vyhLogBVGc9aAt5NTBTenM96T45dhQFG7iKJqqVRc5d9aAqaXH4qcDOhK5E6Vhz/WseINpQZg9Ssjt0fLIbgWKlGY1YIWwQEIZo+hJBJHIs0SQzg6RGAAPoZInMT2npxJDNBVGMZ2fU1a+ogIjes9MWWYa+l\n\n8NBAwM4DFznRbBaG6IEOupA4LRRQsSCJyTsnFOqc0/p4z5ozPWe5a5+rdNzF5mDIhBHPYft1iNdfEW4S7SkhPA2O/M45xllXA6305cjvRJluh2sY4JwJHGSmVqoZuxrKE0WnJeI0cSSzEcgt7ZHl67sMgIc8drdgroFlGFbbs6mp7YXQdy766R6rrO8Xi7+Uru7vnvun0PzAzHtmtVcM696qvZNc1VqMvuq9RPqcJ9APEZIv4SDt9d83i8SOtpcu\n\nX81pdZXEBnaiO0RVMh2LmbsFLpgPl+R6BD1GWoc9VWDD8HsMi9fGL2OBGZckf35j0oIqT/xnFaTNG0qUYgqRqTb3mJpIzh1gA92liRSZnAw8M5I8xJo8dho4jUSgTUmZqRzUOYrVuYmEiMK57U3U5YEVR90gGMLZwtItotYt4t9AktUt0tMtst2cIBOFsAhA4wtUfZ5JFpesDh34E0pUIxcB9NG9R91RMB0CbUr4J9IBXVHUxZT911vVudQ1PtdZ\n\ng0FDDYCwFCjQggDwKBH8EBFdwkLZ9BMBnhCBThyIOhag8JcB6AsIEseB6gAApLYciBLAiA3dAKYGYMkY3WaE4J4BZY4GAs4RZD+Wre4HSLNd+AOV8E4D4MAqsXpFSWaUrXVCtDsOScEIbKZdpSOH2cDepd4YcePbw3tJPQdJbVPUdPydbZPKdPPGddTBgovG5N5UvAQftUeJItddo5Kc7GeP7PdEqJvFeVvJ7a8F7eMbvD7Pvb7CAXAZWYfL5QHT\n\nnVAOsRYUJSfNqeZDpdsbpFff9VAX2BHUDcHZ3K4UMbosoXfODXQpDI/FDeBExW9CAc/NlK/AOOcP2O/WQ4jOXGlCCEJU2ZXdAdUOkXhegPCDJJcKADgBLLCBwoEciAYKoWndCdwqXT0Hwh3bQbOXicrJcCXI6O3ESB4bQAyNYRaCDfieOIopOE7B4dSd+XEKyXiRrDI4PPzdZbVMlbOCXTI8MObPtZKDbYdFbHyNbY5WonPLbBo3bedFordGvMvO\n\n0To9KRWXoqvfondOeG7SXcqZvB7NvKsDvYFS9XvH4soWY3AciRYhvVAZY5FHgCQ40MHWaTSA4eOGyefP9RfVY+IY4/ackZcI6XYbiEESla4+DRDQ/I8Y/R4rA14rDVBV8CDcEf0vlaXC0h/f47zCAF/R4uVOVMAT/YsmVd/DVBksrZkhadEVpatcAyAzOL2HOYJY1AXPlM1AwC1TmDAmXQTQWXAj1J4n4KQ2WIcrA/slWVQ/1GXPWacsNcQwEyNY\n\nBYgtQM0BwjJfAbAdEtNH4Y+KOTETsIkK4T4PYXiZfMI4tLYdSDiDaPVT4f+eST3JIv2cSP2bEWERrL4drcMEPTtbtBPMuMo7PXZZbNPCADPGo8ozbadC5Oda5HKLU9UlUivI7e0TUw7WvHUr5PUo9Q0sYoFC9d7K9UzQNfvY+OYtoW0l6QNW+LDeZZZX3WPWHbgZ8AM3+BVTsB4N4Grc6SM24mM4gWBJlC0xM4XH6WPQ4D4b44cvlP4jHXMtNCQA\n\nAHmUsY03FIB3DEAAD5tK2NeM4EdRyBGjyAKBrEmEIBVL1KmAtKEBdL9K7NIojK7xLkuFxN+EpNhFRF5NWLFMVYZEtE1MjRNM1F8AdMXYdEfg9EohDETMlCqwLNLF8BzKKgrLsgbLBQ7K9KOADKnLZRGinEXE3FWAPNUAvNuUEB/EO0gkgslyQsVyKhGhSAcl+IYAqhagXgjAEs2g2gY10J9B0J8Bk0SEViIBPC1k9zARHcb92lcROxQxK1eLbhuB\n\nU4HhgCgRA5Pj+SEja1lxEgE0hlXgiRHzLi/y0Q/CrgINQz6z7JAL1lgKdlRTwLILJToLc9O4dt4K+jMLlTjs+lLjNlvq2ixq69dThiW9HtT1ntO9JizTr0ZieoKLcB6hqLRpR8gdVjnS6K0QI52IoNlkWK0AWt2KPLLgOw+JpKup+Kcy7jYyHiaLnixLHwcM5kQQlqMTCMzNfiBUIFaV9DgSIBlYABNLYCcFrDJdYXABw9YWoBLPCOATAWE8iBwx\n\n2Ea5FMahAaYCaj2IuALC4KmYcMXbia8i80OdaBIDaWPCEE25Zba0oRItsH3PVXEfYKOG60oM6n0Uk5ZLtF288221ZO60otCkUsCqoo5AKDbd6/PRoq5IGpUnolCk7AGjdDC4G67HC8G/CqG8YmGt7HuaYi08igsWoVG/AlGMfbgNYuqzY2cKSa253Qm1AJcEmnG2PCXLOU2nfWDKMoVLHe4nHGXJm2aZMnSI6IkGSrA7MhS/mhqiQPCfAJIQgZWV\n\nw/QHcyjSatAd+HEjar86EX2MSUIs2rrLVKyBaPYDaeaOsu2yAB2omt8ybSEYcSERaPiLIphG+uYoO+bEOqU0Cyoxuao16kC6O2Ur6tOhOiucvZOyvBUkvSBjOu03C+7f5HOwirvOG0i544uvqIRMu2S0HFBf3c3HsfY30o+jTH0kDQM7gQ4LtNMp8qmnugS/uumwe0SpBC/UeyHF4Serm2XHmhDPusYazCAK2YQUgHyjjMy0R8RkQKR0TbhDxSTZ\n\nMLyuTBTcMUhcKkpBARRYKlRUK7RnPSK8MaKozIxeK8zUgCxDgKzGxCQORyRu4EkVzYq5RzzUgbxCqqq4bWaQLWe86C2XYM0M0OAUgLCIEKodemxTe3gKyHE90gyfVa3E2u3cECmKyV8K4X2QbOkvpCONiPiM+/YQ6iOLuqQTkouYoxPX+6Cp68OzPKOmUuCwveUxCn6xOv6ro2B9p9O0GzOu7A01B9vM9POqYkiyxu9RGgsYa7Ui+O0ic10/iF4M\n\n+haJusSVu5m63COK4S4qlPfGmwS4S1/BMzht4iS4ZD3DMnlLM+S3mp/caURrUAgRUZxgqTjex9AZ5pmUgN5nuNy9x/pVRmTbyjRqsLRgK1TXRxokK7TSFmUExqsMx2KrBv0axyzZKp5l535lzIq9zTxTx3M+iHx7I/xmugwioHJakIwLUTATQIEbAZLWneIBAWnSwoOVJdElMdFUyrEjajSNYeOaHBZN4K6u3TYP2CPF8Y4amWyZ8qup4USeZfEH\n\nEWEeIj2yp1ASOMSHSGyfYVtT+wUh6lPfZQBiOidP+0BlpnuZo3pyBzZVU3tZIHp25BB/ppBrO4Z400Z004i80ghw+aZvqBw/BxZqfVpY6E4cphfORVpTZ1AGfMek4bfK45hw51hoSuMhmwXLhlm6814FNoGe/O5oRg/KsfM3HRYIsksjGb/WVD/KVTVbkgkzpIZL4Ms7GD/bVL4DOE4Z4XJjVCAskqmXiFrMXYEGmWq41etjVLVUV14dsKtG+koc\n\nma3UM7SYmb6Dtqtv/He9d32d076Rt1YTEZ3JcK6gO7dkoIsgLNdn2A9gyI98AzYGEBijdw99tut8s3GU9+aXVXNOI4uFd0bTOAyN4YAvkqdxAmdn9zsCXBaeZD4oDsmR3KSjBFrKSftz96d79xYF9yk+9zd9VxYZwdSM+4ERrWV1s6D3DkoTYdsDsJcP2Fs5D5wRIF8A4CNucWSQ1L9ztjVTYVM5VzSGEJD498ScEKSbSLpbDmj/jlGQTpVqSETt\n\nV1j8SCHLFMe9kq93/ATxV3VFV0TgdlGZwbVz4PG/VydnTosxTgzlTsT8Asz3V5cCPKz7/ds8twIcsEQcIIi5yQgfQLMZBLCLz5gHz7gcqjslArstA4ga1HmN/BT/T4T1Vhzkzpziz1z2yemAJgnVTBwrCXYZgCcRnDOZwLCIiLCM0I4ege2XINW2ibllsXl2JqDAV6yclRrXEBtYkvwjYWsnEG2922+2tdSDayEBaYZA1jk6qkMYdvYKSHYJ+uVg\n\nU7+oU1yP++ps1xpy15pz61phC11orX6ldE7LVCRQGiB47yARBoYwZkYyGkZ6G31guiZhGgfOYnJUN/h7Gre7iPiDaW3Mh2NiRGNtfVSZZTSda7ENHA5hS2mzN+moes5pMvNqmZi65zmwNae+53MithGeTyVD/azrt0V/VzayD49udiHAydI3jnDwn1GYdmOZ8LsSn8A29mEdERjri7TvjndisimSyab49uIbDFreZADuEEnjVOIOD+Oaydayd49+\n\nj7SF4RilrGTqDsAH/GzyIt9h9tt1jxVT42PNX7JwDmXpL1M+aK+9k499SFrIOMXa3PI7L/n690mE3wk7ScbQkYjld9j8bLjlHPnhngXlGR3eOF4KmeSE6tTwLaHI6ucA1ajnXmDxYKPta2Pw+gO8T7YN3C41266tP3X0mVDwPdiIzgPsmMzsleSKmabq3xYMby2ybltZXjnyAsSa3CXbiVT5vkoVvib5tLL5dsmdEeb3NJbra7XsvjVYfr4UfkXr\n\nvqfxb78yDhA9P4VULnzl7m+ALoLzcELr0cLjxrxqLlmGLy1OL3s17RGRf9vsfoDkSanhb18Df93xA3L82CoDJVUVwLgCtjKBNAOSZoEICqBYByIxAeIDSEyBctAgzXSgFiVNw6QvgJaCOOexxThgw43WTAUdAgxUxsUxnEbidlV6Md2kEHFblWE9rN0ngEIKvgfXj7VMgKtTEClt1WxANI6u3WCvtxtZtMjuRoB1rWnO4utWibrbCh63u4Q0jSpQ\n\nE0n5w4SF0A2UzD7rgDcJ/Z5m2bNFHfAWTDIcQ1uJuuiHjYRxPgG1M4Cm32Y3F029KAeiJWUEvEUe4lLSDsBdx8NseJbaMuWwwKVtPes7RtrW3D6+CUYJZIduHh5IvhN+HvXTsEO7bWReIA2GvquxhCEcP2c/DPkz3na08l2rHMXs7mU42R0E9POThH0WABYNgw4bZkN3H7OB8OBvIjmkNo5gA5eG1BXpcAnbUCTOIHA2ppBeAsdB+YAcgdeUoEsc\n\nHeYIGEL73ODEDZO2/RngMI0hq8mOVA6oWRwYHW4mBqfBobMMGGLCRh4BFYZrx9iiR4+W/E1GE1P5ecFBAgQ/kzGP679AgEXQll+E7JsxYu8XJhHKm2HDD2eJnfYYwKOEbCcu5LAWiREwBtAgQu0UgLTmIAERmghACgIhHqD0A7YjQCwAgJ5bIDWu80HEnOBeALRIe5wbAZeWEhdoEg0RQOMqyw4SI76yRLNFvnkhrs0uGrWbrNFQ65oc0U3TvrdR\n\nKI/1kKVcTbmHW25QUQGe3AvPwMO7iDruUDJOn0lEFoV46ko27gegSp4UvWcgn1pcIYJKCsCODE+HhG+60Ulm4wq3ISOUTAZAQFDBgFQ3B6zQM4EearGsyYbo5ceCPY5vGX4bD1L8ElAOEdHZpFtbmgjTwc/m8EE8ShqMfwf0KHaZDF29vLtuHjmR6olkRQmYaGLJi1CFk77R9jX2aEcdnwURf3psJTGkdaRz4CNohxIElAQOseT9DiDvJbsohRZZ\n\nwBJ1xrScjejbR3q1jd6l90htfAAuZz1bP82x9Ag4esMvb1jHOyQF4PNEkg0ka+QfLgpNk7DQ5ph8/dLhOMuALQpeNfJsdDjyJLglhBYoISRznETZlm+Yxthl37FN8xxg7LPjH2eC59huJQUEPxAlwLs1gZxZcd2JqHzCe2GwxtpPyGQ98Nq6IOpNL2vExCwhWcCIR0NKHNDehwBV+mBMCHRDFgXQj8uB12EVkQOgRYAhBjZJJiVxLfYsfB0pKMjS\n\nhJvcwZxwvYETux7YsMrP3/FZ9XOltRCZ+MaF0S2s3wlGMuASCUSsBJfA8ShKH5jDOJMEkoH7HmGQhd6nYwSUWWH4kSyxNfUSNsHdzsQ44lvcCZn0Kbj1lkhQ8fu0h3p4hWkpKWIkhOKGHiKxFtB4L7wJBLjkOz4x+G+JbF1jkJRZbMa0KV5iSwAvwtYf8NHGuTYxGccIZhJRiVi2SrwcbnZIjG5CgpFNASY2xikS9JhM42Sc+317pjDeT7Wdt211\n\nQhF/J5koSamJ/ENo8+DZZth0k15G8IxtnFLtX1Y6NkhhbwSqS5IKkNiapynVLuWLACc9WSPPfCV2MaHfihOHUuqf+L3bc9ryvPAiR52fx3DfOGDDKNcOC5zSHhF/QGM8O7KiEEucqIaUp0M6qcpUPUiadeX6lQcEwP/CJBAC2CIQ/AE4LCDoS1DxBSAWoEiFqHwCSA6QjQegEYEfQNcKgTXTwFQFiZrB1IS7R9sAQDzlMw4jufiP7WG6/BdqcE18\n\nHiGzScimRvjAydbiMkQhyaOTYjl/W5Hrc+RdTAUZwPNZZ4dkVrPgRwltaCDl0jraZBd1TpwNq8Co91nd2VEoMT0T3XOvv1BRvci6VpCcPqOeK/dkifEfYMEXZoxsca8beONHxWQEpHRcPZ0UcyzbI9WUqPK/JZGiJuDniOPUtg8zzLBj7+swmtv0JrbM9yebPL/q1MClNleSXk6nizwp62zkxFk7qeNNeAfB5odkhKSpJzEGQpsUUzSfKl/ZJTNx\n\nyHQYSk1aTsQqpocsALeKGS6T4p5fbYIHmshyRLObswiSUG3GXAxcKfUqRqn2rzgs4IIKSW5wCkao6+8kLEFlJRj5zdxzHSIdXO4mc8loi4huYsFBByRbRnYacRpLbmwTT2dZRtKxOQ6T83gXwSPPXLYmzDlJnYBvijNjxozShb/CEMHHzH9DF5tteSMCFXleTMZuIBXiZLxmpSKySM/eajKPnd8jaffUCfPJTG7zl5B86pLfJmRASH5A/dzoELzJ\n\nzS+ZxoJabcPOEEs1pjMDaa8Lv6JcR5S85GW/LXndS75vfECT/O/5Ai566AFJPbFqC+w6Q9QIWmAPWAwBMA9ARoMoAcJGByI9ANEUgKBk61eA8kHEu0gpoQgKhZwYkvHDYgbUjobwQkqnJ2pkDkul4teRU2ZHyTSxlIlgfdTYGPVSZ4pLgRazeoijY6tMiUUII6IiDnWcoq7h8nrwczzMKo7md62e4aie88NQWUGxPgdARZ00DFMcDQGHBvSZogDP\n\nGyjZYg9gGPYBNTXh5qykeHDTWU4PfGvtJcfo+wQbMDGQB8epslMebITkNSoJIU0oeNLYInTr6F87iV7Ilxi4dmNfNMSkMzEZLFgMUqiW7XH7e9sM0EgaVsPSkFLWxac6PqGUaxcFCl/QwYaGBBB09x+EihDpSLaXCKXOK/BfsRMkVId+lQnERV5J6WkSzJOvGaVEoAUajWAgXG4QgBP7ed7h5/IlpApv5vCQxdHAZdnOXbTLFJZ0i6RbDpAZJTgF\n\nAfAEIigBC1ac5EOkMQB4AdAmQKUM0FqCBC0LAZPhfEIqizh+xFkeImEMSQ4hZobIvbBgR+KpG1o5xuY4Od3LEW+MOJMk6RcHV5EDp2B8i/kBKW4HKLeBoommQIPUX0ytFTMjUizKQqlBFRghTmUM2MVqjTFC017v621FWksIti7QfRUlbtImShg5xavhOKHEhkorXSLDysG+KM2rorQWfkcHM1tZvsL9HrLBikZVZXg0VPssKlxLh5TPOMXEL7Zk\n\nSv8uqz2XewzH1LZ2/Q9yR2At5dSElzZVuXbI1RoSwOvQricUoDn3wJcRyopSUCTkpM9JUc5LiNLQVOqUYvwpcFXwOlpy0O9dCkWMoTnwqg5Xcmvqitn79Ck1eYv2aTDTWOq5lf8s4Rsvmmw1FpKy5aaAtWnbLouLw3ZdArlSZrEVAfXNbbPOkYLAmFQZLMrHqBmgEA1SVkKcHunNBdgQifAA4VICSBE0bIP6RIABktcGFccqsrhO7BDIHgUMlYO2\n\nASDggiQmXIZfbVXQOTAJx5Uab+U1YXUuIOaYcEkoJk1NMVodABmTJ24Er6i1rYleKMVKSjhBZ3bRZivlF6Kwa0g7OjzPQYlrWVFi+wTqLmLJYuVhDNqE4uqRs8m6MOYHtaPll1l2wFgnxeqpsFsM7BpzQJQqokpoCCamPYtgGOEZRKTZMCj2TqrDXoxYhvbBIch3tWOzqlsS+jfEKkW7s12x0qaaxuo3sbDVXU9yVKyzUtT3Z2qxthUvKF9D4lg4\n\np3qJL43aqrZUrG2ePwcmvjySzkp+R7LKEFtKhga/8bppp7RiaJjQ3TRUONoGa/8uQtapFLE25ymh4c/9lMMnk2b1etY7TYVMSnOaUphm8yMZq6W+rHN8vT9J5P0kdzT5uMoebRoOWvsMp9Q/8XfIuKYcE1JqqTSxvsn+ENNi0LTUFo4kBwshMYmuWuNHYtYYV/Q/Ocn2YGkwLxgyquTFqQWfzyRKWrqU3JxEtyc53Yl+U5JhVyaOx6ahOTxO0gyR\n\n0lkmqydJrzUObWkhTSWb+OLmhSEmVY6yDWNyVBbptBAqvlZEPnlLFt4UlbSHJNXe0xcH5buZZNmR7a7Nnmm9o7w6StI5k2QxtrZwhkvi6pO8lYZcCphlKg1NvXVNiFe2DabtbwO7SqiK1Jc4tdS+zV1uwnVjLtk8imEbTkiBqd5SW5kqcv8HKbWeMk/oS6p6H7jj2PUiHVdrSkMd5qnSh7WlPB3mrIdg09TcesHY46MJk2r8d1rUkTzj2t4y6nHw\n\nBEJyRI+HCuVKxO2JCOdOfY4TzoknJCWSz4QXax2F33jRdbZAtYspZUH8y1ICotZWqeHVrNpt/MQlRon587JdgCC1SR1l1c78prasABsQpYSAsIiaTQB0GaB4Rl60TRouUmBDexZk4ID4FJA2ow8cB9wCDKeykq2r8Z1Is4LxP4g+wQd8M2gYazW7Gsh0OK9PHiqUXCjCVqikle+o0XQMZR36k7r+oGL6KlRhirmaMTQYTF86iggWeBqtJokNBz6B\n\nZj9yWbPhfYRTFNjLJDDxsdg74X3l2glW90y22GxHuw3sEejkyOIBZJ/TCVT0PB5GyRJ8wgBMh0qMTd5jIwX1L7dyijdyio0UayYxEvlTRlInhbyJoW+jQWIY2P3aJ9MUVQzCi0maVB0WSVFKhIA30b0BSrjfFhruuaVVT1ZLS3UCUwUQAqgOSXYCkn0CnAHCv4adTnjf3FY26TwI2teTYWFyLRYcYEHEBhChlo+kPVzvKyHA3lJs4ZM+W/RPXMi4\n\n9hMhPRUVNYPqhRlMlRXKTfXwMP1mir9RSpeRUqOmINSQQYrMRGKy9QGiveMzZX8MINuALUNBtroQ95IUkQBIhslxg9hVr5apMjOI3eK02UqofTKo1lC4CN0EnVL6MzLhLZ9g+x5gvucqbhlAfzGlR8wsrmGEAlh1ymJkBYCJ/mILdRgfvBZH7NEULPRitC0zqJL9emAzPojv0y5EqtjTFmYfyr2GrDJcD/SVTAVEtfMzIgLK2St0C0oADhAYCRHo\n\nDKBESSaK2EcGIDoRdgWoAYIGAoBFhoDGtLWndViarBA9y4MSC71U0SI6s5wNiFcDwwfh2hlxakegbJKQg9q0fAbCm1j1EgJIzRilGitW4UHZFJrEdIKOAZ0H09DBgvWhQZkp1KVdrNmdweL28HS9j3ExbzLMVaiRDVpb5fXpHwV0Ma1df/dyskxwFslSsqsB3oTaXEFDNDVSJMNdovG+K6hrZS6PVkBKdDI9HDJGpc4qq5KZGvmm2ry4SBEIcAEi\n\nMoF2BXK161RzfXAZNxXBN178XiFuuvLxxeuQyBIASKl3zRQJKbakWMc1bkGb1J3O9dQYUXkymmqx8BhweBqfr/qYgrPYXv/X0qHusgyAPIOV38zhDZFK0usAkMCBXSr43iF0ellUMq6cs0MBhyFblNLB8GSLtKuBOj75VYJ94jUmWgkb/Raqw2YpVEZ0I19FlRw0o1KouGOEajffUTT8pGM6Ip+vwxfu8MItr9pjW/cZlRZlRH9ER5/egFxZuYEj\n\nX+3xJ6BJb+Y/96RwAyRFODJYCIQtTAFbGSxbB6AiECgPoDwgwB5IdIZgFqBSTol8s+gQrD4VI5ap3goyF3nsFxBIaiRJJTYFcGOCLQXw0evo6ulb4UcfYCE3zaQYxlZKfZq29FTyIZP8j71zJx9WnufXUy1Qai3kxsdQo/rdFfJgZgKZkEEVBDmDe/aIfiD4MHS4+dYnYsBAJxJ9Rg4HmiEVPAZrRrSf6BLhFz96Zo2pzQ7qbw2gnPRaCb8sTRNN\n\nGGYTAJe4/VXbUSAzQVsJIBkjwgcA8IwIQgPQCBATgSIzAGACE2YBAhYjldGdYgN+WxNA9uxDaN1z9omjlqTrf6C4M6mh7a0T2zOaNqHPZEkZUnP3tmq5H0nOmWKuRdOdxWKKKZpyec0SsXOZ6mD2e6Ud0x0UcmJBgxfY5UD4NHGmVJx0U5qOr3sqrFcxK2NKZdIzR5IDZ13redfg+hPwyGxQ8OF9j/QHRahp0WVUeF+KR9n53NtrKZJyQoT+CQC3\n\nj0o2FkG2xPWTWVLCEttmpRO7KfqoY2cbB2DUvy3HOp1myBNjG/HXu0J1BbnZXaAOL7NO0T94dHSzSFUrW3w79NAikzu1P2mpaGt7k0Lb0dY50SGOkvFzf0sp2ZTEhdfRbimSvEmqaLdvR8RPw7kfAu0zWA7Q1tas8dqhL85VjpFsmRWUx/Vui4OyGtMXRry4+Zf/NAWALllR/NZStMBOX9UCta3XR8P0628BrL/aa4K1mtnK4Tv/fUAlnWBmgKA2\n\nAWoPQBSzfStQZAOADkitjYAeEPyudVieEgdG5oCvPthcCuZEj0Q4kRjgZErkwSEZZ3d+lyTJ4qaZjrF1gbeqnNMnuLLJngfxYz2MHWZIlrpmqXz3rntSUlulSXoZX8HjjwGyvWKbA0qXVBbOK4y+ib0zQ7RnxIKU3T0vfxFDAcSHvOAMHKzJV61nU/4r1P4aDTElGsm8GcuMxjDRs6JXrurbhjvLoV6K30sVsmdnZ1srHarZI7q24bA2hXeZIWtF\n\nqlrwC1axWoFsQKtdUC7a4jE/yRiR2utx1RboTOgX0A6ZsXMljYAdBmA5EXYLUDNCaB4gzgaWFhDgDxB1L1R8anUYYU1CTeEcNpGpKX6GWiRRkrNHHB2C+w9gFKKk7tUn6x4uuk4uSI1g4jQ376OJDIuWmWSmWOw45omRxYWNilUbs5lYxjbWME3MVDM2UWuYku7Gibt2Lc4BvJu7m/W1N846pdwCNAjz6NFYncY2Iym7459SWVK0MFJ3TRQqr4yP\n\nXfY4yIyAJqy+AvTzY5cN7o/U5fmvLYgUcfxnzDcwAtmnIYkEcAFjDmJwA4AOoZBGjTGDDB4BJSaqqMAYCEAEAFAciCnt4tDpVQoDsB3yAgBME1Y/GTcPoCMobcSZXFyByIC7jNBYHgDni6yZbs/2oHqD2B0IiXPCWcHKDmBxkHge42nWm0ZB9A+yBoOyHzMnYxA9wekOBq7M4vdQ7wcZAOgsl2QRw5YdCInTPlF04UD4e0P8HALe02dFEdQA6H+g\n\ncym6aCrEOaHMj2By/cFgho1CshaR7I9qAqEDYM5Q3DziUecP9AIaJJOrRbgQPmA2AWkJqFLPfHb2+wCXF1fg7nAf71j2x/gCFqAhrcWaBDo1j4i8LeKEAIwGwAMBv2toBAbxEEgYrYhFc2j2B+hDhRfIuD4oCByKBIDb6IeP9jJ8QB1AIABCqAKh7k7whsAeouj3AJoGCDWCIw1jYB/aXDDkRmQFsUgCANwAAAKeOP6V4AnBqAPT7p+dwACURoNx\n\nMoCC47JWnAoTpwYN4AzOq+fToZ7zhrrSPyHCAbh6ok4CyqqbbiPMNYyHJmwsglT6p1GdKDYAiAhTt85AFsaf3d7uZYQFAFKRbL4n1QTWjkC1C2M4ApT8p7YyqcsMS40weCwgEaBhP8AET8aKNTCDBAAXa0KKswRcRyOViM+1y5rpVgAvGAwL5kOGhCTgBQkTRYIBWH5z1ggAA===\n</code></pre> <p>%%</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2015.44.08.excalidraw/","title":"Drawing 2025 01 22 15.44.08.excalidraw","text":"<p>==\u26a0  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. \u26a0== You can decompress Drawing data with the command palette: 'Decompress current Excalidraw file'. For more info check in plugin settings under 'Saving'</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2015.44.08.excalidraw/#excalidraw-data","title":"Excalidraw Data","text":"","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2015.44.08.excalidraw/#text-elements","title":"Text Elements","text":"<p>Queue  ^LG6UAw0d</p> <p>Implementation ^VtZH1j6q</p> <p>Actual  Storage ^AyQUJXYq</p> <p>ImpPntr ^dtToxZ4p</p> <p>%%</p>","tags":["excalidraw"]},{"location":"Excalidraw/Drawing%202025-01-22%2015.44.08.excalidraw/#drawing","title":"Drawing","text":"<pre><code>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\n</code></pre> <p>%%</p>","tags":["excalidraw"]},{"location":"Hobbies/Hobbies/","title":"Hobbies","text":"<p>This is where I try to keep up with my hobbies. I like guitar, indie game dev, programming, art, and makin' stuff. </p>"},{"location":"Hobbies/Art/Anime%20and%20manga%20influences/","title":"Anime and manga influences","text":"<p>In trying to determine what kind of art direction I want to go for in my personal projects, I'm starting to realize that a handful of artists are responsible for a lot of the anime I grew up enjoying. So here's a list to get started.</p> <p>Yoshinori Kanada Kanada is a big name in japanese animation that I wasn't really aware of until doing research, but yeah, this guy is pretty revolutionary. Key animator in my favorite Miyazaki films, and very influential in animation in Japan</p> <p>Rumikko Takahashi She's responsible for Inu Yasha, Ranma 1/2, and Urusei Yatsura. </p> <p>Yoshiyuki Sadamoto This guy has worked on so many shows that I love. He did .hack, evangelion, and other Gainax stuff, as well as Summer Wars and I think a good number of the Mamoru Hosoda movies</p>"},{"location":"Hobbies/Art/Anime%20and%20manga%20influences/#extras","title":"Extras","text":"<p>https://www.sakugabooru.com/post?tags=neon_genesis_evangelion</p>"},{"location":"Hobbies/Game%20Dev/Game%20Engine%20Requirements/","title":"Game Engine Requirements","text":"<p>As of right now, several popular game engines have fairly large drawbacks in some form or another. Here, I'm making a list of requirements to narrow down my search for a game engine that best suits my needs.</p>"},{"location":"Hobbies/Game%20Dev/Game%20Engine%20Requirements/#requirements","title":"Requirements","text":"<p>1) Large World Support via double precision floating point 2) Extensible character movement  3) Inverse Kinematics + Reliable Animation Workflow 4) Decent Networking Solution 5) Terrain Editor 6) Minimalist API 7) Languages: C#, Python, C++ 8) Workflow for whiteboxing levels 9) Sane Input scheme</p>"},{"location":"Hobbies/Game%20Dev/Game%20Engine%20Requirements/#godot","title":"Godot","text":"<p>Cons: Stupid UI. No multiscreen support, buttons don't do what you think they should do, etc Very opinionated composition No terrain Broken IK Basic input scheme Weird object orientation requiring registering classes via addressing in a gross way GDScript sucks ass</p> <p>Pros: Large world support Extensible characters, but not great Okay networking. It at least supports it out of the box C# support</p>"},{"location":"Hobbies/Game%20Dev/Game%20Engine%20Requirements/#ue5","title":"UE5","text":"<p>Cons:  Overly heavy Intrusive API Opinionated workflow Terrible whiteboxing Complex networking API Complex animation system Poor extensibility for CMC</p> <p>Pros: Great input scheme Good terrain editor Supports IK  C++ Large Worlds</p>"},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/","title":"Godot vs Unreal","text":"<p>Since Unity decided to not just shoot itself in the foot, but all blast all of its limbs off last year with the whole licensing debacle, many people have found themselves abandoning Unity for Godot. I tried Unity in the past and while I didn't enjoy it, many people have and find themselves wondering what they'll miss or how to adapt when coming over to Godot. I personally find myself in a situation where I may have to leave Unreal for Godot, at least until Unreal receives more proper support for Linux by Epic. </p> <p>Godot as an engine has a lot of good philosophy, and great people behind it. However, coming from an engine as robust as Unreal, there are some pain points. Here, I detail pros and cons of Godot vs Unreal.</p>"},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/#godot","title":"Godot","text":""},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/#pros","title":"Pros","text":"<p>1) The biggest strength of Godot is it's philosophy regarding scenes. Everything is a scene. The terminology comes from rendering, but at its core a scene is a root node with children. Everything is a node, or object, and can have children. Godot has very sound logic 2) It's lightweight / small 3) FOSS 4) I've seen some pretty games be made with it 5) Good documentation 6) Very rapid development/prototyping</p>"},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/#cons","title":"Cons","text":"<p>1) No terrain editor 2) No built in IK? 3) No built in handling for large worlds? 4) No advanced input system (might not need it though) 5) Graphics aren't nearly as pretty out of the box 6) No lumen / nanite 7) Very poor built-in AI 8) Very miminal networking</p>"},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/#unreal","title":"Unreal","text":""},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/#pros_1","title":"Pros","text":"<p>1) Nanite / Lumen 2) Strong AI features 3) Terrain editor 4) Enhanced input system 5) Stronger animation system  6) Root motion / IK 7) Lots of extensions and store 8) Huge community / lots of support 9) Free 10) Better graphics</p>"},{"location":"Hobbies/Game%20Dev/Godot%20vs%20Unreal/#cons_1","title":"Cons","text":"<p>1) Confusing paradigms 2) Poor documentation 3) Old/poorly maintained architecture for non-new features 4) Heavy / big storage requirements 5) Editor is cleaner 6) Has a LOT of issues in Linux 7) No probuilder type option (from Unity) 8) </p>"},{"location":"Hobbies/Game%20Dev/NVidia%20Character%20Controllers/","title":"NVidia Character Controllers","text":"<p>This is a very useful guide on the responsibilities of a character controller and why we might use them instead of using physics bodies for our characters</p> <p>https://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/guide/Manual/CharacterControllers.html</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Blueprint%20Properties/","title":"Blueprint Properties","text":"<p>In general with Blueprint Native Events, when you call the base function, so in your case HandleSomething from C++, it will automatically call the Implementation, but first it will try to call the implementation that\u2019s overridden inside your blueprints, so you don\u2019t have to call that yourself. If you ever do want to add logic to your blueprint overridden native event, just add your logic, but remember to call the parent function, which will run the C++ code</p> <p>My example:  </p> <p>[</p> <p>image1036\u00d790 30.9 KB</p> <p>](https://d3kjluh73b9h9o.cloudfront.net/original/4X/9/2/8/928e06e87c1f98342a7404b4f30c79c8f3cb0f3d.png \"image\")</p> <p>[</p> <p>image996\u00d7104 16.4 KB</p> <p>](https://d3kjluh73b9h9o.cloudfront.net/original/4X/a/c/f/acfff5bcc18329a4ec89321bd91063e5efbf7c80.png \"image\")</p> <p>And just for showing how it would work, if I override it in BP:  </p> <p>[</p> <p>image735\u00d7202 10.5 KB</p> <p>](https://d3kjluh73b9h9o.cloudfront.net/original/4X/2/e/d/2ed085262a8210ddab1705be7c1837c535ea3d23.png \"image\")</p> <p>The parent node is basically the C++ code. When I call OnDamageReceived from C++, it will find the function if it\u2019s overridden in BP, and call that first ignoring the C++ code, unless I call the parent function inside the BP</p> <p>if I\u2019m not mistaken, not overriding your function in BP will cause an infinite loop, because calling HandleSomthing will first search in the BP to run that implementation, but if that doesn\u2019t exist then it will run the _Implementation C++ function, which calls itself in its body thus creating a loop, and crashing</p> <p>So to sum up:</p> <ul> <li>Blueprint native events will call the Blueprint function first, if it exists. Unreal handles that automatically</li> <li>Never call the _Implementation directly, unless in the form of Super::Something_Implementation() inside the body of a C++ overridden implementation</li> <li>Treat the native event as any other function, which means that inheritance works the same way. If you override a Native Event in blueprint, the C++ function is the \u201cSuper\u201d, or in BP language the parent. If you override the event in an inheriting blueprint, then you once again need to call the parent if that\u2019s what you need. The parent in that case would be the parent blueprint event implementation</li> </ul> <p>Source: zeaf - https://forums.unrealengine.com/t/blueprintnativeevent-crash-what-am-i-doing-wrong/606192/2</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Camera%20Rotation/","title":"Camera Rotation","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Camera%20Rotation/#problem","title":"Problem","text":"<p>While working on the helicopter I finally got it to  rotate, but found I could only pitch and roll from -90 to 90 degrees.  For flight, we generally want the ability to rotate a full 360 degrees in any direction.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Camera%20Rotation/#solution-its-not-gimbal-lock","title":"Solution (It's not Gimbal Lock)","text":"<p>By default, the player camera is managed by the camera manager, which is managed by the controller (as far as I understand anyways)</p> <p>So what you want to do is create a new camera manager. You may also need to create a new controller and set it as your default controller. Anyway, I chose the PlayerCameraManager class but I haven't experimented with its subclasses yet.</p> <p></p> <p>In your new PlayerCameraManager you can set your min and max settings for view pitch, roll, and yaw.  To get a full rotation, set the min to 0 and the max to ~360.</p> <p></p> <p>Finally, in your Controller class, set your Player Camera Manager Class to the new camera manager that you created.</p> <p></p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Camera%20Rotation/#unrealengine-blueprints","title":"UnrealEngine #Blueprints","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Character%20Movement%20Component/","title":"Character Movement Component","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Character%20Movement%20Component/#pipeline-to-apply-movement-in-game-world","title":"Pipeline to apply movement in game world","text":"<p>CMC = CharacterMovementComponent MC = MovementComponent SC = SceneComponent</p> <p>CMC.PhysWalking() -&gt; CMC.MoveAlongFloor() -&gt; CMC.SlideAlongSurface() -&gt; </p> <p>MC.SafeMoveUpdatedComponent() -&gt; MC.MoveUpdatedComponent() -&gt; MC.MoveUpdatedComponent() -&gt; MC.MoveUpdatedComponentImpl() -&gt; </p> <p>SC.MoveComponent() -&gt; SC.MoveComponentImpl -&gt; SC.InternalSetWorldLocationAndRotation() -&gt; Sidesteps and sets the location with SC.SetRelativeLocation_Direct() -&gt; SC.UpdateComponentToWorldWithParent() -&gt; SC.PropagateTransformUpdate() -&gt; UpdateChildTransforms</p> <p>Note that slidealongsurface may or may not get called, but safemoveupdatedcomponent always does.</p> <p>The scene component is where it gets weird. At a point, MC.MoveUpdatedComponentImpl (I'm assuming this is implementation) calls and returns UpdatedComponent-&gt;MoveComponent(.....)</p> <p>From what I understand, the UpdatedComponent gets Set by whatever movement component you're using. The UpdatedComponent is a USceneComponent. </p> <p>The UpdatedComponent is the component we move and update. If this is null at startup and bAutoRegisterUpdatedComponent is true, the owning Actor's root component will automatically be set as our UpdatedComponent at startup. (From MovementComponent.h). In the context of a player, this is usually the capsule component</p> <p>The USceneComponent has a transform and supports attachment, but has no rendering or collision capabilities. Useful as a 'dummy' component in the hierarchy to offset others. (From the SceneComponent.h file.)</p> <p>This is all to say, that a scenecomponent has a method called MoveComponent. </p> <p>MoveComponent calls MoveComponentImpl which calls InternalSetWorldLocationAndRotation.  \"Internal helper, for use from MoveComponent(). \u00a0Special codepath since the normal setters call MoveComponent.\" (From SceneComponent.h)</p> <p>I believe SetWorldLocationAndRotation is what is ACTUALLY needed to update the transform of an object in the game world</p> <p>That's the pipeline for applying input to a Character class in unreal. However, there is SetWorldLocationAndRotation that is available in the SceneComponent, that can be used for externally applying translations and rotations to the component of an actor. </p> <p>SC.SetWorldLocationAndRotation() -&gt; SC.SetRelativeLocationAndRotation() -&gt; SC.ConditionalUpdateComponentToWorld()</p> <p>Once the movement changes are made, they're propagated to all child components, as well as its parent, and then the movement is broadcast to the game world. I didn't want to dive much deeper than this, but I believe that various house keeping things like navigation data is updated, and world bounds stuff too. </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Custom%20Movement/","title":"Custom Movement","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Custom%20Movement/#context","title":"Context","text":"<p>You're making a game with custom movement for things like air strafing or special movement abilities.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Custom%20Movement/#problem","title":"Problem","text":"<p>Unreal Engine provides loads of great features for developers right out of the box. Features that would otherwise have to be written from scratch, and in some engines (cough cough Unity) I've found that it's quite a struggle and there's a lot of fighting to get things to work. </p> <p>One thing that Unreal provides right out of the box comes in the form of templates. FPS and TPS games are two templates that provide basic movement, camera controls, game mode, and networking. </p> <p>That being said, if you want your game to not feel generic, or in other words, to have a special feel, obviously there are some things that you'll want to tweak. Many features are very easily editable, but sometimes you might want to roll your own implementation. In my case, I specifically want to replicate certain aspects of Source or IdTech3 engines, specifically in relation to air control and the general vibe of the movement scheme.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/","title":"Extended CMC","text":"<p>The Character Movement Component is the main component responsible for moving a \"player\" within a game world. It comes with a lot of adjustable parameters out of the box, and its default implementation is multiplayer ready. However, if you want to extend this component, and create your own movement systems, it is one of the worst documented tools in Unreal Engine. It is massive, under-documented, and rigid. </p> <p>The CMC has processes for calculating movement and updating those moves across a network, and across the engine. Most everything in the CMC doesn't need to be tampered with, but a few items need to be extended. </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/#movement-process","title":"Movement Process","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/#networking","title":"Networking","text":"<p>In order to replicate your movement process across the client, you must extend the FSavedMove class.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/#class-fsavedmove_-methods","title":"Class FSavedMove_... Methods","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/#required","title":"Required","text":"<p>Clear - Clear saved move properties, so it can be re-used.</p> <p>SetMoveFor - Called to set up this saved move (when initially created) to make a predictive correction.</p> <p>PrepMoveFor - Called before ClientUpdatePosition uses this SavedMove to make a predictive correction</p> <p>CanCombineWith - Returns true if this move can be combined with NewMove for replication without changing any behavior</p> <p>GetCompressedFlags - Returns a byte containing encoded special movement information (jumping, crouching, etc.)</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/#non-required","title":"Non Required","text":"<p>SetInitialPosition - Set the properties describing the position, etc. of the moved pawn at the start of the move.</p> <p>IsImportantMove - Returns true if this move is an \"important\" move that should be sent again if not acked by the server</p> <p>GetRevertedLocation - Returns starting position if we were to revert the move, either absolute StartLocation, or StartRelativeLocation offset from MovementBase's current location (since we want to try to move forward at this time).</p> <p>PostUpdate - Set the properties describing the final position, etc. of the moved pawn</p> <p>CombineWith - Combine this move with an older move and update relevant state.</p> <p>IsMatchingStartControlRotation - Compare current control rotation with stored starting data</p> <p>GetPackedAngles - Packs control rotation for network transport</p> <p>AddStructReferenceObjects - Allows references to be considered during GC</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Extended%20CMC/#class-fnetworkpredictiondata_client_-methods","title":"Class FNetworkPredictionData_Client_... Methods","text":"<p>AllocateNewMove()</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Gimbal%20Lock/","title":"UnrealEngine #Blueprints","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/","title":"Mover Plugin","text":"<p>Mover is an Unreal Engine plugin to support movement of actors with rollback networking, using the Network Prediction Plugin or Chaos Networked Physics. This plugin is the potential successor to Character Movement Component. The goal is to allow gameplay developers to focus on crafting motion without having to be experts in networking.</p> <p>The Mover plugin is Experimental. Many features are incomplete or missing. APIs and data formats are subject to change at any time.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#getting-started","title":"Getting Started","text":"<p>Add Mover and MoverExamples plugins to any existing project, or from a new Blank template project.</p> <p>Open the L_CharacterMovementBasics map, and activate Play-in-Editor (PIE).</p> <p>Recommended project settings to start:</p> <ul> <li> <p>Network Prediction / Preferred Ticking Policy: Fixed</p> </li> <li> <p>Network Prediction / Simulated Proxy Network LOD: Interpolated</p> </li> <li> <p>Network Prediction / Enable Fixed Tick Smoothing: true</p> </li> </ul> <p>This will have Mover objects simulating at a fixed rate, which is different than the variable rendering frame rate. The smoothing option provides visual compensation. Without it, you may feel like the movement simulation is rougher than the camera movement or skeletal animation.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#examples","title":"Examples","text":"<p>The MoverExamples plugin provides a collection of maps and actor examples, using a mixture of Blueprint and C++.</p> <p>Maps of interest:</p> <ul> <li> <p>L_CharacterMovementBasics has a variety of terrain features and movement examples.</p> </li> <li> <p>L_LayeredMoves is focused on demonstrating many layered move types, with varying options.</p> </li> <li> <p>L_PathfindingMovement is focused on demonstrating Mover and different AI-driven movement with pathfinding including NavWalking mode.</p> </li> <li> <p>L_PhysicallyBasedCharacter has an example of a physics-based pawn. See section below for more details.</p> </li> </ul> <p>Pawn/Actor Blueprints of interest:</p> <ul> <li> <p>AnimatedMannyPawn is the simplest character and is based on the UE5 mannequin character used in the engine's template projects.</p> </li> <li> <p>AnimatedMannyPawnExtended adds a variety of movement capabilities, such as dashing, vaulting, and ziplining.</p> </li> <li> <p>PathFollowingMannyPawn is set up to support AI-driven pathfollowing as an example of nav-mesh movement.</p> </li> <li> <p>BP_SplineFollowerPlatform shows a simple moving platform that predictably follows a defined path. This is an Actor, but not a Pawn.</p> </li> </ul>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#concepts","title":"Concepts","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#movement-modes","title":"Movement Modes","text":"<p>A movement mode is an object that governs how your actor moves through space. It can both generate proposed movement and execute it. For example, walking, falling, climbing, etc. These modes look at inputs, decide how the character should move, and then attempt to actually move it through the world.</p> <p>There is always one and only one mode active a time.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#layered-moves","title":"Layered Moves","text":"<p>Layered moves represent temporary additional movement. For example, a constant force briefly launching up into the air, a homing force that moves you towards an enemy, or even animation-driven root motion.</p> <p>They only generate a proposed move, and rely on the active movement mode to execute it.</p> <p>Multiple layered moves can be active at a time, and their moves can be mixed with other influences. Their lifetime can have a duration or be instantaneous, as well as surviving transitions between modes.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#instant-movement-effects","title":"Instant Movement Effects","text":"<p>Instant movement effects can affect movement state directly on a Mover-based actor during simulation without consuming time. They are only applied during a simulation tick and then removed.</p> <p>Multiple instant effects can be queued and will be executed sequentially as soon as possible. These execution windows occur at the beginning and end of each simulation step, including between substeps (for example, if the mode changed from falling to walking halfway through the sim tick).</p> <p>This could be used for teleporting, applying instantaneous launch velocities, or forcing a movement mode change.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#movement-modifiers","title":"Movement Modifiers","text":"<p>Movement Modifiers are used to apply changes that indirectly influence the movement simulation, without proposing or executing any movement, but still in sync with the simulation.</p> <p>Common uses would be for movement \"stance\" changes like crouching, stealth, etc. or other mechanics requiring a number of settings to change together.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#transitions","title":"Transitions","text":"<p>Transitions are objects that evaluate whether a Mover actor should change its mode, based on the current state. It can also trigger side effects when activated. They can set up to only evaluate when a particular mode is active, or they can be global and evalutated regardless of the current mode.</p> <p>The use of transitions is optional, with other methods of switching modes available.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#backend-liaisons","title":"Backend Liaisons","text":"<p>A Mover-based actor requires a MoverComponent (an ActorComponent type) to operate. This is the main object that other systems interface with. Unlike many ActorComponents that use TickComponent to drive updating, Mover relies on an external \"backend\" to drive it.</p> <p>The liaison acts as an intermediary between the MoverComponent and the backend, passing function calls or events when it's time to produce input, advance the simulation, etc. \u00a0Current backend liaisons can interface with the Network Prediction Plugin or Chaos' Networked Physics system. \u00a0There is also a simple \"standalone\" liaison that can be used for non-networked play with kinematic movement.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#other-concepts","title":"Other Concepts","text":"<ul> <li> <p>Composable Input and Sync State: Inputs are authored by the controlling owner, and influence a movement simulation step. Sync state is a snapshot that describes a Mover actor's movement at a point in time. Both inputs and sync state can have custom struct data attached to them dynamically.</p> </li> <li> <p>Shared Settings: Collections of properties that multiple movement objects share, to avoid duplication of settings between decoupled objects. \u00a0The list is managed by MoverComponent based on which settings classes its modes call for. Your custom modes are not required to use Shared Settings and may approach settings differently, for example having a self-contained set of properties or referencing an external data table.</p> </li> <li> <p>Persistent Sync State Data Types: There is almost always state data that you want to carry over from the previous frame, especially core movement data such as position. \u00a0Adding types to this array allows carry-over of types to automatically happen. Any state data not present on this list will have to be added every frame.</p> </li> <li> <p>Input Production: Mover does not deal directly with Unreal's input systems such as Enhanced Input. Projects instead should translate input events into InputCmd structure(s) that get submitted just before simulation frames, via the ProduceInput interface. \u00a0AMoverExamplesCharacter's use of OnProduceInput shows a C++ method. The AnimatedMannyPawnExtended BP in the MoverExamples plugin adds additional inputs via the \"On Produce Input\" function implementation.</p> </li> <li> <p>Trajectory Prediction: Mover provides a method to get samples that predict where an actor will end up in the future via the GetPredictedTrajectory function. This is useful in support of advanced animation techniques like Motion Matching. \u00a0As of 5.5, this is based on the most recent state and inputs. Options and customization will be expanded in the future.</p> </li> <li> <p>Nav Mover Component: (optional) This is a component meant to house navigation movement specific settings and functionality. It is designed to live alongside the MoverComponent attached to the same actor.</p> </li> <li> <p>Movement Utility Libraries: (optional) These are collection of functions useful for crafting movement, typically callable from Blueprints. When implementing the default movement set, we attempted to break the methods into these libraries where possible, so that developers can make use of them in their own movement.</p> </li> <li> <p>Sim Blackboard: (optional) This is a way for decoupled systems to share information or cache computations between simulation ticks without adding to the official simulation state. Note that this system is not yet rollback-friendly.</p> </li> <li> <p>Move Record: (optional) This is a mechanism for tracking combinations of moves and marking which ones should affect the final state of the moving actor. \u00a0For example, a movement that results in a character stepping up onto a short ledge consists of both horizontal and vertical movement, but we don't want the vertical movement to be included when computing the actor's post-move velocity. The record(s) for vertical movement would be marked as non-contributing.</p> </li> </ul>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#comparing-with-character-movement-component-cmc","title":"Comparing with Character Movement Component (CMC)","text":"<ul> <li> <p>Movement Modes are very similar in both systems, but modular in Mover</p> </li> <li> <p>Layered Moves are similar to Root Motion Sources (RMS)</p> </li> <li> <p>Instant Effects are a new concept, and are used to implement CMC features like launching and teleporting</p> </li> <li> <p>Movement Modifiers are a new concept, and are used to implement CMC features like crouching</p> </li> <li> <p>Transitions are a new concept, as a modular way to drive mode-changing evaluation logic</p> </li> <li> <p>Movement from modes and layered moves can be mixed together</p> </li> <li> <p>It is easier to add custom movement modes, even from plugins and at runtime</p> </li> <li> <p>The DefaultMovementSet in Mover is similar to the modes built in to CharacterMovementComponent (Walking, Falling, Flying, etc.)</p> </li> </ul> <p>The Mover plugin provides a DefaultMovementSet that is similar to the modes that CharacterMovementComponent provides. This movement set assumes a similar actor composition, with a Capsule primitive component as the root, with a skeletal mesh attached to it.</p> <p>MoverComponent does not require your actor class to derive from ACharacter.</p> <p>MoverComponent requires a root SceneComponent, but it does not have to be a singular vertically-oriented capsule or even a PrimitiveComponent. Developers are free to create Mover actors with no collision primitives if they wish.</p> <p>MoverComponent does not require or assume a skeletal mesh as the visual representation.</p> <p>In CMC, adding custom data to be passed between clients and server required subclassing the component and overriding key functions. The Mover plugin allows custom input and state data to be added dynamically at runtime, without customizing the MoverComponent.</p> <p>Networking Model:</p> <ul> <li> <p>In CMC, owning clients send a combination of inputs and state as a \"move\" at the client's frame rate. The server receives them and performs the same move immediately, then compares state to decide if a correction is needed and replies with either an acknowledgement of the move or a block of corrective state data.</p> </li> <li> <p>In Mover / Network Prediction, all clients and server are attempting to simulate on a shared timeline, with clients running predictively ahead of the server by a small amount of time. Clients author inputs for a specific simulation time/frame, and that is all they send to the server. The server buffers these inputs until their simulation time comes. After performing all movement updates, the server broadcasts state to all clients and the clients decide whether a correction (rollback + resim) is needed.</p> </li> </ul> <p>Unlike CMC, the state of the Mover actor is not directly modifiable externally at any time. For example, there is no Velocity property to directly manipulate. Instead, developers must make use of modes and layered moves to affect change during the next available simulation tick. \u00a0Additionally, player-provided inputs such as move input and button presses must be combined into a single Input Command for the movement simulation tick, rather than immediately affecting the Mover actor's state. \u00a0Depending on your project settings, you may have player input from several frames contributing to a single movement simulation tick.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#debugging","title":"Debugging","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#gameplay-debugger-tool","title":"Gameplay Debugger Tool","text":"<p>Visualization and state readout information is available through the Gameplay Debugger Tool (GDT). To activate the gameplay debugger tool, typically via the ' key, and toggle the Mover category using the NumPad. The locally-controlled player character will be selected by default, but you can change this via GDT input and gdt.* console commands.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#logging","title":"Logging","text":"<p>Output log information coming from the Mover plugin will have the LogMover category.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#console-commands","title":"Console Commands","text":"<p>There are a variety of useful console commands with this prefix: Mover.*</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#physics-driven-character-example","title":"Physics-driven Character Example","text":"<p>Included in MoverExamples is a physics-driven version of the Manny pawn. \u00a0It is an experiment within this experimental plugin, and should be treated as such. \u00a0To try it out, open the L_PhysicallyBasedCharacter map in the MoverExamples plugin. Make sure you adjust your project's settings according to the text inside the map.</p> <p>Other MoverExamples pawns, and the CharacterMovementComponent, use a \"kinematic\" movement style where the pawn's shape is moved by testing the surroundings in an ad hoc manner. Responses to physics forces, and interactions with physics-simulated objects, are difficult to implement. With physics driving the movement, the pawn can realistically apply forces to other objects and have them applied right back.</p> <p>This physics-based character is NOT using the Network Prediction plugin. Instead, it is driven by the Chaos Networked Physics system, which has many similarities in how it operates. Under the hood, a Character Ground Constraint from the physics system handles performing the proposed motion that the Mover system generates. The physics simulation is running at a fixed tick rate, ahead of the game thread. As the simulation progresses, the game thread's character representation interpolates towards the most recent physics state.</p> <p>Notes:</p> <ul> <li> <p>Due to the async nature of the physics simulation, there is some additional lag time between player input and affecting the pawn's movement seen on screen.</p> </li> <li> <p>Other physics objects that the character interacts with should be set up for replication. Otherwise this will lead to differences between client and server.</p> </li> <li> <p>Interactions with moving non-physics objects will likely show poor results, due to ticking differences between the physics simulation and the rest of the game world.</p> </li> <li> <p>Various gameplay events may not be connected or are unreliable.</p> </li> <li> <p>Crafting customized movement may be less flexible without also using a modified physics constraint and solver.</p> </li> <li> <p>Physics-driven Mover actors are not well-synchronized with the movement of non-physics actors, such as those manually moved via gameplay scripting (or even Mover actors using NPP).</p> </li> </ul>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#faq","title":"FAQ","text":"<ul> <li> <p>Should my project switch to Mover from CharacterMovementComponent? \u00a0This depends greatly on the scope of your project and will require some due diligence. The Mover plugin is experimental and hasn't gone through the rigors of a shipped project yet. There are many gaps in functionality, and little time has been spent on scaling/performance. Single-player or games with smaller character counts will be more feasible.</p> </li> <li> <p>Does Mover fix synchronization issues between movement and the Gameplay Ability System? The short answer is no. GAS still has its own independent replication methods. The use of Network Prediction opens the door for GAS (or other systems) to integrate with Network Prediction and achieve good synchronization with movement.</p> </li> <li> <p>What about single-player games? Mover is useful for single-player games as well, you just won't be making use of the networking and rollback features. Consider changing the project setting \"Network Prediction / Preferred Ticking Policy\" to \"Independent\" mode. This will make the movement simulation tick at the same rate as the game world. \u00a0You can even eliminate all NPP overhead by choosing \"MoverStandaloneLiaisonComponent\" as your \"Backend Class\" property on your actors' MoverComponents. \u00a0Physics-based pawns should also work well for single-player projects.</p> </li> </ul>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0%20README/#limitations-and-known-issues","title":"Limitations and Known Issues","text":"<p>See also: Network Prediction Plugin's documentation Some of the Mover plugin's current limitations come from its dependency on the Network Prediction plugin. Please review its documentation for more info.</p> <p>Ticking Ordering: All Network Prediction simulations tick before Unreal's world tick groups and always in a consistent order, making it difficult to implement mechanics where tight ticking dependencies are needed.</p> <p>Fixed Tick Simulation + Variable Engine/Rendering Rate: When using Fixed Tick simulation with a variable Engine ticking (rendering) rate, you could go several rendered frames in between simulation ticks, or even have multiple simulation ticks occur during a single rendered frame. This has implications for things like input capturing, where you may need to combine several frames of sampled input into an input command for a single simulation tick.</p> <p>Additionally, when the simulation runs at a lower rate than rendering, the result is rough-looking movement that is unacceptable for most projects. The 5.5 release introduces options for visual smoothing when using Network Prediction. Set Project Settings' \"Network Prediction / Enable Fixed Tick Smoothing\" to true, and set your MoverComponent's \"Smoothing Mode\" to \"Visual Component Offset\".</p> <p>Limited Blueprinting Support: Blueprint functionality isn't 100% supported yet. There are certain things that still require native C++ code, or are clunky to implement in Blueprints.</p> <p>Arbitrary Gravity, Collision Shapes, etc. in the Default Movement Set: Although the core MoverComponent tries to make as few requirements as possible on the composition of the actor, the default movement set has more rigid assumptions. \u00a0For example, the default movement set currently assumes a capsule shape. Some features such as arbitrary gravity are not fully supported in all cases yet.</p> <p>Animation of Sim Proxy Example Characters: Animation on another client's pawn (a sim proxy) may not be fully replicated during certain actions. This will be improved in a future release.</p> <p>Forward-Predicted Sim Proxy Characters: \u00a0Characters controlled by other players are typically poor candidates for forward prediction, which relies on past inputs to predict future movement. Acceleration and direction changes, as well as action inputs like jumping, are unpredictable and will be the source of frequent mispredictions that can give the sim proxy character popping or choppy movement. Consider using Interpolated mode for the \"Simulated Proxy Network LOD\" project setting, which will give smooth results at the cost of some visual latency.</p> <p>Cooked Data Optimization Can Lead to Missing Data: Cooked builds may have some MoverComponent data missing, resulting in a non-functional actor. Disable the actor's \"Generate Optimized Blueprint Component Data\" option (bOptimizeBPComponentData in C++).</p> <p>MoverComponent Defaults Are Currently Focused on Characters: The current component has more API and data than would be required for Mover actors that are not Character-like. Our goal is to make a minimalist base component with slimmer API and property set, with a specialization for Character-like actors implemented separately as part of the default movement set.</p> <p>Sim Blackboard Is Not Yet Rollback-Friendly: When rollbacks occur, the blackboard's contents are simply invalidated. Although the blackboard is useful for avoiding repeating computations from a prior frame, movement logic cannot always rely on it having a valid entry and should have a fallback.</p> <p>Multiple Modifiers of the Same Type: Currently Mover expects there to be only one modifier of a given type active at a time. This can be worked around by overriding the Matches function and use more criteria than just the type, as long as that criteria is reflected by data included in the NetSerialize function.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/","title":"Mover 2.0","text":"<p>Mover 2.0 is a new solution for moving player characters through the world. It's still considered experimental in this new UE 5.4 release, but you can activate it via the plugins Edit&gt;Plugins and then selecting Mover, Mover Examples, and MoverTests.</p> <p>Mover is allegedly a more flexible, and modular alternative to the CharacterMovementComponent. </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/#mover-character","title":"Mover Character","text":"<p>The plugin comes with two main character bases. MoverExamplesCharacter is a C++ class that extends the Pawn class and implements the\u00a0IMoverInputProducerInterface interface; it seems most analogous to the Character C++ class. MoverTestPawn is a blueprint class that seems analogous to the FPS or TPS blueprint character that comes with the tutorials, ie it has a mannequin and a few things already implemented. It should be noted that the MoverExamplesCharacter seems to imply a pattern for making a mover based character, not necessarily a single class you should always use. It's a fairly small class that looks to be an example of how you would write your own character. </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/#mover-component","title":"Mover Component","text":"<p>The big strengths of this plugin become apparent when looking at the CharacterMoverComponent (CMC2) vs CharacterMovementComponent (CMC1) that we've become familiar with. CMC2 is also a very small class compared to its predecessor, featuring only 4 stock virtual functions which end up totaling about 63 lines of code including empty lines in the CharacterMoverComponent.cpp file. The reason for its small size seems to stem from its modularity, compared to the CMC1 which was over 10k lines of code, very rigid, and very difficult to understand.</p> <p>CMC2 inherits from MoverComponent which is a bit longer, but less than 1400 lines of code in the cpp file. What makes it different from CMC1 is that MovementModes are now defined externally from the actual component, which allows for more flexible extension. By default the CMC2 adds Walking, Flying, and Falling modes to a Map declared in the MoverComponent called MovementModes. The map has a name for key, and then the mode reference as value.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/#movement-modes","title":"Movement Modes","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/#common-legacy-movement-settings","title":"Common Legacy Movement Settings","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/#movement-utils","title":"Movement Utils","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Mover%202.0/#fgroundmoveparams","title":"FGroundMoveParams","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/","title":"Rotation","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/#problem","title":"Problem","text":"<p>While attempting to create a battlefield style helicopter I ran into an issue with rotation. I first wanted to use the Character class because it has a lot of built in functionality like conditions for flying. </p> <p>In UE there are several methods that can be used to manipulate transformative properties, like rotation and location, of game objects. I had previously used a function called MoveUpdatedComponent in a Quake based movement blueprint to move my character after calculating player velocity. </p> <p>Flying objects typically rotate on the x, y, and z axis, also known as roll, pitch, and yaw. After getting input values and applying them on these axes and then passing them to the MoveUpdatedComponent, it wasn't moving.  </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/#solution","title":"Solution","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/#rotate-pawn","title":"Rotate Pawn","text":"<p>I tried several other movement methods, and couldn't get it.  As an alternative, I decided to experiment with a basic Pawn class.  In this class I used a function called Add Local Rotation</p> <p></p> <p>This allows the Pawn to rotate in a standard way that you would expect from jets or helicopters.  I was still confused as to why it wasn't working for the Character class though.  I found this video</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/#rotate-character","title":"Rotate Character","text":"<p>It turns out that as far as the Character class goes, the controller is in charge of rotation (with certain settings enabled) which means that the rotation pin on the MoveUpdatedComponent will not actually rotate the character.  Instead, SetControlRotation should be used.</p> <p></p> <p>This allows the Character to rotate in the same way. The only stipulation is that while we get the control rotation, we have to add the change in rotation (similar to the add local rotation function) and then set the control rotation.</p> <p>I'm sure there are several other methods to rotate the object that the player controls, like Add Controller Input.  These were just two alternatives that I found interesting that can offer more control.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/#summary","title":"Summary","text":"<p>Three main ways to rotate a player</p> <p>Character class - Set Control Rotation, Add Controller Input</p> <p>Pawn class - Add Local Rotation</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Rotation/#unrealengine-blueprints","title":"UnrealEngine #Blueprints","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/UE5%20Bug%20Fixes/","title":"UE5 Bug Fixes","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/UE5%20Bug%20Fixes/#details-panel-not-showing-for-cmc","title":"Details Panel not showing for CMC","text":"<p>Sometimes the details panel will disappear in UE5 editor, with the only option being to edit in C++. To fix this, you can reparent the Character class. Set it to the next class level up (Pawn?), and then reparent it back down.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/UE5%20Bug%20Fixes/#the-following-modules-are-missing-or-built-with-a-different-engine-version","title":"The following modules are missing or built with a different engine version","text":"<p>Sometimes the project will randomly break and it won't be able to compile because of engine version (???). It'll ask if you want to rebuild the modules. If you click yes, and it says try rebuilding from source manually (which you already are) delete the intermediate, Saved, Binaries, and potentially the .vs folders in your project, and then rebuild.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/","title":"Weapon Implementation","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#fps-template","title":"FPS Template","text":"<p>The FPS Template consists of a Character, a Weapon Pickup, a Weapon Component, and a Projectile.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#projectile","title":"Projectile","text":"<p>Just responsible for impulse logic for pushback, and qualities related to the \"bullet\" itself. </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#weapon-component","title":"Weapon Component","text":"<p>Weapon Component in their example inherits from the SkeletalMeshComponent. This means that the Weapon is both a Weapon and a SkeletalMeshComp as well.</p> <p>It has two responsibilities:</p> <p>1) Spawns a skeletal mesh (the gun asset) and attaches it to the Character Skeletal Mesh hand Socket</p> <p>2) Spawns a projectile to shoot.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#weapon-pickup","title":"Weapon Pickup","text":"<p>This is responsible for logic related to picking up weapons on the ground.</p> <p>It also has logic for dynamically adding a component to the character at runtime, and then binding the Weapon Component to it.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#my-implementation","title":"My Implementation","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#projectile_1","title":"Projectile","text":"<p>Create a baseclass for many types of projectiles. This could be shotgun spreads, sniper bullets, swords, etc.</p> <p>Compose (or not) with particles for effects</p> <p>BaseClass will have components for Collider, Mesh, Physics, Particles (Might be from a Spawner)</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#weapon-component_1","title":"Weapon Component","text":"<p>Create a baseclass for Weapon Components. Rather than inheriting, compose the Weapon with a SkeletalMeshComponent.</p> <p>Have behavior for spawning projectiles (shooting)</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#weapon-data","title":"Weapon Data","text":"<p>Weapon Table that different weapons/parts refer to</p> <ul> <li>Reload Speed</li> <li>Fire Rate</li> <li>Draw Time</li> <li>Blast Radius</li> <li>Mag Size</li> <li>Range</li> <li>Fire Mode</li> <li>Impact</li> <li>Handling</li> <li>Stability</li> <li>Aim Assist</li> <li>Recoil</li> <li>Mag Size</li> <li>Rarity</li> <li>Element</li> </ul>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#skeletal-mesh-component","title":"Skeletal Mesh Component","text":"<p>Create a class for spawning the skeletal mesh and joining to the socket of the PlayerCharacter reference (passed by the invoker even)</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#pickup","title":"Pickup","text":"<p>Have a base Pickup class so that we can extend this behavior to things beyond Weapons.</p> <p>Subclass can be weapon pickup which isn't responsible for directly instantiating a weapon, but for storing data about the weapon.</p> <p>Subclass can also be for items like armor or consumables.</p> <p>Subclass for RNG item? That way we can have designated drops for weapons and armor and such, but also have a loot system.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#item-spawner","title":"Item Spawner","text":"<p>The pickup class previously was responsible for the combined logic of \"picking up\" and \"spawning\".</p> <p>Item spawner will now refer to data stored either in the gamemode or on the Character (probably easiest). It'll have a reference to items, their type, and be able to initialize and assign weapons, items, and armor.</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#weapon-ideas","title":"Weapon Ideas","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#guns","title":"Guns","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#gravity-weapons","title":"Gravity Weapons","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#repulsor","title":"Repulsor","text":"<p>Description: Gravity Weapon that pushes objects and players away</p> <p>ToDo: - Add despawn (distance based)  - Add walls should despawn it - Less strength over time - Shouldn't shove objects through wall - Cone should be bigger </p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#velocity-bugs","title":"Velocity Bugs","text":"<ul> <li>Velocity is being imparted on the character. When jumping, velocity is applied upwards, when falling, velocity is applied downward</li> <li>Added destruction logic so that if an object is not simulating physics, the projectile will destroy on hit. When looking straight down, the projectile hits the player which causes it to despawn and only apply upward velocity? This is giving rocket jump functionality</li> </ul>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#vortex","title":"Vortex","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#traveler","title":"Traveler","text":""},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#standard","title":"Standard","text":"<p>SMG</p> <ul> <li>Vector</li> <li>MP7</li> <li>Mac 11</li> </ul> <p>Rifle</p> <p>DMR</p> <p>Sniper</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#charge-weapons","title":"Charge Weapons","text":"<p>Fusion Rifle</p> <p>Linear Fusion</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#energy-weapons","title":"Energy Weapons","text":"<p>Bee Gun</p> <p>Plasma Gun</p> <p>Volt Gun</p> <p>Gauss Beam</p>"},{"location":"Hobbies/Game%20Dev/Unreal%20Engine/Weapon%20Implementation/#explosive-weapons","title":"Explosive Weapons","text":"<p>Grenade Launcher</p> <p>RPG</p>"},{"location":"Hobbies/Inner%20Kernal/Meeting%201/","title":"Meeting 1","text":""},{"location":"Hobbies/Inner%20Kernal/Meeting%201/#constitution","title":"Constitution","text":"<p>Name: The Inner Kernel To empower students with knowledge and experience of FOSS with an emphasis on RedHat</p> <ul> <li>President: Alexis </li> <li>Co-president: Arza</li> <li>VP: Chillmaster Computer Architecture / Compilers - Tim</li> <li>VP: Networking - Talmage</li> <li>VP: Organization / Administration - Cassidey</li> </ul>"},{"location":"Hobbies/Inner%20Kernal/Meeting%201/#objectives","title":"Objectives","text":"<p>Main Objective Insert Arza's notes here</p>"},{"location":"Hobbies/Inner%20Kernal/Meeting%201/#increase-foss-literacy","title":"Increase FOSS literacy","text":"<p>Side Goals - Certs - HackerRank challenges - Learning FOSS  - Interview guides - GCC</p>"},{"location":"Hobbies/Inner%20Kernal/Meeting%201/#connections","title":"Connections","text":"<p>Confirmed - Redhat</p> <p>Tentative - Oracle - Chuck Knutson - Chuck Alison</p>"},{"location":"Hobbies/Inner%20Kernal/Meeting%201/#upcoming-meeting-topics","title":"Upcoming Meeting Topics","text":""},{"location":"Hobbies/Inner%20Kernal/Meeting%201/#next-meeting","title":"Next Meeting","text":"<p>Intro to Linux - Desktop environments - System Admin (Linux Directory) - Kernel, OS and more - Distros</p>"},{"location":"Hobbies/Linux/Blog/Getting%20into%20Linux/","title":"Getting into Linux","text":"<p>This is gonna be more blogish I guess. I started getting into linux about a month or so ago. One of my students wanted to start a Linux club and wanted to put me down as the mentor for the club.</p> <p>Since then I've been diving into learning Linux and I've honestly been spending an ungodly amount of time doing so. I shopped around for distros for a little while and saw Void Linux was the highest rated on distrowatch, and some people had brought it up, so I decided to look more into it.</p> <p>I started digging into the differences between all the distros and came to the conclusion that there are really only a handful of features that really distinguish distros between each other. That's your initialization software, and your package manager. Almost everything else is just preconfigured packages and settings. </p> <p>Void uses runit for initialization, and xbps as its package manager. Both have raving reviews online and everyone who uses them loves them. Between apt, dnf, pacman, nix, and a few others, xbps really seemed to stand out. It's really fast, lightweight, has very sensible commands. Void is also very lightweight, and isn't a fork of any distros. It's a standalone distro and ships with a very minimal installation.</p> <p>I was looking at a few other distros, mainly debian, fedora, and arch. Gentoo was on the table but it's a bit too much for me right now. I also considered the BSDs but that's also too much. I gave NixOS a shot, but their documentation is mostly evangelizing functional programming and teaching you how it works so that you can learn how to configure your system. Compared to the Arch docs, it was not a very good time. Maybe I'll tackle it again later. </p> <p>Anyway, I settled on Void and installed it pretty painlessly. The set up was straight forward, and they have a nice little TUI for the install. </p>"},{"location":"Hobbies/Linux/Blog/Linux%20Packages/","title":"Linux Packages","text":"<p>Some packages that are super useful / fun</p> <p>fastfetch - displays system info with logo of distro ncdu - ncurses disk utility ncmpcpp - ncurses music player client plus plus mpc - music player daemon spotify_player - CLI spotify client spotifyd - daemon for spotify to be used by cli tools and stuff</p> <p>rofi - nice little launcher (good for i3 can be themed) polybar - adds a text based status bar for i3 lxappearance - set themes and stuff autorandr - manage screens and dpi</p> <p>cava - cli waveform glava - better desktop waveform</p> <p>homebrew nodejs / npm</p> <p>gparted - disk management bottles - wine front end thunderbird - email client like outlook by mozilla flatseal - manages access for flatpak containers yazi - cli file explorer</p> <p>btop - cli process manager nitrogen - set wallpaper nvtop - cli nvidia card processes</p> <p>flameshot - screenshots</p> <p>amfora - connect to gemeni space</p> <p>wezterm - lua customizable terminal with image support</p>"},{"location":"Hobbies/Linux/Instructions/Desktop%20Launching%20for%20non%20packaged%20softare/","title":"Desktop Launching for non packaged softare","text":"<p>Go to ~/.local/share/applications for local</p> <p>Normal desktop files can be found at /usr/share/applications</p> <p>Create a file called \\&lt;name&gt;.desktop</p> <p>Add the following:</p> <pre><code>[Desktop Entry]\nEncoding=UTF-8\nVersion=1.0\nType=Application\nTerminal=false\n#Exec=/path/to/executable\nExec=sh -c \"/path/to/executable\"\nName=Name of Application\nIcon=/path/to/icon\n</code></pre>"},{"location":"Hobbies/Linux/Instructions/FetchxUpdater%20for%20non%20packaged%20software/","title":"FetchxUpdater for non packaged software","text":"<p>I created this bash script for fetching and updating software, this example is for vscode</p> <pre><code>#!/bin/bash\n\n########################\n#      Constants       #\n########################\n\nDOWNLOAD_URL=\"https://code.visualstudio.com/sha/download?build=stable&amp;os=linux-x64\"\nTEMP_TAR=\"/tmp/vscode_latest.tar.gz\"\nINSTALL_DIR=\"/opt/vscode/\"\n\n########################\n#       Execute        #\n########################\n\necho \"Downloading latest version of VSCode\"\n\nwget -O $TEMP_TAR $DOWNLOAD_URL\n\necho \"Extracting package\"\nsudo mkdir -p $INSTALL_DIR\nsudo tar -xvzf $TEMP_TAR -C $INSTALL_DIR --strip-components=1\n\necho \"Cleaning up...\"\nrm $TEMP_TAR\n\necho \"Creating symlink\"\n\nsudo ln -sf $INSTALL_DIR/bin/code /usr/bin/code\n\necho \"VSCode updated successfully.\"\n</code></pre> <p>You need to chmod it</p> <pre><code>$ chmod +x \"update.sh\" \n</code></pre> <p>Also, #!/bin/bash  makes the script executable</p>"},{"location":"Hobbies/Linux/Instructions/Gnome%20Settings%20Daemon/","title":"Gnome Settings Daemon","text":"<p>This is an excerpt from a forum post</p> <p>For what it's worth, running i3 with \"DE enhanced\" goodness seems quite a bit easier than it used to be.</p> <p>Myself, I use (and recommend) people start i3 through GDM (this is on a system with GNOME already installed running properly). From there, the only magic necessary should be to add this (or similar) into your <code>.i3/config</code>:</p> <p><code>exec /usr/libexec/gnome-settings-daemon</code></p> <p>Now laptop media keys (brightness, volume) should work, in addition to Gtk themes and other GNOME stuff. Your mileage may vary, and I do remember from previous approaches to the problem that individual subsystems would have to be <code>exec'd</code> individually, i.e. the power subsystem.</p> <p>EDIT: I can now confirm that the power subsystem works without any extra effort once the <code>gnome-settings-daemon</code> is started. This is when logging in through GDM (Fedora 17).</p> <p>I was having issues with dbus sessions and whatnot working. Doing this and executing the gnome-settings-deamon worked great. </p> <p>To set gdm as the display manager (login screen) on void linux, you just have to create a symlink. Be sure to unlink your display service first</p> <pre><code>sudo unlink /var/service/lightdm\n</code></pre> <pre><code>sudo ln -s /etc/sv/gdm /var/service/\n</code></pre> <p>My next plan is try out Plasma + i3. That might end up also being a crispy experience.</p> <p>https://faq.i3wm.org/question/279/how-do-you-use-i3-comfortably/?answer=342#post-id-342</p>"},{"location":"Hobbies/Linux/Instructions/Making%20Templates%20for%20void-packages/","title":"Making Templates for void packages","text":""},{"location":"Hobbies/Linux/Instructions/Making%20Templates%20for%20void-packages/#void-packages-manual","title":"Void Packages Manual","text":"<p>https://github.com/void-linux/void-packages/blob/master/Manual.md#namingconventions</p>"},{"location":"Hobbies/Linux/Instructions/Making%20Templates%20for%20void-packages/#tutorial-website","title":"Tutorial Website","text":"<p>https://xbps-src-tutorials.github.io/package-update-tutorial.html</p>"},{"location":"Hobbies/Linux/Instructions/Making%20Templates%20for%20void-packages/#instructional-video","title":"Instructional Video","text":"<p>https://www.youtube.com/watch?v=p_gcoKEjGho</p>"},{"location":"Hobbies/Linux/Instructions/Making%20Templates%20for%20void-packages/#checksums","title":"Checksums","text":"<p>use xgensum -fci \\&lt;package-name&gt; to generate the hash. Sometimes it fails for me on the first try, just do it again.</p>"},{"location":"Hobbies/Linux/Instructions/Setting%20dpi%20for%20i3/","title":"Setting dpi for i3","text":"<p>in ~/.Xresources:</p> <pre><code>*dpi: 120\nXft.dpi: 120\n</code></pre> <p>100% scaling is normally 96dpi, of course this will actually vary with monitors, but this is sort of a \"standard.\" My monitor is 108x107 which can be found by doing</p> <pre><code>$ xrandr -query | grep dpi\n</code></pre> <p>or </p> <pre><code>$ xdpyinfo | grep resolution\n</code></pre> <p>If 96dpi is \"100%\" then you can calculate the scaling by ratio</p> <p>96+96 = 192, ie 200%</p> <p>So if you want to find out the correct scaling for your monitor simply take your dpi (either 96 as standard, or the actual resolution of your screen) and then multiply it by 1.25 to get 125% scaling and so on.</p> <p>If you don't have an Xresources file in your home directory, simply</p> <pre><code>$ touch .Xresources\n</code></pre> <p>and then add the config to it.</p>"},{"location":"Hobbies/Linux/Instructions/Void%20Package%20Template%20resources%20for%20.NET%208/","title":"Void Package Template resources for .NET 8","text":""},{"location":"Hobbies/Linux/Instructions/Void%20Package%20Template%20resources%20for%20.NET%208/#release-notes","title":"Release Notes","text":"<p>https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.7/8.0.7.md</p>"},{"location":"Hobbies/Linux/Instructions/Void%20Package%20Template%20resources%20for%20.NET%208/#verify-downloads","title":"Verify downloads","text":"<p>https://github.com/dotnet/docs/blob/main/docs/core/install/includes/verify-download-macos-linux.md</p>"},{"location":"Hobbies/Linux/Instructions/Void%20Package%20Template%20resources%20for%20.NET%208/#net-source","title":".NET source","text":"<p>https://github.com/dotnet/dotnet/releases/tag/v8.0.7</p>"},{"location":"Hobbies/Music/Demise%20-%20Aegaeon/","title":"Demise   Aegaeon","text":""},{"location":"Hobbies/Music/Demise%20-%20Aegaeon/#this-is-the-first-guitar-cover-that-ive-done-by-ear","title":"This is the first guitar cover that I've done by ear.","text":"<p>Aegaeon is a cool little-known deathcore band from Evansville, Indiana. This song is one of my favorites from their Being EP, but tabs for it are nonexistent. It felt within my skill range to play so I decided to take a swing at learning it by ear. There was one other cover on youtube that I learned parts of the main verse and chorus from, but nothing for the solo at the end and some other sections. </p> <p>I was also playing around with Adobe Vegas at the time, so this cover is mostly me trying out different angles (some of which aren't great in hindsight). I'm currently working on a tab to distribute for anyone that wants to learn it.</p>"},{"location":"Hobbies/Music/Guitar%20Instructors/","title":"Guitar Instructors","text":""},{"location":"Hobbies/Music/Guitar%20Instructors/#scott-carstairs","title":"Scott Carstairs","text":"<p>https://discord.gg/teRMZAtsNA</p>"},{"location":"Hobbies/Music/Guitar%20Instructors/#qjamtracks-guitar-tutorials","title":"QJamTracks Guitar Tutorials","text":"<p>(Gitaarschool Rob van Hal)  </p> <p>Schoutenlaan 81 4931 RP Geertruidenberg Noord-Brabant Netherlands  </p> <p>E-mail:\u00a0info@qjamtracks.com </p> <p>YouTube.com/QJamtracks Facebook.com/QJamtracks Instagram.com/Qjamtracks</p>"},{"location":"Hobbies/Music/Guitar%20Instructors/#rusty-cooley","title":"Rusty Cooley","text":"<p>https://rustycooley.com/guitar-lessons-with-rusty-cooley/</p>"},{"location":"Hobbies/Music/Guitar%20Instructors/#level-concerns","title":"Level Concerns","text":""},{"location":"Hobbies/Music/Guitar%20Instructors/#beginner","title":"Beginner","text":"<ul> <li>Amp Settings</li> <li>Chord Progressions + Rhythm Guitar </li> <li>Right+Left Coordination</li> <li>Metronome</li> <li>Pulloffs</li> <li>Licks</li> <li>String Crossing </li> </ul>"},{"location":"Hobbies/Music/Guitar%20Instructors/#intermediate","title":"Intermediate","text":"<ul> <li>I think this is mostly where I should be</li> </ul>"},{"location":"Hobbies/Music/Guitar%20Instructors/#christian-muenzner","title":"Christian Muenzner","text":"<p>https://www.facebook.com/ChristianMuenznerOfficialSite</p>"},{"location":"Hobbies/Music/Guitar%20Instructors/#john-browne","title":"John Browne","text":"<p>Modern Metal Academy</p>"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/","title":"String Gauges and Tensions","text":""},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#yngvie-strings","title":"Yngvie Strings","text":"No. Pitch String Tension 1 e4 .008 11.4 2 b3 .011 12.1 3 g3 .014 12.4 4 d3 .022w 13.9 5 a2 .032w 17 6 e2 .046/.048 18.3/20"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#super-light-daddario-255","title":"Super Light (D'Addario) (25.5\")","text":"No. Pitch String Tension 1 e4 .009 14.4 2 b3 .011 12.1 3 g3 .016 16.1 4 d3 .024w 16.7 5 a2 .032w 17 6 e2 .042 15.8"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#super-light-daddario-275","title":"Super Light (D'Addario) (27.5\")","text":"No. Pitch String Tension 1 e4 .009 16.8 2 b3 .011 14.1 3 g3 .016 18.8 4 d3 .024w 19.4 5 a2 .032w 19.7 6 e2 .042 18.4 7 b1 .054 16.6 8 f#1 .065 13.8"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#super-light-balanced-275","title":"Super Light (Balanced) (27.5)","text":"No. Pitch String Tension 1 e4 .009 16.8 2 b3 .012 16.8 3 g3 .015 16.5 4 d3 .022w 16.2 5 a2 .032w 19.7 6 e2 .044w 19.8 7 b1 .059 19.5"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#regular-light-daddario-275","title":"Regular Light (D'Addario) (27.5\")","text":"No. Pitch String Tension 1 e4 .010 20.7 2 b3 .013 19.7 3 g3 .017 21.2 4 d3 .026w 23.2 5 a2 .036w 23.6 6 e2 .046 21.3 7 b1 .059 19.5"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#scott-carstairs-elixer-10-46-255","title":"Scott Carstairs Elixer 10-46 (25.5\")","text":"No. Pitch String Tension 1 e4 .010 17.8 2 b3 .013 18.2 3 g3 .017 18.2 4 d3 .026w 20.0 5 a2 .036w 20.3 6 e2 .046 18.3 7 b1 .056 15.5"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#progressive-tension-bulb-8-misha-28","title":"Progressive Tension Bulb 8 Misha (28\")","text":"No. Pitch String Tension 1 e4 .095 19.4 2 b3 .013 20.4 3 g3 .017 22 4 d3 .026w 24.1 5 a2 .036w 24.4 6 e2 .046w 22.1 7 b1 .060 21.2 8 F#1 .074 17.8"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#8-string-stock-set-265","title":"8 String Stock Set (26.5\")","text":"No. Pitch String Tension 1 e4 .009 15.6 2 b3 .011 13.1 3 g3 .016 17.4 4 d3 .024w 18.0 5 a2 .032w 18.3 6 e2 .042w 17.1 7 b1 .054 15.4 8 F#1 .065 12.4"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#8-string-set-265","title":"8 String Set (26.5\")","text":"No. Pitch String Tension 1 e4 .008 12.3 2 b3 .011 13.1 3 g3 .014 13.3 4 d3 .020w 13.7 5 a2 .032w 18.3 6 e2 .044w 18.4 7 b1 .060 19 8 F#1 .080/.085 18.1/20.8"},{"location":"Hobbies/Music/String%20Gauges%20and%20Tensions/#8-string-set-265-ia-tuning","title":"8 String Set (26.5\") (IA Tuning)","text":"No. Pitch String Tension 1 e4 .008 12.3 2 b3 .011 13.1 3 g3 .014 13.3 4 d3 .020w 13.7 5 a2 .032w 18.3 6 e2 .044w 18.4 7 a1 .064 17.6 8 e1 .085 16.5"},{"location":"Hobbies/Music/Tones/","title":"Tones","text":""},{"location":"Hobbies/Music/Tones/#scott-carstairs","title":"Scott Carstairs","text":"<p>Pre-dreamless</p> <p>Peavey head (probably 5150)</p> <p>Current</p> <p>Power Kemper  5153 Head Diesel Herbert - Empyrean 5150 Marshall Mesa Bogner is super sick</p> <p>Bass Darkglass</p> <p>Beringer x32 rack for splitting</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/","title":"GGD   Channel and Piano Roll Mapping","text":"<p>Alright, just a quick tut on how to set up GGD so that drums can be appropriately mapped to different channels on the mixer, and so that we can get the names of the kit pieces to appear properly on the piano roll.</p> <p>Note: Piano Roll Keys will be referred to from 0 index. I.e note 22 is the 23nd key starting at 0.</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/#channel-mapping","title":"Channel Mapping","text":"<p>This is pretty easy. </p> <p>Add Kontakt to the channel rack in FL Studio</p> <p>Once it's open, open up Invasion or whatever your GGD library is.</p> <p>Select the workspace management key that looks like some boxes up at the top near settings and save. Make sure outputs is selected</p> <p>Once outputs is visible at the bottom of the kontakt window, hit the + icon, which will open up a \"Outputs\" dialogue. </p> <p>You need to set the number of Outputs you want. For invasion, there's an overhead, room close, room far, and then 16 different instruments from the snares and triggers to the symbols. In total, you'll need 19 outputs, but I went with 20 just to make it even. </p> <p>Number of channels: 2 (for stereo)</p> <p>Host output: st.1 (pick the first one)</p> <p>Ascending output assignment: Check</p> <p>Delete existing channels before creating new ones: Check</p> <p>Make this your default configuration: Check.</p> <p>Then hit OK.</p> <p>You should see your outputs at the bottom. Now, in the FL Studio Wrapper, hit the gear, and go to Wrapper Settings &gt; Processing. Click Reset under connections, Set the first output, st1 to channel 1. Then click Auto map outputs.</p> <p>Back in GGD, click on the Full Kit tab so that the whole kit is visible, and Under the logo, there should be a drop down that says stereo. Under it, click Multi Out ADV. </p> <p>Now, when you click kick, snare, etc, you should see that each instrument is properly mapped to an output like st1, st2, st3, etc.</p> <p>You should now see that each drum maps to a mixer channel when you click on a drum. Now in the Channel Rack, you can decide which channel you want Kontakt on, and each drum piece will be offset by that channel. I set my drums to channel 4, and so all of my pieces are set to 4+...</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/#piano-roll-mapping","title":"Piano Roll Mapping","text":"<p>We're going to use BRSO Articulate to get our Drums properly mapped to the piano roll so it's easy to see what we're doing when programming drums. </p> <p>Rather than renaming the piano roll keys manually every time, we're going to create a text file that can be given to BRSO Articulate to do this mapping for us.</p> <p>For this part, it's a bit complicated, and time consuming, but not too difficult.</p> <p>The Piano Roll has 132 keys (0-131). On the piano roll, the lowest value, C-2 is index 0, and the highest value, B8 is index 131.</p> <p>GGD - Invasion has a default mapping spanning from A#-1 (Index 22) to G#4 (Index 80)</p> <p>You can do this in one of two ways. You can create a text file directly with 132 columns, and then just do the calculation in your head to flip the index for the key to the correct column value (index 0 is column 131, so you'll have to subtract 131 by your index), or you can do some excel magic to make sure you get it right which I think is easier assuming you don't have a direct manual that shows the numeric index for your instrument like GGD.</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/#excel","title":"Excel","text":"<p>Set up an excel spreadsheet.</p> <p>In Column A, Enter Numbers 0-131. </p> <p>In Column B, Enter the Notes starting at C-2 through the range of 0-131. I did this by starting at C0 and writing out all 12 notes up to B0. Excel is smart enough to figure out which numbers are next if you select that range and then drag to extend the column. I then backfilled the negative note values.</p> <p>In Column C, enter the drum pieces that correspond with the notes that they're mapped to in GGD. For instance, Left Kick maps to B-1.</p> <p>Save your work</p> <p>Once you have your kit mapped out, you can go to </p> <p>Data &gt; Sort </p> <p>And then you can sort by Column A, Descending or Greatest to Least.</p> <p>Save as a new file</p> <p>Delete your Number and Note Columns.</p> <p>Now, you'll need to save as a text file.</p> <p>This is where things get tricky. If you're using libreoffice, there's a way to save the CSV to a text CSV, but excel doesn't seem to offer this option.</p> <p>If you save your CSV to a text file, and you find that it doesn't have 131 columns, enter as many empty columns as necessary to get your note names to line up with the correct index.</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/#brso-articulate","title":"BRSO Articulate","text":"<p>Once you have your mapping in a text file, add BRSO to your channel rack. Switch to articulation configuration panel. There will be a piano roll key names option for you to import your txt file. Now, when you open piano roll on BRSO Articulate, you should see the names of your GGD kit on the piano roll.</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/#port-mapping","title":"Port mapping","text":"<p>To get sound out of the keys, now we need to just set the midi ports. In my example, I set BRSO Articulate Port to 0, and then I set the input Port for GGD to 0. I didn't mess with Channel in BRSO or Output Port on GGD.</p>"},{"location":"Hobbies/Music/FL%20Studio/GGD%20-%20Channel%20and%20Piano%20Roll%20Mapping/#get-all-of-the-notes","title":"Get all of the notes","text":"<p>The last step is to Switch to the General Configuration Panel in BRSO. \"Click Muliple Articulate Banks.\" BRSO only has 16 articulations. This allows you to have multiple banks which gives at least 64. For Invasion Drum Kit, this is enough. For a more complex instrument, you'll likely have to set up multiple BRSO instances, and map to different keys across the piano roll.</p>"},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/","title":"Musical Toolbox","text":"<p>Techniques from various songs that provide musical structure along with general inspirations for mood</p>"},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#video-references","title":"Video References","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#mathrock","title":"Mathrock","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#emo","title":"Emo","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#post-rock","title":"Post Rock","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#djent","title":"Djent","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#thall","title":"Thall","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#tech-death","title":"Tech Death","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#fallujah","title":"Fallujah","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#chris-storey-all-shall-perish","title":"Chris Storey (All Shall Perish)","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#ulcerate","title":"Ulcerate","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#black-crown-initiate","title":"Black Crown Initiate","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#fusion","title":"Fusion","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#cynic","title":"Cynic","text":""},{"location":"Hobbies/Music/Song%20Writing/Musical%20Toolbox/#christian-muenzner","title":"Christian Muenzner","text":""},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/","title":"Songs Learned","text":""},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#b-standard-7-string","title":"B Standard (7 String)","text":"<p>Fallujah - Sapphire - Alpha Incipient - The Dead Sea</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#drop-a-7-string","title":"Drop A (7 String)","text":"<p>Aegaeon - Demise - The Memory</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#drop-g-7-string","title":"Drop G (7 String)","text":"<p>Fit For an Autopsy -  Black Mammoth Born of Osiris - Ascension</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#standard","title":"Standard","text":"<p>Rodrigo y Gabriela - Stairway to Heaven Foo Fighters - Everlong</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#drop-d","title":"Drop D","text":"<p>Trivium - Pillar of Serpents Metallica - Disposable Heroes</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#d-standard","title":"D Standard","text":"<p>All That Remains - The Weak Willed</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#drop-c","title":"Drop C","text":"<p>August Burns Red - Marianas Trench - Indonesia - Rationalist - Meddler - Composure - American Dream</p> <p>Born of Osiris - Empires Erased - Open Arms to Damnation - The New Reign - Ascension</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#drop-b","title":"Drop B","text":"<p>Veil of Maya - Resistance - Codex - Mowgli - Mark The Lines - It's Not Safe to Swim Today - Entry Level Exit Wounds - We Bow in its Aura - It's Torn Away</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#songs-to-learn","title":"Songs to Learn","text":""},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#standard-7-string","title":"Standard (7 String)","text":"<p>Fallujah - Alpha Incipient - The Dead Sea - Ritual of Godflesh - Abandon</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#d-standard-6-string","title":"D Standard (6 string)","text":"<p>Emery</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#drop-a-7-string_1","title":"Drop A (7 String)","text":"<p>Aegaeon - Neural Union</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#g-standard-7-string","title":"G# Standard (7 String)","text":"<p>Rivers of Nihil - A Home - The Silent Life</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#f-standard-8-string","title":"F Standard (8 string)","text":"<p>Meshuggah - Demiurge - Rational Gaze - Bleed</p>"},{"location":"Hobbies/Music/Song%20Writing/Tim%27s%20Song%20Lists/#double-drop-e-8-string","title":"Double Drop E (8 String)","text":"<p>Infant Annilhilator - Plague Bearer</p>"},{"location":"Hobbies/Music/Theory%20Box/Modal%20Reflecting/","title":"Modal Reflecting","text":"<p>Before I get too carried away with myself, here's a link to a demonstration in reflections in sheet notation. Obviously, the same reflections will be apparent in guitar. </p> <p>https://jazzimproviser.com/tag/mirror-modes/</p> <p>The gist of this is that Ioanian and Phrygian mirror eachother positionally, while Dorian mirrors itself, Mixolydian and Aeolian mirror, and Lydian and Locrian mirror. I don't know that this has much to do with anything tonally, but it could be very useful to know for being aware of positions, and memorizing scales for different modes.</p> <p>Interestingly, in terms of Mirrors, if we center the modes around Dorian, rather than focusing on Ionian, we get this nice relationship. Alternatively, we can think about starting from the minor scale, and we can see the mirrored scales laid out.</p> Mode Name Aeolian Locrian Ionian Dorian Phrygian Lydian Mixolydian Relations Mirror Point <p>C Major (1):  - 1 2 3 4 5 6 7  -   w  w  h  w  w  w  h - C  D  E   F  G  A   B  C </p> 0 1 2 3 4 5 6 7 8 f c g M7 8 D 4 5 M6 A 1 M2 M3 E B <p>C Dorian (2): 1 2 b3 4 5 6 b7</p> 0 1 2 3 4 5 6 7 8 f c g M6 m7 8 M2 D m3 4 5 M6 A m7 1 M2 m3 E B <p>C Phrygian (3): 1 b2 b3 4 5 b6 b7</p> 0 1 2 3 4 5 6 7 f c g m6 m7 8 D m3 4 5 A 1 m2 E B <p>C Lydian (4): 1 2 3 #4 5 6 7</p> 0 1 2 3 4 5 6 7 8 9 f c 3 4 5 g M6 M7 1 2 3 D M3 #4 5 M6 M7 A 1 M2 M3 #4 E B <p>C Mixolydian (5): 1 2 3 4 5 6 b7</p> <p>C Aeolian (6): 1 2 b3 4 5 b6 b7</p> <p>C Locrian (7): 1 b2 b3 4 b5 b6 b7</p>"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/","title":"Theory Junk","text":""},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#pentatonic-scales","title":"Pentatonic Scales","text":"Major Pentatonic Formula 1 2 3 5 6 Interval W W W+H W W+H Lydian Pentatonic Formula 1 2 #4 5 6 Interval W W+H H W W + W Minor Pentatonic Formula 1 #2/b3 4 5 #6/b7 Interval W+H W W W+H W <p>The intervals can be thought of as being shifted forward major to minor by 1 interval, and minor to major by 4, or backwards from minor to major by 1, and backwards from major to minor by 4</p> <p>Relative Minor is the 6th of the Major.  </p> <p></p> <p>Diagonal Pentatonic</p> <p></p> <p></p>"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#some-general-shapes-you-can-rely-on","title":"Some general shapes you can rely on","text":"<p>If you find yourself playing around a root note, there are some safe bets you can make. </p> <p>Assume you're playing on the root note of a pentatonic scale. The term 3's indicates 3 frets or a note followed by a whole step, 4's indicates 4 frets or a note followed by a whole + half step. Backwards indicates playing notes behind a root note going towards the 0th fret Forwards indicates playing notes ahead of a root note going towards the 24th fret.</p>"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#minor-pentatonic","title":"Minor Pentatonic","text":"-2 -1 1 x x x ROOT x x In the minor pentatonic, if you play the root, you'll find yourself in the middle of a stack of 3's playing backwards. 0 1 2 3 x x ROOT x x x In the minor pentatonic, if you play the root note, there's a 3 above, a 4 below, and a 4 on your root playing forwards. <p>Adjust this shape for the 3's tuning divide on the b string.</p>"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#major-pentatonic","title":"Major Pentatonic","text":"<p>This one is even easier. </p> <p>If you're playing forwards, you get a stack of 4's above, 3's below, and you play a 3 on the root.</p> 0 1 2 3 x ROOT x x ROOT x x x x x <p>If you're playing backwards, you get a 4 below, and a stack of 3's above, and you play a 4 on the root.</p> -2 -1 0 ROOT x x x x x ROOT x x #### 2-3-2 or 3-2-3 or whatever"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#stacks-along-the-fretboard","title":"Stacks along the fretboard","text":"<p>Pentatonically speaking, if you were to have perfect fourths tuning, and an infinite number of strings, you'd find a repeating pattern of a double stack of 4s, followed by a triple stack of 3's. The interesting part is that after every set of stacks, the next set of stacks shifts backwards by 1</p> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 f x x x x Root x x x x Root c x Root x x x x Root x x x g x x x Root x x x x Root x D Root x x x x Root x x x x A x x Root x x x x Root x x E x x x x Root x x x x Root b x Root x x x x Root x x x g x x x x Root x x x x Root x d x Root x x x x Root x x x x ## Octaves <p>Octaves are nice and symmetrical</p> <p>Below the B string (3rd tuning divide), octave forward is 2 up 2 over, backward is 3 up 3 over.</p> String x x x x x x x E x B G x D x A E x String x x x x x x x E B x G x D A x E String x x x x x x x E x B x G D x A E x"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#chord-progressions","title":"Chord Progressions","text":"<p>Chord progression notation is with uppercase and lowercase roman numerals. Uppercase indicates major, lowercase indicates minor.</p> <p>The chord format for the Major key is I-ii-iii-IV-V-vi-vii* For C Major this would be C Major,  D Minor, E Minor, F Major, G Major, A minor, B Diminished</p> <p>The chord format for the Minor key is i-ii*-III-iv-v-VI-VII</p> <p>For A minor this would be A minor, B diminished, C major, D minor, e minor, F Major, G Major</p> <p>This format is ALWAYS the same for major and minor keys. </p> <p>Something to note is that for a given major key, the relative minor has its progression shifted forward by two, or backwards by 5. As you can see, for a C Major scale, the 7th chord is B Diminished, while the relative minor, A Minor, has its second as B Diminished.</p> <p></p> <p></p> <p>It should follow then that for any modes of the standard western heptatonic scale, that since the intervals are the same just at different starting points, these should work for any modality. </p>"},{"location":"Hobbies/Music/Theory%20Box/Theory%20Junk/#circle-of-fifths","title":"Circle of Fifths","text":"<p>Ordering for the Circle of Fifths is cool. Pretty much pick your starting note, say C, cut the circle in half from the line on the left. So the line should cut straight down the middle in C's case. Include the note to the left of your root.</p> <p>Now, every other note (including wrapping around is the next note in scale). For C, your 2nd is D, 3rd is E, 4th is F, 5th is G, 6th is A, 7th is B. That's a given.</p> <p>For the relative minor, take two notes to the right, 4 notes to the left. Every other note is still the sequential item in the sequence. Relative minor (6th) is always 3 away from your Major.</p> <p>W W H W W W H</p> <p>W H W W H W W \\</p>"},{"location":"Hobbies/Music/Theory%20Box/Where%20I%20need%20to%20improve/","title":"Where I need to improve","text":""},{"location":"Hobbies/Music/Theory%20Box/Where%20I%20need%20to%20improve/#beginner","title":"Beginner","text":"<ul> <li>Chord Positions / Hand Positioning</li> <li>Arpeggiation</li> <li>Chord Progressions </li> <li>Rhythm (Strumming, Muting, Percussion)</li> <li>Picking synchronization with right hand</li> <li>Left Hand Accuracy</li> <li>Right Hand Speed</li> <li>String Skipping Accuracy</li> <li>Metronome</li> <li>Licks</li> <li>Bends</li> <li>String Crossing </li> </ul>"},{"location":"Hobbies/Music/Theory%20Box/Where%20I%20need%20to%20improve/#intermediate","title":"Intermediate","text":"<ul> <li>I think this is mostly where I should be</li> </ul>"},{"location":"Hobbies/Music/Theory%20Box/Where%20I%20need%20to%20improve/#questions","title":"Questions","text":"<ul> <li>When string skipping, should I up pick or down pick? Insane tone from down pickers, but generally faster licks with up picking?</li> <li>How do I eliminate bounce when traveling across strings while also avoiding raking</li> <li>Pick slanting</li> <li>Left and Right hand muting best practices</li> <li>Good lessons for practicing moving the hand instead of anchoring the wrist</li> <li>Left and Right hand synchronization practices</li> <li>How to get comfortable with starting a lick with an up pick</li> <li>Let's say a lick has a legato feel but transitions strings mid run, how do I tackle that?</li> <li>Middle finger can't help but curl, what do?</li> <li></li> </ul>"},{"location":"Hobbies/Programming/CLI%20TUI%20App%20Projects/","title":"CLI TUI App Projects","text":""},{"location":"Hobbies/Programming/CLI%20TUI%20App%20Projects/#ncweather-btwttr","title":"ncweather? btwttr?","text":"<p>I think it'd be a lot of fun to develop an CLI TUI for weather. Something very aesthetic and weathery feeling, and maybe even use something like NotCurses to display low-res doppler radar for local weather in the terminal.</p>"},{"location":"Hobbies/Programming/CLI%20TUI%20App%20Projects/#btrandr","title":"btRandR","text":"<p>This one I'm working on now. Most of the options I've seen for applying monitor/display configurations are garbage. </p> <p>xrandr as far as I understand is the main way to adjust display settings. The problem is that it's cli / text based configs for an explicitly visual experience. Memorizing commands for how you want your monitor to appear sucks ass and is honestly just counter intuitive to the entire visual experience</p> <p>Other apps like lxrandr, arandr, and so on are very limited. Especially when it comes to scaling and dpi configuration.</p> <p>My plan is to make a TUI so that it finds a happy middle ground between being something that's fast, lightweight, and something that can illustrate your display options. A TUI could work nicely for maybe showing screen layouts, while still having text based selections for scaling, layout, dpi etc probably in the form of menus for each setting category.</p>"},{"location":"Hobbies/Programming/Jake%27s%20Resume/","title":"Jake's Resume","text":"<pre><code>%-------------------------\n% Resume in Latex\n% Author : Jake Gutierrez\n% Based off of: https://github.com/sb2nov/resume\n% License : MIT\n%------------------------\n\n\\documentclass[letterpaper,11pt]{article}\n\n\\usepackage{latexsym}\n\\usepackage[empty]{fullpage}\n\\usepackage{titlesec}\n\\usepackage{marvosym}\n\\usepackage[usenames,dvipsnames]{color}\n\\usepackage{verbatim}\n\\usepackage{enumitem}\n\\usepackage[hidelinks]{hyperref}\n\\usepackage{fancyhdr}\n\\usepackage[english]{babel}\n\\usepackage{tabularx}\n\\input{glyphtounicode}\n\n\n%----------FONT OPTIONS----------\n% sans-serif\n% \\usepackage[sfdefault]{FiraSans}\n% \\usepackage[sfdefault]{roboto}\n% \\usepackage[sfdefault]{noto-sans}\n% \\usepackage[default]{sourcesanspro}\n\n% serif\n% \\usepackage{CormorantGaramond}\n% \\usepackage{charter}\n\n\n\\pagestyle{fancy}\n\\fancyhf{} % clear all header and footer fields\n\\fancyfoot{}\n\\renewcommand{\\headrulewidth}{0pt}\n\\renewcommand{\\footrulewidth}{0pt}\n\n% Adjust margins\n\\addtolength{\\oddsidemargin}{-0.5in}\n\\addtolength{\\evensidemargin}{-0.5in}\n\\addtolength{\\textwidth}{1in}\n\\addtolength{\\topmargin}{-.5in}\n\\addtolength{\\textheight}{1.0in}\n\n\\urlstyle{same}\n\n\\raggedbottom\n\\raggedright\n\\setlength{\\tabcolsep}{0in}\n\n% Sections formatting\n\\titleformat{\\section}{\n  \\vspace{-4pt}\\scshape\\raggedright\\large\n}{}{0em}{}[\\color{black}\\titlerule \\vspace{-5pt}]\n\n% Ensure that generate pdf is machine readable/ATS parsable\n\\pdfgentounicode=1\n\n%-------------------------\n% Custom commands\n\\newcommand{\\resumeItem}[1]{\n  \\item\\small{\n    {#1 \\vspace{-2pt}}\n  }\n}\n\n\\newcommand{\\resumeSubheading}[4]{\n  \\vspace{-2pt}\\item\n    \\begin{tabular*}{0.97\\textwidth}[t]{l@{\\extracolsep{\\fill}}r}\n      \\textbf{#1} &amp; #2 \\\\\n      \\textit{\\small#3} &amp; \\textit{\\small #4} \\\\\n    \\end{tabular*}\\vspace{-7pt}\n}\n\n\\newcommand{\\resumeSubSubheading}[2]{\n    \\item\n    \\begin{tabular*}{0.97\\textwidth}{l@{\\extracolsep{\\fill}}r}\n      \\textit{\\small#1} &amp; \\textit{\\small #2} \\\\\n    \\end{tabular*}\\vspace{-7pt}\n}\n\n\\newcommand{\\resumeProjectHeading}[2]{\n    \\item\n    \\begin{tabular*}{0.97\\textwidth}{l@{\\extracolsep{\\fill}}r}\n      \\small#1 &amp; #2 \\\\\n    \\end{tabular*}\\vspace{-7pt}\n}\n\n\\newcommand{\\resumeSubItem}[1]{\\resumeItem{#1}\\vspace{-4pt}}\n\n\\renewcommand\\labelitemii{$\\vcenter{\\hbox{\\tiny$\\bullet$}}$}\n\n\\newcommand{\\resumeSubHeadingListStart}{\\begin{itemize}[leftmargin=0.15in, label={}]}\n\\newcommand{\\resumeSubHeadingListEnd}{\\end{itemize}}\n\\newcommand{\\resumeItemListStart}{\\begin{itemize}}\n\\newcommand{\\resumeItemListEnd}{\\end{itemize}\\vspace{-5pt}}\n\n%-------------------------------------------\n%%%%%%  RESUME STARTS HERE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\\begin{document}\n\n%----------HEADING----------\n% \\begin{tabular*}{\\textwidth}{l@{\\extracolsep{\\fill}}r}\n%   \\textbf{\\href{http://sourabhbajaj.com/}{\\Large Sourabh Bajaj}} &amp; Email : \\href{mailto:sourabh@sourabhbajaj.com}{sourabh@sourabhbajaj.com}\\\\\n%   \\href{http://sourabhbajaj.com/}{http://www.sourabhbajaj.com} &amp; Mobile : +1-123-456-7890 \\\\\n% \\end{tabular*}\n\n\\begin{center}\n    \\textbf{\\Huge \\scshape Jake Ryan} \\\\ \\vspace{1pt}\n    \\small 123-456-7890 $|$ \\href{mailto:x@x.com}{\\underline{jake@su.edu}} $|$ \n    \\href{https://linkedin.com/in/...}{\\underline{linkedin.com/in/jake}} $|$\n    \\href{https://github.com/...}{\\underline{github.com/jake}}\n\\end{center}\n\n\n%-----------EDUCATION-----------\n\\section{Education}\n  \\resumeSubHeadingListStart\n    \\resumeSubheading\n      {Southwestern University}{Georgetown, TX}\n      {Bachelor of Arts in Computer Science, Minor in Business}{Aug. 2018 -- May 2021}\n    \\resumeSubheading\n      {Blinn College}{Bryan, TX}\n      {Associate's in Liberal Arts}{Aug. 2014 -- May 2018}\n  \\resumeSubHeadingListEnd\n\n\n%-----------EXPERIENCE-----------\n\\section{Experience}\n  \\resumeSubHeadingListStart\n\n    \\resumeSubheading\n      {Undergraduate Research Assistant}{June 2020 -- Present}\n      {Texas A\\&amp;M University}{College Station, TX}\n      \\resumeItemListStart\n        \\resumeItem{Developed a REST API using FastAPI and PostgreSQL to store data from learning management systems}\n        \\resumeItem{Developed a full-stack web application using Flask, React, PostgreSQL and Docker to analyze GitHub data}\n        \\resumeItem{Explored ways to visualize GitHub collaboration in a classroom setting}\n      \\resumeItemListEnd\n\n% -----------Multiple Positions Heading-----------\n%    \\resumeSubSubheading\n%     {Software Engineer I}{Oct 2014 - Sep 2016}\n%     \\resumeItemListStart\n%        \\resumeItem{Apache Beam}\n%          {Apache Beam is a unified model for defining both batch and streaming data-parallel processing pipelines}\n%     \\resumeItemListEnd\n%    \\resumeSubHeadingListEnd\n%-------------------------------------------\n\n    \\resumeSubheading\n      {Information Technology Support Specialist}{Sep. 2018 -- Present}\n      {Southwestern University}{Georgetown, TX}\n      \\resumeItemListStart\n        \\resumeItem{Communicate with managers to set up campus computers used on campus}\n        \\resumeItem{Assess and troubleshoot computer problems brought by students, faculty and staff}\n        \\resumeItem{Maintain upkeep of computers, classroom equipment, and 200 printers across campus}\n    \\resumeItemListEnd\n\n    \\resumeSubheading\n      {Artificial Intelligence Research Assistant}{May 2019 -- July 2019}\n      {Southwestern University}{Georgetown, TX}\n      \\resumeItemListStart\n        \\resumeItem{Explored methods to generate video game dungeons based off of \\emph{The Legend of Zelda}}\n        \\resumeItem{Developed a game in Java to test the generated dungeons}\n        \\resumeItem{Contributed 50K+ lines of code to an established codebase via Git}\n        \\resumeItem{Conducted  a human subject study to determine which video game dungeon generation technique is enjoyable}\n        \\resumeItem{Wrote an 8-page paper and gave multiple presentations on-campus}\n        \\resumeItem{Presented virtually to the World Conference on Computational Intelligence}\n      \\resumeItemListEnd\n\n  \\resumeSubHeadingListEnd\n\n\n%-----------PROJECTS-----------\n\\section{Projects}\n    \\resumeSubHeadingListStart\n      \\resumeProjectHeading\n          {\\textbf{Gitlytics} $|$ \\emph{Python, Flask, React, PostgreSQL, Docker}}{June 2020 -- Present}\n          \\resumeItemListStart\n            \\resumeItem{Developed a full-stack web application using with Flask serving a REST API with React as the frontend}\n            \\resumeItem{Implemented GitHub OAuth to get data from user\u2019s repositories}\n            \\resumeItem{Visualized GitHub data to show collaboration}\n            \\resumeItem{Used Celery and Redis for asynchronous tasks}\n          \\resumeItemListEnd\n      \\resumeProjectHeading\n          {\\textbf{Simple Paintball} $|$ \\emph{Spigot API, Java, Maven, TravisCI, Git}}{May 2018 -- May 2020}\n          \\resumeItemListStart\n            \\resumeItem{Developed a Minecraft server plugin to entertain kids during free time for a previous job}\n            \\resumeItem{Published plugin to websites gaining 2K+ downloads and an average 4.5/5-star review}\n            \\resumeItem{Implemented continuous delivery using TravisCI to build the plugin upon new a release}\n            \\resumeItem{Collaborated with Minecraft server administrators to suggest features and get feedback about the plugin}\n          \\resumeItemListEnd\n    \\resumeSubHeadingListEnd\n\n\n\n%\n%-----------PROGRAMMING SKILLS-----------\n\\section{Technical Skills}\n \\begin{itemize}[leftmargin=0.15in, label={}]\n    \\small{\\item{\n     \\textbf{Languages}{: Java, Python, C/C++, SQL (Postgres), JavaScript, HTML/CSS, R} \\\\\n     \\textbf{Frameworks}{: React, Node.js, Flask, JUnit, WordPress, Material-UI, FastAPI} \\\\\n     \\textbf{Developer Tools}{: Git, Docker, TravisCI, Google Cloud Platform, VS Code, Visual Studio, PyCharm, IntelliJ, Eclipse} \\\\\n     \\textbf{Libraries}{: pandas, NumPy, Matplotlib}\n    }}\n \\end{itemize}\n\n\n%-------------------------------------------\n\\end{document}\n</code></pre>"},{"location":"Hobbies/Programming/MSYS%202/","title":"MSYS 2","text":""},{"location":"Hobbies/Programming/MSYS%202/#rationale","title":"Rationale","text":"<p>This semester (Spring 2024) I'm teaching a C++ course at UVU. Since my last C++ course (Spring 2020), I've mostly used VSCode as my daily driver for everything code related. I used Visual Studio pretty extensively at the beginning of my undergrad, and I found it fairly useful for my capstone which used C#, but I mostly chalk that up to not knowing what I was doing.</p> <p>Anyway, VSCode for C++ development is a bit of a pain since, by default, you have to use MSVC to compile. This requires a whole annoying process of starting up the Developer Command Prompt for VS and starting VSCode from there. I could probably create some script or something but the whole process is kind of a pain in the ass. </p> <p>Microsoft has a nice article about using other compilers, though. So I decided to go with the MSYS2 route, which provides a lot of really great tools in a UNIX like environment. It allows you to use GCC which is great for a whole lot of reasons.</p>"},{"location":"Hobbies/Programming/MSYS%202/#getting-set-up","title":"Getting Set Up","text":"<p>This article provides some insight on setting up MSYS2 and getting VSCode configured to run C++ projects using GCC.</p> <p>This link from MSYS2 provides insight on getting an MSYS2 environment set up in the new windows 11 terminal.</p> <p>This stack overflow Q/A provides insight on setting up Bash as your main terminal in VSCode. This is very useful since the whole point of MSYS2 is to provide a UNIXy environment with tools that you might encounter in Linux. It has pacman package manager which is cool for keeping a clean development environment. </p>"},{"location":"Hobbies/Programming/MSYS%202/#gcc","title":"GCC","text":"<p>One of the really nice benefits of using MSYS2 is that it's kind of a one-stop shop for a lot of languages. GCC supports C, C++, Objective-C, Objective-C++, Ada, Fortran, D, Go, and BRIG (HSAIL).</p> <p>D may be supported. Check the following link more thoroughly https://dlang.org/install.html#get_msys</p> <p>From what I've read, the Go team maintains both versions of Go. The standard go compiler compiles faster, but the GCC go compiler can leverage more powerful optimizations for faster runtime performance. GCC also runs on more architectures.</p> <p>GCC doesn't necessarily leverage every tool developed for these languages, but does generally provide a solid environment for building and debugging projects in any of these languages.</p>"},{"location":"Hobbies/Programming/MSYS%202/#python","title":"Python","text":"<p>It seems that MSYS2 is usually one update cycle behind python. MSYS2 maintains their own fork of python that's compliant with linux pathing. Python for windows targets windows directories specifically, so there's apparently some conflicts there, which is why the maintain their own fork of CPython.</p>"},{"location":"Hobbies/Programming/UV%20for%20Python%20venv%27s/","title":"UV for Python venv's","text":"<p>This is a little cheat sheet for uv commands</p> <p>uv sync: use to \"activate\" an environment. This allows you to run python commands normally as opposed to having to use uv run --hello.py or whatever</p> <p>uv run: execute tools and scripts</p> <p>uv add: adds dependencies to a project. Alternative to pip install but also adds the library to your lock file.</p>"},{"location":"Hobbies/Programming/Database%20Junk/Useful%20Links/","title":"Useful Links","text":"<p>https://www.postgresql.org/about/</p> <p>https://web.archive.org/web/20180122225838/http://blogs.tedneward.com/post/the-vietnam-of-computer-science/</p> <p>https://en.wikipedia.org/wiki/Object%E2%80%93relational_impedance_mismatch</p>"}]}